
Szymon.Sochaj_projektSMiW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009434  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000410  080095c8  080095c8  000195c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099d8  080099d8  00020200  2**0
                  CONTENTS
  4 .ARM          00000008  080099d8  080099d8  000199d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080099e0  080099e0  00020200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080099e0  080099e0  000199e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080099e4  080099e4  000199e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  080099e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f8  20000200  08009be8  00020200  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003f8  08009be8  000203f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 12 .debug_info   000128aa  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002400  00000000  00000000  00032ada  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001230  00000000  00000000  00034ee0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001108  00000000  00000000  00036110  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021800  00000000  00000000  00037218  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d658  00000000  00000000  00058a18  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cb7ac  00000000  00000000  00066070  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013181c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a64  00000000  00000000  00131898  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000200 	.word	0x20000200
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080095ac 	.word	0x080095ac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000204 	.word	0x20000204
 80001cc:	080095ac 	.word	0x080095ac

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <Delay_us>:
char thirdRowString[20];
char fourthRowString[20];


void Delay_us(uint16_t us)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);
 8000f92:	4b08      	ldr	r3, [pc, #32]	; (8000fb4 <Delay_us+0x2c>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	2200      	movs	r2, #0
 8000f98:	625a      	str	r2, [r3, #36]	; 0x24
	    while ((__HAL_TIM_GET_COUNTER(&htim1))<us);
 8000f9a:	bf00      	nop
 8000f9c:	4b05      	ldr	r3, [pc, #20]	; (8000fb4 <Delay_us+0x2c>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fa2:	88fb      	ldrh	r3, [r7, #6]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	d3f9      	bcc.n	8000f9c <Delay_us+0x14>
}
 8000fa8:	bf00      	nop
 8000faa:	370c      	adds	r7, #12
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	200002c8 	.word	0x200002c8

08000fb8 <lcd_send_cmd>:

#define SLAVE_ADDRESS_LCD 0x4E // change this according to your setup

void lcd_send_cmd (char cmd)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fc2:	b672      	cpsid	i
	__disable_irq();
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000fc4:	79fb      	ldrb	r3, [r7, #7]
 8000fc6:	f023 030f 	bic.w	r3, r3, #15
 8000fca:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
 8000fce:	011b      	lsls	r3, r3, #4
 8000fd0:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000fd2:	7bfb      	ldrb	r3, [r7, #15]
 8000fd4:	f043 030c 	orr.w	r3, r3, #12
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000fdc:	7bfb      	ldrb	r3, [r7, #15]
 8000fde:	f043 0308 	orr.w	r3, r3, #8
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000fe6:	7bbb      	ldrb	r3, [r7, #14]
 8000fe8:	f043 030c 	orr.w	r3, r3, #12
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000ff0:	7bbb      	ldrb	r3, [r7, #14]
 8000ff2:	f043 0308 	orr.w	r3, r3, #8
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,data_t, 4, 100);
 8000ffa:	f107 0208 	add.w	r2, r7, #8
 8000ffe:	2364      	movs	r3, #100	; 0x64
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2304      	movs	r3, #4
 8001004:	214e      	movs	r1, #78	; 0x4e
 8001006:	4804      	ldr	r0, [pc, #16]	; (8001018 <lcd_send_cmd+0x60>)
 8001008:	f001 ffbc 	bl	8002f84 <HAL_I2C_Master_Transmit>
  __ASM volatile ("cpsie i" : : : "memory");
 800100c:	b662      	cpsie	i
	__enable_irq();
}
 800100e:	bf00      	nop
 8001010:	3710      	adds	r7, #16
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	20000244 	.word	0x20000244

0800101c <lcd_send_data>:

void lcd_send_data (char data)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b086      	sub	sp, #24
 8001020:	af02      	add	r7, sp, #8
 8001022:	4603      	mov	r3, r0
 8001024:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 8001026:	b672      	cpsid	i

	__disable_irq();
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8001028:	79fb      	ldrb	r3, [r7, #7]
 800102a:	f023 030f 	bic.w	r3, r3, #15
 800102e:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8001030:	79fb      	ldrb	r3, [r7, #7]
 8001032:	011b      	lsls	r3, r3, #4
 8001034:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001036:	7bfb      	ldrb	r3, [r7, #15]
 8001038:	f043 030d 	orr.w	r3, r3, #13
 800103c:	b2db      	uxtb	r3, r3
 800103e:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001040:	7bfb      	ldrb	r3, [r7, #15]
 8001042:	f043 0309 	orr.w	r3, r3, #9
 8001046:	b2db      	uxtb	r3, r3
 8001048:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800104a:	7bbb      	ldrb	r3, [r7, #14]
 800104c:	f043 030d 	orr.w	r3, r3, #13
 8001050:	b2db      	uxtb	r3, r3
 8001052:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001054:	7bbb      	ldrb	r3, [r7, #14]
 8001056:	f043 0309 	orr.w	r3, r3, #9
 800105a:	b2db      	uxtb	r3, r3
 800105c:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, data_t, 4, 100);
 800105e:	f107 0208 	add.w	r2, r7, #8
 8001062:	2364      	movs	r3, #100	; 0x64
 8001064:	9300      	str	r3, [sp, #0]
 8001066:	2304      	movs	r3, #4
 8001068:	214e      	movs	r1, #78	; 0x4e
 800106a:	4804      	ldr	r0, [pc, #16]	; (800107c <lcd_send_data+0x60>)
 800106c:	f001 ff8a 	bl	8002f84 <HAL_I2C_Master_Transmit>
  __ASM volatile ("cpsie i" : : : "memory");
 8001070:	b662      	cpsie	i

	__enable_irq();
}
 8001072:	bf00      	nop
 8001074:	3710      	adds	r7, #16
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	20000244 	.word	0x20000244

08001080 <loadingScreen>:




void loadingScreen()
{
 8001080:	b5b0      	push	{r4, r5, r7, lr}
 8001082:	b096      	sub	sp, #88	; 0x58
 8001084:	af00      	add	r7, sp, #0
	int i;
	int j=0;
 8001086:	2300      	movs	r3, #0
 8001088:	653b      	str	r3, [r7, #80]	; 0x50
	char first[20]=	{'I','N','I','C','J','A','L','I','Z','A','C','J','A',' ',' ',' ',' ',' ',' ',' '};
 800108a:	4b55      	ldr	r3, [pc, #340]	; (80011e0 <loadingScreen+0x160>)
 800108c:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001090:	461d      	mov	r5, r3
 8001092:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001094:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001096:	682b      	ldr	r3, [r5, #0]
 8001098:	6023      	str	r3, [r4, #0]
	char second[20]={'.','.','.',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '};
 800109a:	4b52      	ldr	r3, [pc, #328]	; (80011e4 <loadingScreen+0x164>)
 800109c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80010a0:	461d      	mov	r5, r3
 80010a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010a6:	682b      	ldr	r3, [r5, #0]
 80010a8:	6023      	str	r3, [r4, #0]
	char third[20]=	{'.','.','.',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '};
 80010aa:	4b4e      	ldr	r3, [pc, #312]	; (80011e4 <loadingScreen+0x164>)
 80010ac:	f107 0414 	add.w	r4, r7, #20
 80010b0:	461d      	mov	r5, r3
 80010b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010b6:	682b      	ldr	r3, [r5, #0]
 80010b8:	6023      	str	r3, [r4, #0]
	char fourth[20]={'.','.','.',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '};
 80010ba:	4b4a      	ldr	r3, [pc, #296]	; (80011e4 <loadingScreen+0x164>)
 80010bc:	463c      	mov	r4, r7
 80010be:	461d      	mov	r5, r3
 80010c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010c4:	682b      	ldr	r3, [r5, #0]
 80010c6:	6023      	str	r3, [r4, #0]

	for(i=0x00; i<0x14 ; i++)
 80010c8:	2300      	movs	r3, #0
 80010ca:	657b      	str	r3, [r7, #84]	; 0x54
 80010cc:	e019      	b.n	8001102 <loadingScreen+0x82>
	{
		lcd_send_cmd (0x80|i);
 80010ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80010d0:	b25b      	sxtb	r3, r3
 80010d2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010d6:	b25b      	sxtb	r3, r3
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff ff6c 	bl	8000fb8 <lcd_send_cmd>
		lcd_send_data(first[j]);
 80010e0:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80010e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80010e6:	4413      	add	r3, r2
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff ff96 	bl	800101c <lcd_send_data>
		HAL_Delay(10);
 80010f0:	200a      	movs	r0, #10
 80010f2:	f001 fbc7 	bl	8002884 <HAL_Delay>
		j++;
 80010f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80010f8:	3301      	adds	r3, #1
 80010fa:	653b      	str	r3, [r7, #80]	; 0x50
	for(i=0x00; i<0x14 ; i++)
 80010fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80010fe:	3301      	adds	r3, #1
 8001100:	657b      	str	r3, [r7, #84]	; 0x54
 8001102:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001104:	2b13      	cmp	r3, #19
 8001106:	dde2      	ble.n	80010ce <loadingScreen+0x4e>
	}
	j=0;
 8001108:	2300      	movs	r3, #0
 800110a:	653b      	str	r3, [r7, #80]	; 0x50
	for(i=0x40; i<0x54 ; i++)
 800110c:	2340      	movs	r3, #64	; 0x40
 800110e:	657b      	str	r3, [r7, #84]	; 0x54
 8001110:	e019      	b.n	8001146 <loadingScreen+0xc6>
	{
		lcd_send_cmd (0x80|i);
 8001112:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001114:	b25b      	sxtb	r3, r3
 8001116:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800111a:	b25b      	sxtb	r3, r3
 800111c:	b2db      	uxtb	r3, r3
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff ff4a 	bl	8000fb8 <lcd_send_cmd>
		lcd_send_data(second[j]);
 8001124:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001128:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800112a:	4413      	add	r3, r2
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff ff74 	bl	800101c <lcd_send_data>
		HAL_Delay(10);
 8001134:	200a      	movs	r0, #10
 8001136:	f001 fba5 	bl	8002884 <HAL_Delay>
		j++;
 800113a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800113c:	3301      	adds	r3, #1
 800113e:	653b      	str	r3, [r7, #80]	; 0x50
	for(i=0x40; i<0x54 ; i++)
 8001140:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001142:	3301      	adds	r3, #1
 8001144:	657b      	str	r3, [r7, #84]	; 0x54
 8001146:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001148:	2b53      	cmp	r3, #83	; 0x53
 800114a:	dde2      	ble.n	8001112 <loadingScreen+0x92>
	}
	j=0;
 800114c:	2300      	movs	r3, #0
 800114e:	653b      	str	r3, [r7, #80]	; 0x50

	for(i=0x14;i<0x28;i++)
 8001150:	2314      	movs	r3, #20
 8001152:	657b      	str	r3, [r7, #84]	; 0x54
 8001154:	e019      	b.n	800118a <loadingScreen+0x10a>
	{
		lcd_send_cmd (0x80|i);
 8001156:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001158:	b25b      	sxtb	r3, r3
 800115a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800115e:	b25b      	sxtb	r3, r3
 8001160:	b2db      	uxtb	r3, r3
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff ff28 	bl	8000fb8 <lcd_send_cmd>
		lcd_send_data(third[j]);
 8001168:	f107 0214 	add.w	r2, r7, #20
 800116c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800116e:	4413      	add	r3, r2
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff ff52 	bl	800101c <lcd_send_data>
		HAL_Delay(10);
 8001178:	200a      	movs	r0, #10
 800117a:	f001 fb83 	bl	8002884 <HAL_Delay>
		j++;
 800117e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001180:	3301      	adds	r3, #1
 8001182:	653b      	str	r3, [r7, #80]	; 0x50
	for(i=0x14;i<0x28;i++)
 8001184:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001186:	3301      	adds	r3, #1
 8001188:	657b      	str	r3, [r7, #84]	; 0x54
 800118a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800118c:	2b27      	cmp	r3, #39	; 0x27
 800118e:	dde2      	ble.n	8001156 <loadingScreen+0xd6>
	}
	j=0;
 8001190:	2300      	movs	r3, #0
 8001192:	653b      	str	r3, [r7, #80]	; 0x50
	for(i=0x54; i<0x68 ; i++)
 8001194:	2354      	movs	r3, #84	; 0x54
 8001196:	657b      	str	r3, [r7, #84]	; 0x54
 8001198:	e018      	b.n	80011cc <loadingScreen+0x14c>
	{
		lcd_send_cmd (0x80|i);
 800119a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800119c:	b25b      	sxtb	r3, r3
 800119e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80011a2:	b25b      	sxtb	r3, r3
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7ff ff06 	bl	8000fb8 <lcd_send_cmd>
		lcd_send_data(fourth[j]);
 80011ac:	463a      	mov	r2, r7
 80011ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80011b0:	4413      	add	r3, r2
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff ff31 	bl	800101c <lcd_send_data>
		HAL_Delay(10);
 80011ba:	200a      	movs	r0, #10
 80011bc:	f001 fb62 	bl	8002884 <HAL_Delay>
		j++;
 80011c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80011c2:	3301      	adds	r3, #1
 80011c4:	653b      	str	r3, [r7, #80]	; 0x50
	for(i=0x54; i<0x68 ; i++)
 80011c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011c8:	3301      	adds	r3, #1
 80011ca:	657b      	str	r3, [r7, #84]	; 0x54
 80011cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011ce:	2b67      	cmp	r3, #103	; 0x67
 80011d0:	dde3      	ble.n	800119a <loadingScreen+0x11a>
	}

	HAL_Delay(200);
 80011d2:	20c8      	movs	r0, #200	; 0xc8
 80011d4:	f001 fb56 	bl	8002884 <HAL_Delay>
}
 80011d8:	bf00      	nop
 80011da:	3758      	adds	r7, #88	; 0x58
 80011dc:	46bd      	mov	sp, r7
 80011de:	bdb0      	pop	{r4, r5, r7, pc}
 80011e0:	080095c8 	.word	0x080095c8
 80011e4:	080095dc 	.word	0x080095dc

080011e8 <lcd_init>:

void lcd_init (void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0

	// 4 bit initialisation
	HAL_Delay(41);  // wait for >40ms
 80011ec:	2029      	movs	r0, #41	; 0x29
 80011ee:	f001 fb49 	bl	8002884 <HAL_Delay>
	lcd_send_cmd (0x30);
 80011f2:	2030      	movs	r0, #48	; 0x30
 80011f4:	f7ff fee0 	bl	8000fb8 <lcd_send_cmd>
	Delay_us(42000);  // wait for >4.1ms
 80011f8:	f24a 4010 	movw	r0, #42000	; 0xa410
 80011fc:	f7ff fec4 	bl	8000f88 <Delay_us>
	lcd_send_cmd (0x30);
 8001200:	2030      	movs	r0, #48	; 0x30
 8001202:	f7ff fed9 	bl	8000fb8 <lcd_send_cmd>
	Delay_us(110);  // wait for >100us
 8001206:	206e      	movs	r0, #110	; 0x6e
 8001208:	f7ff febe 	bl	8000f88 <Delay_us>
	lcd_send_cmd (0x30);
 800120c:	2030      	movs	r0, #48	; 0x30
 800120e:	f7ff fed3 	bl	8000fb8 <lcd_send_cmd>
	HAL_Delay(50);
 8001212:	2032      	movs	r0, #50	; 0x32
 8001214:	f001 fb36 	bl	8002884 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8001218:	2020      	movs	r0, #32
 800121a:	f7ff fecd 	bl	8000fb8 <lcd_send_cmd>
	HAL_Delay(50);
 800121e:	2032      	movs	r0, #50	; 0x32
 8001220:	f001 fb30 	bl	8002884 <HAL_Delay>

	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001224:	2028      	movs	r0, #40	; 0x28
 8001226:	f7ff fec7 	bl	8000fb8 <lcd_send_cmd>
	HAL_Delay(1);
 800122a:	2001      	movs	r0, #1
 800122c:	f001 fb2a 	bl	8002884 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001230:	2008      	movs	r0, #8
 8001232:	f7ff fec1 	bl	8000fb8 <lcd_send_cmd>
	HAL_Delay(1);
 8001236:	2001      	movs	r0, #1
 8001238:	f001 fb24 	bl	8002884 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800123c:	2006      	movs	r0, #6
 800123e:	f7ff febb 	bl	8000fb8 <lcd_send_cmd>
	HAL_Delay(1);
 8001242:	2001      	movs	r0, #1
 8001244:	f001 fb1e 	bl	8002884 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8001248:	2001      	movs	r0, #1
 800124a:	f7ff feb5 	bl	8000fb8 <lcd_send_cmd>
	HAL_Delay(1);
 800124e:	2001      	movs	r0, #1
 8001250:	f001 fb18 	bl	8002884 <HAL_Delay>
	HAL_Delay(1);
 8001254:	2001      	movs	r0, #1
 8001256:	f001 fb15 	bl	8002884 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 800125a:	200c      	movs	r0, #12
 800125c:	f7ff feac 	bl	8000fb8 <lcd_send_cmd>

	loadingScreen();
 8001260:	f7ff ff0e 	bl	8001080 <loadingScreen>
	lcd_send_cmd (0x01);  // clear display
 8001264:	2001      	movs	r0, #1
 8001266:	f7ff fea7 	bl	8000fb8 <lcd_send_cmd>
	HAL_Delay(1);
 800126a:	2001      	movs	r0, #1
 800126c:	f001 fb0a 	bl	8002884 <HAL_Delay>
}
 8001270:	bf00      	nop
 8001272:	bd80      	pop	{r7, pc}

08001274 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 800127c:	e006      	b.n	800128c <lcd_send_string+0x18>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	1c5a      	adds	r2, r3, #1
 8001282:	607a      	str	r2, [r7, #4]
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff fec8 	bl	800101c <lcd_send_data>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d1f4      	bne.n	800127e <lcd_send_string+0xa>
}
 8001294:	bf00      	nop
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}

0800129c <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b088      	sub	sp, #32
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	460b      	mov	r3, r1
 80012a6:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a8:	f107 030c 	add.w	r3, r7, #12
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	605a      	str	r2, [r3, #4]
 80012b2:	609a      	str	r2, [r3, #8]
 80012b4:	60da      	str	r2, [r3, #12]
 80012b6:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80012b8:	887b      	ldrh	r3, [r7, #2]
 80012ba:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012bc:	2301      	movs	r3, #1
 80012be:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80012c0:	2301      	movs	r3, #1
 80012c2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c4:	2300      	movs	r3, #0
 80012c6:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80012c8:	f107 030c 	add.w	r3, r7, #12
 80012cc:	4619      	mov	r1, r3
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f001 fc0c 	bl	8002aec <HAL_GPIO_Init>
}
 80012d4:	bf00      	nop
 80012d6:	3720      	adds	r7, #32
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}

080012dc <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b088      	sub	sp, #32
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	460b      	mov	r3, r1
 80012e6:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e8:	f107 030c 	add.w	r3, r7, #12
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	60da      	str	r2, [r3, #12]
 80012f6:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80012f8:	887b      	ldrh	r3, [r7, #2]
 80012fa:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012fc:	2300      	movs	r3, #0
 80012fe:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001304:	f107 030c 	add.w	r3, r7, #12
 8001308:	4619      	mov	r1, r3
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f001 fbee 	bl	8002aec <HAL_GPIO_Init>
}
 8001310:	bf00      	nop
 8001312:	3720      	adds	r7, #32
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}

08001318 <DS18B20_Start>:



int DS18B20_Start (void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
	int Response = 0;
 800131e:	2300      	movs	r3, #0
 8001320:	607b      	str	r3, [r7, #4]
	Set_Pin_Output(DS18B20_GPIO_Port, DS18B20_Pin);   // set the pin as output
 8001322:	2101      	movs	r1, #1
 8001324:	4814      	ldr	r0, [pc, #80]	; (8001378 <DS18B20_Start+0x60>)
 8001326:	f7ff ffb9 	bl	800129c <Set_Pin_Output>
	HAL_GPIO_WritePin (DS18B20_GPIO_Port, DS18B20_Pin, 0);  // pull the pin low
 800132a:	2200      	movs	r2, #0
 800132c:	2101      	movs	r1, #1
 800132e:	4812      	ldr	r0, [pc, #72]	; (8001378 <DS18B20_Start+0x60>)
 8001330:	f001 fd5e 	bl	8002df0 <HAL_GPIO_WritePin>
	Delay_us (480-8);   // delay according to datasheet
 8001334:	f44f 70ec 	mov.w	r0, #472	; 0x1d8
 8001338:	f7ff fe26 	bl	8000f88 <Delay_us>

	Set_Pin_Input(DS18B20_GPIO_Port, DS18B20_Pin);    // set the pin as input
 800133c:	2101      	movs	r1, #1
 800133e:	480e      	ldr	r0, [pc, #56]	; (8001378 <DS18B20_Start+0x60>)
 8001340:	f7ff ffcc 	bl	80012dc <Set_Pin_Input>
	Delay_us (60);    // delay according to datasheet
 8001344:	203c      	movs	r0, #60	; 0x3c
 8001346:	f7ff fe1f 	bl	8000f88 <Delay_us>

	if (!(HAL_GPIO_ReadPin (DS18B20_GPIO_Port, DS18B20_Pin))) Response = 1;    // if the pin is low i.e the presence pulse is detected
 800134a:	2101      	movs	r1, #1
 800134c:	480a      	ldr	r0, [pc, #40]	; (8001378 <DS18B20_Start+0x60>)
 800134e:	f001 fd37 	bl	8002dc0 <HAL_GPIO_ReadPin>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d102      	bne.n	800135e <DS18B20_Start+0x46>
 8001358:	2301      	movs	r3, #1
 800135a:	607b      	str	r3, [r7, #4]
 800135c:	e002      	b.n	8001364 <DS18B20_Start+0x4c>
	else Response = -1;
 800135e:	f04f 33ff 	mov.w	r3, #4294967295
 8001362:	607b      	str	r3, [r7, #4]

	Delay_us (420); // 480 us delay totally.
 8001364:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8001368:	f7ff fe0e 	bl	8000f88 <Delay_us>

	return Response;
 800136c:	687b      	ldr	r3, [r7, #4]
}
 800136e:	4618      	mov	r0, r3
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	48000400 	.word	0x48000400

0800137c <DS18B20_Write>:

void DS18B20_Write (uint8_t data)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	4603      	mov	r3, r0
 8001384:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(DS18B20_GPIO_Port, DS18B20_Pin);  // set as output
 8001386:	2101      	movs	r1, #1
 8001388:	4821      	ldr	r0, [pc, #132]	; (8001410 <DS18B20_Write+0x94>)
 800138a:	f7ff ff87 	bl	800129c <Set_Pin_Output>

	for (int i=0; i<8; i++)
 800138e:	2300      	movs	r3, #0
 8001390:	60fb      	str	r3, [r7, #12]
 8001392:	e036      	b.n	8001402 <DS18B20_Write+0x86>
	{

		if ((data & (1<<i))!=0)  // if the bit is high
 8001394:	79fa      	ldrb	r2, [r7, #7]
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	fa42 f303 	asr.w	r3, r2, r3
 800139c:	f003 0301 	and.w	r3, r3, #1
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d01b      	beq.n	80013dc <DS18B20_Write+0x60>
		{
			// write 1

			Set_Pin_Output(DS18B20_GPIO_Port, DS18B20_Pin);  // set as output
 80013a4:	2101      	movs	r1, #1
 80013a6:	481a      	ldr	r0, [pc, #104]	; (8001410 <DS18B20_Write+0x94>)
 80013a8:	f7ff ff78 	bl	800129c <Set_Pin_Output>
			HAL_GPIO_WritePin (DS18B20_GPIO_Port, DS18B20_Pin, 0);  // pull the pin LOW
 80013ac:	2200      	movs	r2, #0
 80013ae:	2101      	movs	r1, #1
 80013b0:	4817      	ldr	r0, [pc, #92]	; (8001410 <DS18B20_Write+0x94>)
 80013b2:	f001 fd1d 	bl	8002df0 <HAL_GPIO_WritePin>
			Delay_us (2);  // wait for 1 us
 80013b6:	2002      	movs	r0, #2
 80013b8:	f7ff fde6 	bl	8000f88 <Delay_us>
			HAL_GPIO_WritePin (DS18B20_GPIO_Port, DS18B20_Pin, 1);  // pull the pin LOW
 80013bc:	2201      	movs	r2, #1
 80013be:	2101      	movs	r1, #1
 80013c0:	4813      	ldr	r0, [pc, #76]	; (8001410 <DS18B20_Write+0x94>)
 80013c2:	f001 fd15 	bl	8002df0 <HAL_GPIO_WritePin>
			Delay_us (2);  // wait for 1 us
 80013c6:	2002      	movs	r0, #2
 80013c8:	f7ff fdde 	bl	8000f88 <Delay_us>

			Set_Pin_Input(DS18B20_GPIO_Port, DS18B20_Pin);  // set as input
 80013cc:	2101      	movs	r1, #1
 80013ce:	4810      	ldr	r0, [pc, #64]	; (8001410 <DS18B20_Write+0x94>)
 80013d0:	f7ff ff84 	bl	80012dc <Set_Pin_Input>
			Delay_us (42-8);  // wait for 60 us
 80013d4:	2022      	movs	r0, #34	; 0x22
 80013d6:	f7ff fdd7 	bl	8000f88 <Delay_us>
 80013da:	e00f      	b.n	80013fc <DS18B20_Write+0x80>

		else  // if the bit is low
		{
			// write 0

			Set_Pin_Output(DS18B20_GPIO_Port, DS18B20_Pin);
 80013dc:	2101      	movs	r1, #1
 80013de:	480c      	ldr	r0, [pc, #48]	; (8001410 <DS18B20_Write+0x94>)
 80013e0:	f7ff ff5c 	bl	800129c <Set_Pin_Output>
			HAL_GPIO_WritePin (DS18B20_GPIO_Port, DS18B20_Pin, 0);  // pull the pin LOW
 80013e4:	2200      	movs	r2, #0
 80013e6:	2101      	movs	r1, #1
 80013e8:	4809      	ldr	r0, [pc, #36]	; (8001410 <DS18B20_Write+0x94>)
 80013ea:	f001 fd01 	bl	8002df0 <HAL_GPIO_WritePin>
			Delay_us (60);  // wait for 60 us
 80013ee:	203c      	movs	r0, #60	; 0x3c
 80013f0:	f7ff fdca 	bl	8000f88 <Delay_us>

			Set_Pin_Input(DS18B20_GPIO_Port, DS18B20_Pin);
 80013f4:	2101      	movs	r1, #1
 80013f6:	4806      	ldr	r0, [pc, #24]	; (8001410 <DS18B20_Write+0x94>)
 80013f8:	f7ff ff70 	bl	80012dc <Set_Pin_Input>
	for (int i=0; i<8; i++)
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	3301      	adds	r3, #1
 8001400:	60fb      	str	r3, [r7, #12]
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	2b07      	cmp	r3, #7
 8001406:	ddc5      	ble.n	8001394 <DS18B20_Write+0x18>
		}
	}
}
 8001408:	bf00      	nop
 800140a:	3710      	adds	r7, #16
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	48000400 	.word	0x48000400

08001414 <DS18B20_Read>:

uint8_t DS18B20_Read (void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
	uint8_t value=0;
 800141a:	2300      	movs	r3, #0
 800141c:	71fb      	strb	r3, [r7, #7]

	Set_Pin_Input(DS18B20_GPIO_Port, DS18B20_Pin);
 800141e:	2101      	movs	r1, #1
 8001420:	481a      	ldr	r0, [pc, #104]	; (800148c <DS18B20_Read+0x78>)
 8001422:	f7ff ff5b 	bl	80012dc <Set_Pin_Input>

	for (int i=0;i<8;i++)
 8001426:	2300      	movs	r3, #0
 8001428:	603b      	str	r3, [r7, #0]
 800142a:	e026      	b.n	800147a <DS18B20_Read+0x66>
	{
		Set_Pin_Output(DS18B20_GPIO_Port, DS18B20_Pin);   // set as output
 800142c:	2101      	movs	r1, #1
 800142e:	4817      	ldr	r0, [pc, #92]	; (800148c <DS18B20_Read+0x78>)
 8001430:	f7ff ff34 	bl	800129c <Set_Pin_Output>

		HAL_GPIO_WritePin (DS18B20_GPIO_Port, DS18B20_Pin, 0);  // pull the data pin LOW
 8001434:	2200      	movs	r2, #0
 8001436:	2101      	movs	r1, #1
 8001438:	4814      	ldr	r0, [pc, #80]	; (800148c <DS18B20_Read+0x78>)
 800143a:	f001 fcd9 	bl	8002df0 <HAL_GPIO_WritePin>
		Delay_us (5);  // wait for > 1us
 800143e:	2005      	movs	r0, #5
 8001440:	f7ff fda2 	bl	8000f88 <Delay_us>

		Set_Pin_Input(DS18B20_GPIO_Port, DS18B20_Pin);  // set as input
 8001444:	2101      	movs	r1, #1
 8001446:	4811      	ldr	r0, [pc, #68]	; (800148c <DS18B20_Read+0x78>)
 8001448:	f7ff ff48 	bl	80012dc <Set_Pin_Input>
		if (HAL_GPIO_ReadPin (DS18B20_GPIO_Port, DS18B20_Pin))  // if the pin is HIGH
 800144c:	2101      	movs	r1, #1
 800144e:	480f      	ldr	r0, [pc, #60]	; (800148c <DS18B20_Read+0x78>)
 8001450:	f001 fcb6 	bl	8002dc0 <HAL_GPIO_ReadPin>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d009      	beq.n	800146e <DS18B20_Read+0x5a>
		{
			value |= 1<<i;  // read = 1
 800145a:	2201      	movs	r2, #1
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	fa02 f303 	lsl.w	r3, r2, r3
 8001462:	b25a      	sxtb	r2, r3
 8001464:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001468:	4313      	orrs	r3, r2
 800146a:	b25b      	sxtb	r3, r3
 800146c:	71fb      	strb	r3, [r7, #7]
		}
		else
			value |= 0<<i;  // read = 0
		Delay_us (60-8);  // wait for 60 us
 800146e:	2034      	movs	r0, #52	; 0x34
 8001470:	f7ff fd8a 	bl	8000f88 <Delay_us>
	for (int i=0;i<8;i++)
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	3301      	adds	r3, #1
 8001478:	603b      	str	r3, [r7, #0]
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	2b07      	cmp	r3, #7
 800147e:	ddd5      	ble.n	800142c <DS18B20_Read+0x18>
	}
	return value;
 8001480:	79fb      	ldrb	r3, [r7, #7]
}
 8001482:	4618      	mov	r0, r3
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	48000400 	.word	0x48000400

08001490 <prepareTemperature>:

void prepareTemperature()
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
	DS18B20_Start();
 8001494:	f7ff ff40 	bl	8001318 <DS18B20_Start>
	HAL_Delay(1);
 8001498:	2001      	movs	r0, #1
 800149a:	f001 f9f3 	bl	8002884 <HAL_Delay>
	DS18B20_Write(0xCC);
 800149e:	20cc      	movs	r0, #204	; 0xcc
 80014a0:	f7ff ff6c 	bl	800137c <DS18B20_Write>
	DS18B20_Write(0x44);
 80014a4:	2044      	movs	r0, #68	; 0x44
 80014a6:	f7ff ff69 	bl	800137c <DS18B20_Write>
}
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}
	...

080014b0 <readTemperature>:

void readTemperature()
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
	 HAL_Delay(550);
 80014b4:	f240 2026 	movw	r0, #550	; 0x226
 80014b8:	f001 f9e4 	bl	8002884 <HAL_Delay>
	 DS18B20_Start();
 80014bc:	f7ff ff2c 	bl	8001318 <DS18B20_Start>
	 HAL_Delay(1);
 80014c0:	2001      	movs	r0, #1
 80014c2:	f001 f9df 	bl	8002884 <HAL_Delay>
	 DS18B20_Write(0xCC);
 80014c6:	20cc      	movs	r0, #204	; 0xcc
 80014c8:	f7ff ff58 	bl	800137c <DS18B20_Write>
	 DS18B20_Write(0xBE);
 80014cc:	20be      	movs	r0, #190	; 0xbe
 80014ce:	f7ff ff55 	bl	800137c <DS18B20_Write>

	 Temp_byte1= DS18B20_Read();
 80014d2:	f7ff ff9f 	bl	8001414 <DS18B20_Read>
 80014d6:	4603      	mov	r3, r0
 80014d8:	461a      	mov	r2, r3
 80014da:	4b19      	ldr	r3, [pc, #100]	; (8001540 <readTemperature+0x90>)
 80014dc:	701a      	strb	r2, [r3, #0]
	 Temp_byte2= DS18B20_Read();
 80014de:	f7ff ff99 	bl	8001414 <DS18B20_Read>
 80014e2:	4603      	mov	r3, r0
 80014e4:	461a      	mov	r2, r3
 80014e6:	4b17      	ldr	r3, [pc, #92]	; (8001544 <readTemperature+0x94>)
 80014e8:	701a      	strb	r2, [r3, #0]
	 temperature=(float)((Temp_byte2<<8)|Temp_byte1)/16;
 80014ea:	4b16      	ldr	r3, [pc, #88]	; (8001544 <readTemperature+0x94>)
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	021b      	lsls	r3, r3, #8
 80014f0:	4a13      	ldr	r2, [pc, #76]	; (8001540 <readTemperature+0x90>)
 80014f2:	7812      	ldrb	r2, [r2, #0]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	ee07 3a90 	vmov	s15, r3
 80014fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014fe:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001502:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001506:	4b10      	ldr	r3, [pc, #64]	; (8001548 <readTemperature+0x98>)
 8001508:	edc3 7a00 	vstr	s15, [r3]
	 if(temperature<0.0 || temperature>125.0)
 800150c:	4b0e      	ldr	r3, [pc, #56]	; (8001548 <readTemperature+0x98>)
 800150e:	edd3 7a00 	vldr	s15, [r3]
 8001512:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800151a:	d40a      	bmi.n	8001532 <readTemperature+0x82>
 800151c:	4b0a      	ldr	r3, [pc, #40]	; (8001548 <readTemperature+0x98>)
 800151e:	edd3 7a00 	vldr	s15, [r3]
 8001522:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800154c <readTemperature+0x9c>
 8001526:	eef4 7ac7 	vcmpe.f32	s15, s14
 800152a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800152e:	dc00      	bgt.n	8001532 <readTemperature+0x82>
		 temperature=0.0;
}
 8001530:	e003      	b.n	800153a <readTemperature+0x8a>
		 temperature=0.0;
 8001532:	4b05      	ldr	r3, [pc, #20]	; (8001548 <readTemperature+0x98>)
 8001534:	f04f 0200 	mov.w	r2, #0
 8001538:	601a      	str	r2, [r3, #0]
}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	20000222 	.word	0x20000222
 8001544:	20000223 	.word	0x20000223
 8001548:	20000230 	.word	0x20000230
 800154c:	42fa0000 	.word	0x42fa0000

08001550 <updateScreen>:

void updateScreen()
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80|0x00);
 8001554:	2080      	movs	r0, #128	; 0x80
 8001556:	f7ff fd2f 	bl	8000fb8 <lcd_send_cmd>
	lcd_send_string(firstRowString);
 800155a:	4812      	ldr	r0, [pc, #72]	; (80015a4 <updateScreen+0x54>)
 800155c:	f7ff fe8a 	bl	8001274 <lcd_send_string>
	lcd_send_cmd (0x80|0x0E);
 8001560:	208e      	movs	r0, #142	; 0x8e
 8001562:	f7ff fd29 	bl	8000fb8 <lcd_send_cmd>
	if(working)
 8001566:	4b10      	ldr	r3, [pc, #64]	; (80015a8 <updateScreen+0x58>)
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d003      	beq.n	8001576 <updateScreen+0x26>
		lcd_send_string("P:ON  ");
 800156e:	480f      	ldr	r0, [pc, #60]	; (80015ac <updateScreen+0x5c>)
 8001570:	f7ff fe80 	bl	8001274 <lcd_send_string>
 8001574:	e002      	b.n	800157c <updateScreen+0x2c>
	else
		lcd_send_string("P:OFF ");
 8001576:	480e      	ldr	r0, [pc, #56]	; (80015b0 <updateScreen+0x60>)
 8001578:	f7ff fe7c 	bl	8001274 <lcd_send_string>
 	lcd_send_cmd (0x80|0x40);
 800157c:	20c0      	movs	r0, #192	; 0xc0
 800157e:	f7ff fd1b 	bl	8000fb8 <lcd_send_cmd>
 	lcd_send_string(secondRowString);
 8001582:	480c      	ldr	r0, [pc, #48]	; (80015b4 <updateScreen+0x64>)
 8001584:	f7ff fe76 	bl	8001274 <lcd_send_string>
 	lcd_send_cmd (0x80|0x14);
 8001588:	2094      	movs	r0, #148	; 0x94
 800158a:	f7ff fd15 	bl	8000fb8 <lcd_send_cmd>
 	lcd_send_string(thirdRowString);
 800158e:	480a      	ldr	r0, [pc, #40]	; (80015b8 <updateScreen+0x68>)
 8001590:	f7ff fe70 	bl	8001274 <lcd_send_string>
 	lcd_send_cmd (0x80|0x54);
 8001594:	20d4      	movs	r0, #212	; 0xd4
 8001596:	f7ff fd0f 	bl	8000fb8 <lcd_send_cmd>
 	lcd_send_string(fourthRowString);
 800159a:	4808      	ldr	r0, [pc, #32]	; (80015bc <updateScreen+0x6c>)
 800159c:	f7ff fe6a 	bl	8001274 <lcd_send_string>
}
 80015a0:	bf00      	nop
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	200002b4 	.word	0x200002b4
 80015a8:	20000227 	.word	0x20000227
 80015ac:	080095f0 	.word	0x080095f0
 80015b0:	080095f8 	.word	0x080095f8
 80015b4:	200002a0 	.word	0x200002a0
 80015b8:	200003c8 	.word	0x200003c8
 80015bc:	200003dc 	.word	0x200003dc

080015c0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
	if(htim==&htim2)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	4a09      	ldr	r2, [pc, #36]	; (80015f0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d109      	bne.n	80015e4 <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		timePassed+=0.5;
 80015d0:	4b08      	ldr	r3, [pc, #32]	; (80015f4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80015d2:	edd3 7a00 	vldr	s15, [r3]
 80015d6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80015da:	ee77 7a87 	vadd.f32	s15, s15, s14
 80015de:	4b05      	ldr	r3, [pc, #20]	; (80015f4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80015e0:	edc3 7a00 	vstr	s15, [r3]
	}
}
 80015e4:	bf00      	nop
 80015e6:	370c      	adds	r7, #12
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr
 80015f0:	20000308 	.word	0x20000308
 80015f4:	2000022c 	.word	0x2000022c

080015f8 <checkKeyboard>:

void checkKeyboard()
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
	if(buttonPressed)
 80015fc:	4ba8      	ldr	r3, [pc, #672]	; (80018a0 <checkKeyboard+0x2a8>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	b2db      	uxtb	r3, r3
 8001602:	2b00      	cmp	r3, #0
 8001604:	f000 8208 	beq.w	8001a18 <checkKeyboard+0x420>
	{
		if(selPressed)
 8001608:	4ba6      	ldr	r3, [pc, #664]	; (80018a4 <checkKeyboard+0x2ac>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	b2db      	uxtb	r3, r3
 800160e:	2b00      	cmp	r3, #0
 8001610:	d023      	beq.n	800165a <checkKeyboard+0x62>
		{
			editionEnabled = !editionEnabled;
 8001612:	4ba5      	ldr	r3, [pc, #660]	; (80018a8 <checkKeyboard+0x2b0>)
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	2b00      	cmp	r3, #0
 8001618:	bf14      	ite	ne
 800161a:	2301      	movne	r3, #1
 800161c:	2300      	moveq	r3, #0
 800161e:	b2db      	uxtb	r3, r3
 8001620:	f083 0301 	eor.w	r3, r3, #1
 8001624:	b2db      	uxtb	r3, r3
 8001626:	f003 0301 	and.w	r3, r3, #1
 800162a:	b2da      	uxtb	r2, r3
 800162c:	4b9e      	ldr	r3, [pc, #632]	; (80018a8 <checkKeyboard+0x2b0>)
 800162e:	701a      	strb	r2, [r3, #0]
			if(!editionEnabled)
 8001630:	4b9d      	ldr	r3, [pc, #628]	; (80018a8 <checkKeyboard+0x2b0>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	f083 0301 	eor.w	r3, r3, #1
 8001638:	b2db      	uxtb	r3, r3
 800163a:	2b00      	cmp	r3, #0
 800163c:	d002      	beq.n	8001644 <checkKeyboard+0x4c>
				editionEnd=1;
 800163e:	4b9b      	ldr	r3, [pc, #620]	; (80018ac <checkKeyboard+0x2b4>)
 8001640:	2201      	movs	r2, #1
 8001642:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(LED_GPIO_Port,LED_Pin,editionEnabled);
 8001644:	4b98      	ldr	r3, [pc, #608]	; (80018a8 <checkKeyboard+0x2b0>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	461a      	mov	r2, r3
 800164a:	2108      	movs	r1, #8
 800164c:	4898      	ldr	r0, [pc, #608]	; (80018b0 <checkKeyboard+0x2b8>)
 800164e:	f001 fbcf 	bl	8002df0 <HAL_GPIO_WritePin>
			selPressed=0;
 8001652:	4b94      	ldr	r3, [pc, #592]	; (80018a4 <checkKeyboard+0x2ac>)
 8001654:	2200      	movs	r2, #0
 8001656:	701a      	strb	r2, [r3, #0]
 8001658:	e1d8      	b.n	8001a0c <checkKeyboard+0x414>
		}
		else if(editionEnabled)
 800165a:	4b93      	ldr	r3, [pc, #588]	; (80018a8 <checkKeyboard+0x2b0>)
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	2b00      	cmp	r3, #0
 8001660:	f000 81d4 	beq.w	8001a0c <checkKeyboard+0x414>
		{
				if (decPressed)
 8001664:	4b93      	ldr	r3, [pc, #588]	; (80018b4 <checkKeyboard+0x2bc>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	b2db      	uxtb	r3, r3
 800166a:	2b00      	cmp	r3, #0
 800166c:	d022      	beq.n	80016b4 <checkKeyboard+0xbc>
				{
					if(modeNew==0)
 800166e:	4b92      	ldr	r3, [pc, #584]	; (80018b8 <checkKeyboard+0x2c0>)
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d10d      	bne.n	8001692 <checkKeyboard+0x9a>
					{
						currentRow++;
 8001676:	4b91      	ldr	r3, [pc, #580]	; (80018bc <checkKeyboard+0x2c4>)
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	3301      	adds	r3, #1
 800167c:	b2da      	uxtb	r2, r3
 800167e:	4b8f      	ldr	r3, [pc, #572]	; (80018bc <checkKeyboard+0x2c4>)
 8001680:	701a      	strb	r2, [r3, #0]
						if(currentRow>2)
 8001682:	4b8e      	ldr	r3, [pc, #568]	; (80018bc <checkKeyboard+0x2c4>)
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	2b02      	cmp	r3, #2
 8001688:	d910      	bls.n	80016ac <checkKeyboard+0xb4>
							currentRow=1;
 800168a:	4b8c      	ldr	r3, [pc, #560]	; (80018bc <checkKeyboard+0x2c4>)
 800168c:	2201      	movs	r2, #1
 800168e:	701a      	strb	r2, [r3, #0]
 8001690:	e00c      	b.n	80016ac <checkKeyboard+0xb4>

					}
					else
					{
						currentRow++;
 8001692:	4b8a      	ldr	r3, [pc, #552]	; (80018bc <checkKeyboard+0x2c4>)
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	3301      	adds	r3, #1
 8001698:	b2da      	uxtb	r2, r3
 800169a:	4b88      	ldr	r3, [pc, #544]	; (80018bc <checkKeyboard+0x2c4>)
 800169c:	701a      	strb	r2, [r3, #0]
						if(currentRow>3)
 800169e:	4b87      	ldr	r3, [pc, #540]	; (80018bc <checkKeyboard+0x2c4>)
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	2b03      	cmp	r3, #3
 80016a4:	d902      	bls.n	80016ac <checkKeyboard+0xb4>
							currentRow=1;
 80016a6:	4b85      	ldr	r3, [pc, #532]	; (80018bc <checkKeyboard+0x2c4>)
 80016a8:	2201      	movs	r2, #1
 80016aa:	701a      	strb	r2, [r3, #0]
					}
					decPressed=0;
 80016ac:	4b81      	ldr	r3, [pc, #516]	; (80018b4 <checkKeyboard+0x2bc>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	701a      	strb	r2, [r3, #0]
 80016b2:	e1ab      	b.n	8001a0c <checkKeyboard+0x414>

				}
				else if (incPressed)
 80016b4:	4b82      	ldr	r3, [pc, #520]	; (80018c0 <checkKeyboard+0x2c8>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d022      	beq.n	8001704 <checkKeyboard+0x10c>
				{
					if(modeNew==0)
 80016be:	4b7e      	ldr	r3, [pc, #504]	; (80018b8 <checkKeyboard+0x2c0>)
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d10d      	bne.n	80016e2 <checkKeyboard+0xea>
					{
						currentRow--;
 80016c6:	4b7d      	ldr	r3, [pc, #500]	; (80018bc <checkKeyboard+0x2c4>)
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	3b01      	subs	r3, #1
 80016cc:	b2da      	uxtb	r2, r3
 80016ce:	4b7b      	ldr	r3, [pc, #492]	; (80018bc <checkKeyboard+0x2c4>)
 80016d0:	701a      	strb	r2, [r3, #0]
						if(currentRow<1)
 80016d2:	4b7a      	ldr	r3, [pc, #488]	; (80018bc <checkKeyboard+0x2c4>)
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d110      	bne.n	80016fc <checkKeyboard+0x104>
							currentRow=2;
 80016da:	4b78      	ldr	r3, [pc, #480]	; (80018bc <checkKeyboard+0x2c4>)
 80016dc:	2202      	movs	r2, #2
 80016de:	701a      	strb	r2, [r3, #0]
 80016e0:	e00c      	b.n	80016fc <checkKeyboard+0x104>
					}
					else
					{
						currentRow--;
 80016e2:	4b76      	ldr	r3, [pc, #472]	; (80018bc <checkKeyboard+0x2c4>)
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	3b01      	subs	r3, #1
 80016e8:	b2da      	uxtb	r2, r3
 80016ea:	4b74      	ldr	r3, [pc, #464]	; (80018bc <checkKeyboard+0x2c4>)
 80016ec:	701a      	strb	r2, [r3, #0]
						if(currentRow<1)
 80016ee:	4b73      	ldr	r3, [pc, #460]	; (80018bc <checkKeyboard+0x2c4>)
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d102      	bne.n	80016fc <checkKeyboard+0x104>
							currentRow=3;
 80016f6:	4b71      	ldr	r3, [pc, #452]	; (80018bc <checkKeyboard+0x2c4>)
 80016f8:	2203      	movs	r2, #3
 80016fa:	701a      	strb	r2, [r3, #0]
					}
					incPressed=0;
 80016fc:	4b70      	ldr	r3, [pc, #448]	; (80018c0 <checkKeyboard+0x2c8>)
 80016fe:	2200      	movs	r2, #0
 8001700:	701a      	strb	r2, [r3, #0]
 8001702:	e183      	b.n	8001a0c <checkKeyboard+0x414>
				}
				else if (beforePressed)
 8001704:	4b6f      	ldr	r3, [pc, #444]	; (80018c4 <checkKeyboard+0x2cc>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	b2db      	uxtb	r3, r3
 800170a:	2b00      	cmp	r3, #0
 800170c:	f000 80ac 	beq.w	8001868 <checkKeyboard+0x270>
				{
					switch(modeNew)
 8001710:	4b69      	ldr	r3, [pc, #420]	; (80018b8 <checkKeyboard+0x2c0>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	2b01      	cmp	r3, #1
 8001716:	d020      	beq.n	800175a <checkKeyboard+0x162>
 8001718:	2b02      	cmp	r3, #2
 800171a:	d05f      	beq.n	80017dc <checkKeyboard+0x1e4>
 800171c:	2b00      	cmp	r3, #0
 800171e:	f040 809f 	bne.w	8001860 <checkKeyboard+0x268>
					{
						case 0:
							switch(currentRow)
 8001722:	4b66      	ldr	r3, [pc, #408]	; (80018bc <checkKeyboard+0x2c4>)
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	2b01      	cmp	r3, #1
 8001728:	d002      	beq.n	8001730 <checkKeyboard+0x138>
 800172a:	2b02      	cmp	r3, #2
 800172c:	d004      	beq.n	8001738 <checkKeyboard+0x140>
								break;
							case 2:
								manualNew=!manualNew;
								break;
							}
							break;
 800172e:	e097      	b.n	8001860 <checkKeyboard+0x268>
								modeNew=2;
 8001730:	4b61      	ldr	r3, [pc, #388]	; (80018b8 <checkKeyboard+0x2c0>)
 8001732:	2202      	movs	r2, #2
 8001734:	701a      	strb	r2, [r3, #0]
								break;
 8001736:	e00f      	b.n	8001758 <checkKeyboard+0x160>
								manualNew=!manualNew;
 8001738:	4b63      	ldr	r3, [pc, #396]	; (80018c8 <checkKeyboard+0x2d0>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	2b00      	cmp	r3, #0
 800173e:	bf14      	ite	ne
 8001740:	2301      	movne	r3, #1
 8001742:	2300      	moveq	r3, #0
 8001744:	b2db      	uxtb	r3, r3
 8001746:	f083 0301 	eor.w	r3, r3, #1
 800174a:	b2db      	uxtb	r3, r3
 800174c:	f003 0301 	and.w	r3, r3, #1
 8001750:	b2da      	uxtb	r2, r3
 8001752:	4b5d      	ldr	r3, [pc, #372]	; (80018c8 <checkKeyboard+0x2d0>)
 8001754:	701a      	strb	r2, [r3, #0]
								break;
 8001756:	bf00      	nop
							break;
 8001758:	e082      	b.n	8001860 <checkKeyboard+0x268>
						case 1:
							switch(currentRow)
 800175a:	4b58      	ldr	r3, [pc, #352]	; (80018bc <checkKeyboard+0x2c4>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	2b02      	cmp	r3, #2
 8001760:	d008      	beq.n	8001774 <checkKeyboard+0x17c>
 8001762:	2b03      	cmp	r3, #3
 8001764:	d01f      	beq.n	80017a6 <checkKeyboard+0x1ae>
 8001766:	2b01      	cmp	r3, #1
 8001768:	d000      	beq.n	800176c <checkKeyboard+0x174>
									hysteresisNew-=0.5;
									if(hysteresisNew<0.5)
										hysteresisNew=0.5;
									break;
							}
							break;
 800176a:	e079      	b.n	8001860 <checkKeyboard+0x268>
									modeNew=0;
 800176c:	4b52      	ldr	r3, [pc, #328]	; (80018b8 <checkKeyboard+0x2c0>)
 800176e:	2200      	movs	r2, #0
 8001770:	701a      	strb	r2, [r3, #0]
									break;
 8001772:	e032      	b.n	80017da <checkKeyboard+0x1e2>
									workingTemperatureNew-=0.5;
 8001774:	4b55      	ldr	r3, [pc, #340]	; (80018cc <checkKeyboard+0x2d4>)
 8001776:	edd3 7a00 	vldr	s15, [r3]
 800177a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800177e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001782:	4b52      	ldr	r3, [pc, #328]	; (80018cc <checkKeyboard+0x2d4>)
 8001784:	edc3 7a00 	vstr	s15, [r3]
									if(workingTemperatureNew<5.0)
 8001788:	4b50      	ldr	r3, [pc, #320]	; (80018cc <checkKeyboard+0x2d4>)
 800178a:	edd3 7a00 	vldr	s15, [r3]
 800178e:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001792:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800179a:	d400      	bmi.n	800179e <checkKeyboard+0x1a6>
									break;
 800179c:	e01d      	b.n	80017da <checkKeyboard+0x1e2>
										workingTemperatureNew=5.0;
 800179e:	4b4b      	ldr	r3, [pc, #300]	; (80018cc <checkKeyboard+0x2d4>)
 80017a0:	4a4b      	ldr	r2, [pc, #300]	; (80018d0 <checkKeyboard+0x2d8>)
 80017a2:	601a      	str	r2, [r3, #0]
									break;
 80017a4:	e019      	b.n	80017da <checkKeyboard+0x1e2>
									hysteresisNew-=0.5;
 80017a6:	4b4b      	ldr	r3, [pc, #300]	; (80018d4 <checkKeyboard+0x2dc>)
 80017a8:	edd3 7a00 	vldr	s15, [r3]
 80017ac:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80017b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80017b4:	4b47      	ldr	r3, [pc, #284]	; (80018d4 <checkKeyboard+0x2dc>)
 80017b6:	edc3 7a00 	vstr	s15, [r3]
									if(hysteresisNew<0.5)
 80017ba:	4b46      	ldr	r3, [pc, #280]	; (80018d4 <checkKeyboard+0x2dc>)
 80017bc:	edd3 7a00 	vldr	s15, [r3]
 80017c0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80017c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017cc:	d400      	bmi.n	80017d0 <checkKeyboard+0x1d8>
									break;
 80017ce:	e003      	b.n	80017d8 <checkKeyboard+0x1e0>
										hysteresisNew=0.5;
 80017d0:	4b40      	ldr	r3, [pc, #256]	; (80018d4 <checkKeyboard+0x2dc>)
 80017d2:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80017d6:	601a      	str	r2, [r3, #0]
									break;
 80017d8:	bf00      	nop
							break;
 80017da:	e041      	b.n	8001860 <checkKeyboard+0x268>
						case 2:
							switch(currentRow)
 80017dc:	4b37      	ldr	r3, [pc, #220]	; (80018bc <checkKeyboard+0x2c4>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d008      	beq.n	80017f6 <checkKeyboard+0x1fe>
 80017e4:	2b03      	cmp	r3, #3
 80017e6:	d020      	beq.n	800182a <checkKeyboard+0x232>
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d000      	beq.n	80017ee <checkKeyboard+0x1f6>
								restingTimeNew-=0.5;
								if(restingTimeNew<0.5)
									restingTimeNew=0.5;
								break;
							}
							break;
 80017ec:	e037      	b.n	800185e <checkKeyboard+0x266>
								modeNew=1;
 80017ee:	4b32      	ldr	r3, [pc, #200]	; (80018b8 <checkKeyboard+0x2c0>)
 80017f0:	2201      	movs	r2, #1
 80017f2:	701a      	strb	r2, [r3, #0]
								break;
 80017f4:	e033      	b.n	800185e <checkKeyboard+0x266>
								workingTimeNew-=0.5;
 80017f6:	4b38      	ldr	r3, [pc, #224]	; (80018d8 <checkKeyboard+0x2e0>)
 80017f8:	edd3 7a00 	vldr	s15, [r3]
 80017fc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001800:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001804:	4b34      	ldr	r3, [pc, #208]	; (80018d8 <checkKeyboard+0x2e0>)
 8001806:	edc3 7a00 	vstr	s15, [r3]
								if(workingTimeNew<0.5)
 800180a:	4b33      	ldr	r3, [pc, #204]	; (80018d8 <checkKeyboard+0x2e0>)
 800180c:	edd3 7a00 	vldr	s15, [r3]
 8001810:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001814:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800181c:	d400      	bmi.n	8001820 <checkKeyboard+0x228>
								break;
 800181e:	e01e      	b.n	800185e <checkKeyboard+0x266>
									workingTimeNew=0.5;
 8001820:	4b2d      	ldr	r3, [pc, #180]	; (80018d8 <checkKeyboard+0x2e0>)
 8001822:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8001826:	601a      	str	r2, [r3, #0]
								break;
 8001828:	e019      	b.n	800185e <checkKeyboard+0x266>
								restingTimeNew-=0.5;
 800182a:	4b2c      	ldr	r3, [pc, #176]	; (80018dc <checkKeyboard+0x2e4>)
 800182c:	edd3 7a00 	vldr	s15, [r3]
 8001830:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001834:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001838:	4b28      	ldr	r3, [pc, #160]	; (80018dc <checkKeyboard+0x2e4>)
 800183a:	edc3 7a00 	vstr	s15, [r3]
								if(restingTimeNew<0.5)
 800183e:	4b27      	ldr	r3, [pc, #156]	; (80018dc <checkKeyboard+0x2e4>)
 8001840:	edd3 7a00 	vldr	s15, [r3]
 8001844:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001848:	eef4 7ac7 	vcmpe.f32	s15, s14
 800184c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001850:	d400      	bmi.n	8001854 <checkKeyboard+0x25c>
								break;
 8001852:	e003      	b.n	800185c <checkKeyboard+0x264>
									restingTimeNew=0.5;
 8001854:	4b21      	ldr	r3, [pc, #132]	; (80018dc <checkKeyboard+0x2e4>)
 8001856:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800185a:	601a      	str	r2, [r3, #0]
								break;
 800185c:	bf00      	nop
							break;
 800185e:	bf00      	nop
					}
					beforePressed=0;
 8001860:	4b18      	ldr	r3, [pc, #96]	; (80018c4 <checkKeyboard+0x2cc>)
 8001862:	2200      	movs	r2, #0
 8001864:	701a      	strb	r2, [r3, #0]
 8001866:	e0d1      	b.n	8001a0c <checkKeyboard+0x414>
				}
				else if (nextPressed)
 8001868:	4b1d      	ldr	r3, [pc, #116]	; (80018e0 <checkKeyboard+0x2e8>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	b2db      	uxtb	r3, r3
 800186e:	2b00      	cmp	r3, #0
 8001870:	f000 80cc 	beq.w	8001a0c <checkKeyboard+0x414>
				{
					switch(modeNew)
 8001874:	4b10      	ldr	r3, [pc, #64]	; (80018b8 <checkKeyboard+0x2c0>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	2b01      	cmp	r3, #1
 800187a:	d044      	beq.n	8001906 <checkKeyboard+0x30e>
 800187c:	2b02      	cmp	r3, #2
 800187e:	f000 8082 	beq.w	8001986 <checkKeyboard+0x38e>
 8001882:	2b00      	cmp	r3, #0
 8001884:	f040 80bf 	bne.w	8001a06 <checkKeyboard+0x40e>
							{
								case 0:
								switch(currentRow)
 8001888:	4b0c      	ldr	r3, [pc, #48]	; (80018bc <checkKeyboard+0x2c4>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	2b01      	cmp	r3, #1
 800188e:	d002      	beq.n	8001896 <checkKeyboard+0x29e>
 8001890:	2b02      	cmp	r3, #2
 8001892:	d027      	beq.n	80018e4 <checkKeyboard+0x2ec>
									break;
								case 2:
									manualNew=!manualNew;
									break;
								}
								break;
 8001894:	e0b7      	b.n	8001a06 <checkKeyboard+0x40e>
									modeNew=1;
 8001896:	4b08      	ldr	r3, [pc, #32]	; (80018b8 <checkKeyboard+0x2c0>)
 8001898:	2201      	movs	r2, #1
 800189a:	701a      	strb	r2, [r3, #0]
									break;
 800189c:	e032      	b.n	8001904 <checkKeyboard+0x30c>
 800189e:	bf00      	nop
 80018a0:	2000021c 	.word	0x2000021c
 80018a4:	2000021d 	.word	0x2000021d
 80018a8:	20000224 	.word	0x20000224
 80018ac:	20000225 	.word	0x20000225
 80018b0:	48000400 	.word	0x48000400
 80018b4:	2000021f 	.word	0x2000021f
 80018b8:	20000229 	.word	0x20000229
 80018bc:	20000000 	.word	0x20000000
 80018c0:	2000021e 	.word	0x2000021e
 80018c4:	20000221 	.word	0x20000221
 80018c8:	20000234 	.word	0x20000234
 80018cc:	2000001c 	.word	0x2000001c
 80018d0:	40a00000 	.word	0x40a00000
 80018d4:	20000020 	.word	0x20000020
 80018d8:	20000014 	.word	0x20000014
 80018dc:	20000018 	.word	0x20000018
 80018e0:	20000220 	.word	0x20000220
									manualNew=!manualNew;
 80018e4:	4b4d      	ldr	r3, [pc, #308]	; (8001a1c <checkKeyboard+0x424>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	bf14      	ite	ne
 80018ec:	2301      	movne	r3, #1
 80018ee:	2300      	moveq	r3, #0
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	f083 0301 	eor.w	r3, r3, #1
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	f003 0301 	and.w	r3, r3, #1
 80018fc:	b2da      	uxtb	r2, r3
 80018fe:	4b47      	ldr	r3, [pc, #284]	; (8001a1c <checkKeyboard+0x424>)
 8001900:	701a      	strb	r2, [r3, #0]
									break;
 8001902:	bf00      	nop
								break;
 8001904:	e07f      	b.n	8001a06 <checkKeyboard+0x40e>
								case 1:
									switch(currentRow)
 8001906:	4b46      	ldr	r3, [pc, #280]	; (8001a20 <checkKeyboard+0x428>)
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	2b02      	cmp	r3, #2
 800190c:	d008      	beq.n	8001920 <checkKeyboard+0x328>
 800190e:	2b03      	cmp	r3, #3
 8001910:	d01f      	beq.n	8001952 <checkKeyboard+0x35a>
 8001912:	2b01      	cmp	r3, #1
 8001914:	d000      	beq.n	8001918 <checkKeyboard+0x320>
											hysteresisNew+=0.5;
											if(hysteresisNew>30.0)
												hysteresisNew=30.0;
											break;
									}
									break;
 8001916:	e076      	b.n	8001a06 <checkKeyboard+0x40e>
											modeNew=2;
 8001918:	4b42      	ldr	r3, [pc, #264]	; (8001a24 <checkKeyboard+0x42c>)
 800191a:	2202      	movs	r2, #2
 800191c:	701a      	strb	r2, [r3, #0]
											break;
 800191e:	e031      	b.n	8001984 <checkKeyboard+0x38c>
											workingTemperatureNew+=0.5;
 8001920:	4b41      	ldr	r3, [pc, #260]	; (8001a28 <checkKeyboard+0x430>)
 8001922:	edd3 7a00 	vldr	s15, [r3]
 8001926:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800192a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800192e:	4b3e      	ldr	r3, [pc, #248]	; (8001a28 <checkKeyboard+0x430>)
 8001930:	edc3 7a00 	vstr	s15, [r3]
											if(workingTemperatureNew>80.0)
 8001934:	4b3c      	ldr	r3, [pc, #240]	; (8001a28 <checkKeyboard+0x430>)
 8001936:	edd3 7a00 	vldr	s15, [r3]
 800193a:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8001a2c <checkKeyboard+0x434>
 800193e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001946:	dc00      	bgt.n	800194a <checkKeyboard+0x352>
											break;
 8001948:	e01c      	b.n	8001984 <checkKeyboard+0x38c>
												workingTemperatureNew=80.0;
 800194a:	4b37      	ldr	r3, [pc, #220]	; (8001a28 <checkKeyboard+0x430>)
 800194c:	4a38      	ldr	r2, [pc, #224]	; (8001a30 <checkKeyboard+0x438>)
 800194e:	601a      	str	r2, [r3, #0]
											break;
 8001950:	e018      	b.n	8001984 <checkKeyboard+0x38c>
											hysteresisNew+=0.5;
 8001952:	4b38      	ldr	r3, [pc, #224]	; (8001a34 <checkKeyboard+0x43c>)
 8001954:	edd3 7a00 	vldr	s15, [r3]
 8001958:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800195c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001960:	4b34      	ldr	r3, [pc, #208]	; (8001a34 <checkKeyboard+0x43c>)
 8001962:	edc3 7a00 	vstr	s15, [r3]
											if(hysteresisNew>30.0)
 8001966:	4b33      	ldr	r3, [pc, #204]	; (8001a34 <checkKeyboard+0x43c>)
 8001968:	edd3 7a00 	vldr	s15, [r3]
 800196c:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001970:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001978:	dc00      	bgt.n	800197c <checkKeyboard+0x384>
											break;
 800197a:	e002      	b.n	8001982 <checkKeyboard+0x38a>
												hysteresisNew=30.0;
 800197c:	4b2d      	ldr	r3, [pc, #180]	; (8001a34 <checkKeyboard+0x43c>)
 800197e:	4a2e      	ldr	r2, [pc, #184]	; (8001a38 <checkKeyboard+0x440>)
 8001980:	601a      	str	r2, [r3, #0]
											break;
 8001982:	bf00      	nop
									break;
 8001984:	e03f      	b.n	8001a06 <checkKeyboard+0x40e>
								case 2:
									switch(currentRow)
 8001986:	4b26      	ldr	r3, [pc, #152]	; (8001a20 <checkKeyboard+0x428>)
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	2b02      	cmp	r3, #2
 800198c:	d008      	beq.n	80019a0 <checkKeyboard+0x3a8>
 800198e:	2b03      	cmp	r3, #3
 8001990:	d01f      	beq.n	80019d2 <checkKeyboard+0x3da>
 8001992:	2b01      	cmp	r3, #1
 8001994:	d000      	beq.n	8001998 <checkKeyboard+0x3a0>
										restingTimeNew+=0.5;
										if(restingTimeNew>60.0)
											restingTimeNew=60.0;
										break;
									}
									break;
 8001996:	e035      	b.n	8001a04 <checkKeyboard+0x40c>
										modeNew=0;
 8001998:	4b22      	ldr	r3, [pc, #136]	; (8001a24 <checkKeyboard+0x42c>)
 800199a:	2200      	movs	r2, #0
 800199c:	701a      	strb	r2, [r3, #0]
										break;
 800199e:	e031      	b.n	8001a04 <checkKeyboard+0x40c>
										workingTimeNew+=0.5;
 80019a0:	4b26      	ldr	r3, [pc, #152]	; (8001a3c <checkKeyboard+0x444>)
 80019a2:	edd3 7a00 	vldr	s15, [r3]
 80019a6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80019aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80019ae:	4b23      	ldr	r3, [pc, #140]	; (8001a3c <checkKeyboard+0x444>)
 80019b0:	edc3 7a00 	vstr	s15, [r3]
										if(workingTimeNew>60.0)
 80019b4:	4b21      	ldr	r3, [pc, #132]	; (8001a3c <checkKeyboard+0x444>)
 80019b6:	edd3 7a00 	vldr	s15, [r3]
 80019ba:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001a40 <checkKeyboard+0x448>
 80019be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019c6:	dc00      	bgt.n	80019ca <checkKeyboard+0x3d2>
										break;
 80019c8:	e01c      	b.n	8001a04 <checkKeyboard+0x40c>
											workingTimeNew=60.0;
 80019ca:	4b1c      	ldr	r3, [pc, #112]	; (8001a3c <checkKeyboard+0x444>)
 80019cc:	4a1d      	ldr	r2, [pc, #116]	; (8001a44 <checkKeyboard+0x44c>)
 80019ce:	601a      	str	r2, [r3, #0]
										break;
 80019d0:	e018      	b.n	8001a04 <checkKeyboard+0x40c>
										restingTimeNew+=0.5;
 80019d2:	4b1d      	ldr	r3, [pc, #116]	; (8001a48 <checkKeyboard+0x450>)
 80019d4:	edd3 7a00 	vldr	s15, [r3]
 80019d8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80019dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80019e0:	4b19      	ldr	r3, [pc, #100]	; (8001a48 <checkKeyboard+0x450>)
 80019e2:	edc3 7a00 	vstr	s15, [r3]
										if(restingTimeNew>60.0)
 80019e6:	4b18      	ldr	r3, [pc, #96]	; (8001a48 <checkKeyboard+0x450>)
 80019e8:	edd3 7a00 	vldr	s15, [r3]
 80019ec:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001a40 <checkKeyboard+0x448>
 80019f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019f8:	dc00      	bgt.n	80019fc <checkKeyboard+0x404>
										break;
 80019fa:	e002      	b.n	8001a02 <checkKeyboard+0x40a>
											restingTimeNew=60.0;
 80019fc:	4b12      	ldr	r3, [pc, #72]	; (8001a48 <checkKeyboard+0x450>)
 80019fe:	4a11      	ldr	r2, [pc, #68]	; (8001a44 <checkKeyboard+0x44c>)
 8001a00:	601a      	str	r2, [r3, #0]
										break;
 8001a02:	bf00      	nop
									break;
 8001a04:	bf00      	nop
							}
					nextPressed=0;
 8001a06:	4b11      	ldr	r3, [pc, #68]	; (8001a4c <checkKeyboard+0x454>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	701a      	strb	r2, [r3, #0]
				}
		}
		HAL_Delay(150);
 8001a0c:	2096      	movs	r0, #150	; 0x96
 8001a0e:	f000 ff39 	bl	8002884 <HAL_Delay>
		buttonPressed=0;
 8001a12:	4b0f      	ldr	r3, [pc, #60]	; (8001a50 <checkKeyboard+0x458>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	701a      	strb	r2, [r3, #0]
	}
}
 8001a18:	bf00      	nop
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	20000234 	.word	0x20000234
 8001a20:	20000000 	.word	0x20000000
 8001a24:	20000229 	.word	0x20000229
 8001a28:	2000001c 	.word	0x2000001c
 8001a2c:	42a00000 	.word	0x42a00000
 8001a30:	42a00000 	.word	0x42a00000
 8001a34:	20000020 	.word	0x20000020
 8001a38:	41f00000 	.word	0x41f00000
 8001a3c:	20000014 	.word	0x20000014
 8001a40:	42700000 	.word	0x42700000
 8001a44:	42700000 	.word	0x42700000
 8001a48:	20000018 	.word	0x20000018
 8001a4c:	20000220 	.word	0x20000220
 8001a50:	2000021c 	.word	0x2000021c

08001a54 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	80fb      	strh	r3, [r7, #6]
	if(!buttonPressed)
 8001a5e:	4b19      	ldr	r3, [pc, #100]	; (8001ac4 <HAL_GPIO_EXTI_Callback+0x70>)
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	f083 0301 	eor.w	r3, r3, #1
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d024      	beq.n	8001ab8 <HAL_GPIO_EXTI_Callback+0x64>
	{
		buttonPressed=1;
 8001a6e:	4b15      	ldr	r3, [pc, #84]	; (8001ac4 <HAL_GPIO_EXTI_Callback+0x70>)
 8001a70:	2201      	movs	r2, #1
 8001a72:	701a      	strb	r2, [r3, #0]
		if(GPIO_Pin==SEL_Pin)
 8001a74:	88fb      	ldrh	r3, [r7, #6]
 8001a76:	2b40      	cmp	r3, #64	; 0x40
 8001a78:	d103      	bne.n	8001a82 <HAL_GPIO_EXTI_Callback+0x2e>
		{
			selPressed=1;
 8001a7a:	4b13      	ldr	r3, [pc, #76]	; (8001ac8 <HAL_GPIO_EXTI_Callback+0x74>)
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	701a      	strb	r2, [r3, #0]
		else if (GPIO_Pin==NEXT_Pin)
		{
			nextPressed=1;
		}
	}
}
 8001a80:	e01a      	b.n	8001ab8 <HAL_GPIO_EXTI_Callback+0x64>
		else if(GPIO_Pin==DEC_Pin)
 8001a82:	88fb      	ldrh	r3, [r7, #6]
 8001a84:	2b20      	cmp	r3, #32
 8001a86:	d103      	bne.n	8001a90 <HAL_GPIO_EXTI_Callback+0x3c>
			decPressed=1;
 8001a88:	4b10      	ldr	r3, [pc, #64]	; (8001acc <HAL_GPIO_EXTI_Callback+0x78>)
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	701a      	strb	r2, [r3, #0]
}
 8001a8e:	e013      	b.n	8001ab8 <HAL_GPIO_EXTI_Callback+0x64>
		else if (GPIO_Pin==INC_Pin)
 8001a90:	88fb      	ldrh	r3, [r7, #6]
 8001a92:	2b10      	cmp	r3, #16
 8001a94:	d103      	bne.n	8001a9e <HAL_GPIO_EXTI_Callback+0x4a>
			incPressed=1;
 8001a96:	4b0e      	ldr	r3, [pc, #56]	; (8001ad0 <HAL_GPIO_EXTI_Callback+0x7c>)
 8001a98:	2201      	movs	r2, #1
 8001a9a:	701a      	strb	r2, [r3, #0]
}
 8001a9c:	e00c      	b.n	8001ab8 <HAL_GPIO_EXTI_Callback+0x64>
		else if (GPIO_Pin==BEFORE_Pin)
 8001a9e:	88fb      	ldrh	r3, [r7, #6]
 8001aa0:	2b08      	cmp	r3, #8
 8001aa2:	d103      	bne.n	8001aac <HAL_GPIO_EXTI_Callback+0x58>
			beforePressed=1;
 8001aa4:	4b0b      	ldr	r3, [pc, #44]	; (8001ad4 <HAL_GPIO_EXTI_Callback+0x80>)
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	701a      	strb	r2, [r3, #0]
}
 8001aaa:	e005      	b.n	8001ab8 <HAL_GPIO_EXTI_Callback+0x64>
		else if (GPIO_Pin==NEXT_Pin)
 8001aac:	88fb      	ldrh	r3, [r7, #6]
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d102      	bne.n	8001ab8 <HAL_GPIO_EXTI_Callback+0x64>
			nextPressed=1;
 8001ab2:	4b09      	ldr	r3, [pc, #36]	; (8001ad8 <HAL_GPIO_EXTI_Callback+0x84>)
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	701a      	strb	r2, [r3, #0]
}
 8001ab8:	bf00      	nop
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr
 8001ac4:	2000021c 	.word	0x2000021c
 8001ac8:	2000021d 	.word	0x2000021d
 8001acc:	2000021f 	.word	0x2000021f
 8001ad0:	2000021e 	.word	0x2000021e
 8001ad4:	20000221 	.word	0x20000221
 8001ad8:	20000220 	.word	0x20000220

08001adc <updateCursor>:

void updateCursor()
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
	if(editionEnabled)
 8001ae0:	4b2d      	ldr	r3, [pc, #180]	; (8001b98 <updateCursor+0xbc>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d042      	beq.n	8001b6e <updateCursor+0x92>
	{
		  switch(currentRow)
 8001ae8:	4b2c      	ldr	r3, [pc, #176]	; (8001b9c <updateCursor+0xc0>)
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d017      	beq.n	8001b20 <updateCursor+0x44>
 8001af0:	2b03      	cmp	r3, #3
 8001af2:	d028      	beq.n	8001b46 <updateCursor+0x6a>
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d000      	beq.n	8001afa <updateCursor+0x1e>
			lcd_send_cmd (0x80|0x53);
			 lcd_send_data(' ');
			lcd_send_cmd (0x80|0x67);
			 lcd_send_data(' ');
	}
}
 8001af8:	e04c      	b.n	8001b94 <updateCursor+0xb8>
				 lcd_send_cmd (0x80|0x53);
 8001afa:	20d3      	movs	r0, #211	; 0xd3
 8001afc:	f7ff fa5c 	bl	8000fb8 <lcd_send_cmd>
				 lcd_send_data(127);
 8001b00:	207f      	movs	r0, #127	; 0x7f
 8001b02:	f7ff fa8b 	bl	800101c <lcd_send_data>
				 lcd_send_cmd (0x80|0x67);
 8001b06:	20e7      	movs	r0, #231	; 0xe7
 8001b08:	f7ff fa56 	bl	8000fb8 <lcd_send_cmd>
				 lcd_send_data(' ');
 8001b0c:	2020      	movs	r0, #32
 8001b0e:	f7ff fa85 	bl	800101c <lcd_send_data>
				 lcd_send_cmd (0x80|0x27);
 8001b12:	20a7      	movs	r0, #167	; 0xa7
 8001b14:	f7ff fa50 	bl	8000fb8 <lcd_send_cmd>
				 lcd_send_data(' ');
 8001b18:	2020      	movs	r0, #32
 8001b1a:	f7ff fa7f 	bl	800101c <lcd_send_data>
				 break;
 8001b1e:	e039      	b.n	8001b94 <updateCursor+0xb8>
				 lcd_send_cmd (0x80|0x27);
 8001b20:	20a7      	movs	r0, #167	; 0xa7
 8001b22:	f7ff fa49 	bl	8000fb8 <lcd_send_cmd>
				 lcd_send_data(127);
 8001b26:	207f      	movs	r0, #127	; 0x7f
 8001b28:	f7ff fa78 	bl	800101c <lcd_send_data>
				 lcd_send_cmd (0x80|0x53);
 8001b2c:	20d3      	movs	r0, #211	; 0xd3
 8001b2e:	f7ff fa43 	bl	8000fb8 <lcd_send_cmd>
				 lcd_send_data(' ');
 8001b32:	2020      	movs	r0, #32
 8001b34:	f7ff fa72 	bl	800101c <lcd_send_data>
				 lcd_send_cmd (0x80|0x67);
 8001b38:	20e7      	movs	r0, #231	; 0xe7
 8001b3a:	f7ff fa3d 	bl	8000fb8 <lcd_send_cmd>
				 lcd_send_data(' ');
 8001b3e:	2020      	movs	r0, #32
 8001b40:	f7ff fa6c 	bl	800101c <lcd_send_data>
				 break;
 8001b44:	e026      	b.n	8001b94 <updateCursor+0xb8>
				 lcd_send_cmd (0x80|0x67);
 8001b46:	20e7      	movs	r0, #231	; 0xe7
 8001b48:	f7ff fa36 	bl	8000fb8 <lcd_send_cmd>
				 lcd_send_data(127);
 8001b4c:	207f      	movs	r0, #127	; 0x7f
 8001b4e:	f7ff fa65 	bl	800101c <lcd_send_data>
				 lcd_send_cmd (0x80|0x53);
 8001b52:	20d3      	movs	r0, #211	; 0xd3
 8001b54:	f7ff fa30 	bl	8000fb8 <lcd_send_cmd>
				 lcd_send_data(' ');
 8001b58:	2020      	movs	r0, #32
 8001b5a:	f7ff fa5f 	bl	800101c <lcd_send_data>
				 lcd_send_cmd (0x80|0x27);
 8001b5e:	20a7      	movs	r0, #167	; 0xa7
 8001b60:	f7ff fa2a 	bl	8000fb8 <lcd_send_cmd>
				 lcd_send_data(' ');
 8001b64:	2020      	movs	r0, #32
 8001b66:	f7ff fa59 	bl	800101c <lcd_send_data>
				 break;
 8001b6a:	bf00      	nop
 8001b6c:	e012      	b.n	8001b94 <updateCursor+0xb8>
			lcd_send_cmd (0x80|0x27);
 8001b6e:	20a7      	movs	r0, #167	; 0xa7
 8001b70:	f7ff fa22 	bl	8000fb8 <lcd_send_cmd>
			 lcd_send_data(' ');
 8001b74:	2020      	movs	r0, #32
 8001b76:	f7ff fa51 	bl	800101c <lcd_send_data>
			lcd_send_cmd (0x80|0x53);
 8001b7a:	20d3      	movs	r0, #211	; 0xd3
 8001b7c:	f7ff fa1c 	bl	8000fb8 <lcd_send_cmd>
			 lcd_send_data(' ');
 8001b80:	2020      	movs	r0, #32
 8001b82:	f7ff fa4b 	bl	800101c <lcd_send_data>
			lcd_send_cmd (0x80|0x67);
 8001b86:	20e7      	movs	r0, #231	; 0xe7
 8001b88:	f7ff fa16 	bl	8000fb8 <lcd_send_cmd>
			 lcd_send_data(' ');
 8001b8c:	2020      	movs	r0, #32
 8001b8e:	f7ff fa45 	bl	800101c <lcd_send_data>
}
 8001b92:	e7ff      	b.n	8001b94 <updateCursor+0xb8>
 8001b94:	bf00      	nop
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	20000224 	.word	0x20000224
 8001b9c:	20000000 	.word	0x20000000

08001ba0 <controlRelay>:
void controlRelay()
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
	switch(mode)
 8001ba4:	4b3b      	ldr	r3, [pc, #236]	; (8001c94 <controlRelay+0xf4>)
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d009      	beq.n	8001bc0 <controlRelay+0x20>
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d037      	beq.n	8001c20 <controlRelay+0x80>
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d000      	beq.n	8001bb6 <controlRelay+0x16>
				}
			}
			break;

	}
}
 8001bb4:	e069      	b.n	8001c8a <controlRelay+0xea>
			working=manual;
 8001bb6:	4b38      	ldr	r3, [pc, #224]	; (8001c98 <controlRelay+0xf8>)
 8001bb8:	781a      	ldrb	r2, [r3, #0]
 8001bba:	4b38      	ldr	r3, [pc, #224]	; (8001c9c <controlRelay+0xfc>)
 8001bbc:	701a      	strb	r2, [r3, #0]
			break;
 8001bbe:	e064      	b.n	8001c8a <controlRelay+0xea>
			if(temperature<workingTemperature)
 8001bc0:	4b37      	ldr	r3, [pc, #220]	; (8001ca0 <controlRelay+0x100>)
 8001bc2:	ed93 7a00 	vldr	s14, [r3]
 8001bc6:	4b37      	ldr	r3, [pc, #220]	; (8001ca4 <controlRelay+0x104>)
 8001bc8:	edd3 7a00 	vldr	s15, [r3]
 8001bcc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bd4:	d51d      	bpl.n	8001c12 <controlRelay+0x72>
				if(temperature<(workingTemperature-hysteresis) || !hysteresisActive)
 8001bd6:	4b33      	ldr	r3, [pc, #204]	; (8001ca4 <controlRelay+0x104>)
 8001bd8:	ed93 7a00 	vldr	s14, [r3]
 8001bdc:	4b32      	ldr	r3, [pc, #200]	; (8001ca8 <controlRelay+0x108>)
 8001bde:	edd3 7a00 	vldr	s15, [r3]
 8001be2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001be6:	4b2e      	ldr	r3, [pc, #184]	; (8001ca0 <controlRelay+0x100>)
 8001be8:	edd3 7a00 	vldr	s15, [r3]
 8001bec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bf4:	dc06      	bgt.n	8001c04 <controlRelay+0x64>
 8001bf6:	4b2d      	ldr	r3, [pc, #180]	; (8001cac <controlRelay+0x10c>)
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	f083 0301 	eor.w	r3, r3, #1
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d041      	beq.n	8001c88 <controlRelay+0xe8>
					hysteresisActive = 0;
 8001c04:	4b29      	ldr	r3, [pc, #164]	; (8001cac <controlRelay+0x10c>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	701a      	strb	r2, [r3, #0]
					working=1;
 8001c0a:	4b24      	ldr	r3, [pc, #144]	; (8001c9c <controlRelay+0xfc>)
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	701a      	strb	r2, [r3, #0]
			break;
 8001c10:	e03a      	b.n	8001c88 <controlRelay+0xe8>
				hysteresisActive=1;
 8001c12:	4b26      	ldr	r3, [pc, #152]	; (8001cac <controlRelay+0x10c>)
 8001c14:	2201      	movs	r2, #1
 8001c16:	701a      	strb	r2, [r3, #0]
				working=0;
 8001c18:	4b20      	ldr	r3, [pc, #128]	; (8001c9c <controlRelay+0xfc>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	701a      	strb	r2, [r3, #0]
			break;
 8001c1e:	e033      	b.n	8001c88 <controlRelay+0xe8>
			if(working)
 8001c20:	4b1e      	ldr	r3, [pc, #120]	; (8001c9c <controlRelay+0xfc>)
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d017      	beq.n	8001c58 <controlRelay+0xb8>
				if(timePassed>=workingTime)
 8001c28:	4b21      	ldr	r3, [pc, #132]	; (8001cb0 <controlRelay+0x110>)
 8001c2a:	ed93 7a00 	vldr	s14, [r3]
 8001c2e:	4b21      	ldr	r3, [pc, #132]	; (8001cb4 <controlRelay+0x114>)
 8001c30:	edd3 7a00 	vldr	s15, [r3]
 8001c34:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c3c:	da00      	bge.n	8001c40 <controlRelay+0xa0>
			break;
 8001c3e:	e024      	b.n	8001c8a <controlRelay+0xea>
					working=0;
 8001c40:	4b16      	ldr	r3, [pc, #88]	; (8001c9c <controlRelay+0xfc>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	701a      	strb	r2, [r3, #0]
					timePassed=0;
 8001c46:	4b1a      	ldr	r3, [pc, #104]	; (8001cb0 <controlRelay+0x110>)
 8001c48:	f04f 0200 	mov.w	r2, #0
 8001c4c:	601a      	str	r2, [r3, #0]
					__HAL_TIM_SET_COUNTER(&htim2,0);
 8001c4e:	4b1a      	ldr	r3, [pc, #104]	; (8001cb8 <controlRelay+0x118>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2200      	movs	r2, #0
 8001c54:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 8001c56:	e018      	b.n	8001c8a <controlRelay+0xea>
				if(timePassed>=restingTime)
 8001c58:	4b15      	ldr	r3, [pc, #84]	; (8001cb0 <controlRelay+0x110>)
 8001c5a:	ed93 7a00 	vldr	s14, [r3]
 8001c5e:	4b17      	ldr	r3, [pc, #92]	; (8001cbc <controlRelay+0x11c>)
 8001c60:	edd3 7a00 	vldr	s15, [r3]
 8001c64:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c6c:	da00      	bge.n	8001c70 <controlRelay+0xd0>
			break;
 8001c6e:	e00c      	b.n	8001c8a <controlRelay+0xea>
					working=1;
 8001c70:	4b0a      	ldr	r3, [pc, #40]	; (8001c9c <controlRelay+0xfc>)
 8001c72:	2201      	movs	r2, #1
 8001c74:	701a      	strb	r2, [r3, #0]
					timePassed=0;
 8001c76:	4b0e      	ldr	r3, [pc, #56]	; (8001cb0 <controlRelay+0x110>)
 8001c78:	f04f 0200 	mov.w	r2, #0
 8001c7c:	601a      	str	r2, [r3, #0]
					__HAL_TIM_SET_COUNTER(&htim2,0);
 8001c7e:	4b0e      	ldr	r3, [pc, #56]	; (8001cb8 <controlRelay+0x118>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	2200      	movs	r2, #0
 8001c84:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 8001c86:	e000      	b.n	8001c8a <controlRelay+0xea>
			break;
 8001c88:	bf00      	nop
}
 8001c8a:	bf00      	nop
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr
 8001c94:	20000228 	.word	0x20000228
 8001c98:	2000022a 	.word	0x2000022a
 8001c9c:	20000227 	.word	0x20000227
 8001ca0:	20000230 	.word	0x20000230
 8001ca4:	2000000c 	.word	0x2000000c
 8001ca8:	20000010 	.word	0x20000010
 8001cac:	20000226 	.word	0x20000226
 8001cb0:	2000022c 	.word	0x2000022c
 8001cb4:	20000004 	.word	0x20000004
 8001cb8:	20000308 	.word	0x20000308
 8001cbc:	20000008 	.word	0x20000008

08001cc0 <prepareStrings>:

void prepareStrings()
{
 8001cc0:	b590      	push	{r4, r7, lr}
 8001cc2:	b085      	sub	sp, #20
 8001cc4:	af04      	add	r7, sp, #16
	snprintf(firstRowString,19,			"TEMP:%.1f %cC",temperature,223);
 8001cc6:	4b3f      	ldr	r3, [pc, #252]	; (8001dc4 <prepareStrings+0x104>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7fe fc3c 	bl	8000548 <__aeabi_f2d>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	460c      	mov	r4, r1
 8001cd4:	22df      	movs	r2, #223	; 0xdf
 8001cd6:	9202      	str	r2, [sp, #8]
 8001cd8:	e9cd 3400 	strd	r3, r4, [sp]
 8001cdc:	4a3a      	ldr	r2, [pc, #232]	; (8001dc8 <prepareStrings+0x108>)
 8001cde:	2113      	movs	r1, #19
 8001ce0:	483a      	ldr	r0, [pc, #232]	; (8001dcc <prepareStrings+0x10c>)
 8001ce2:	f004 fd3d 	bl	8006760 <sniprintf>
	switch(modeNew)
 8001ce6:	4b3a      	ldr	r3, [pc, #232]	; (8001dd0 <prepareStrings+0x110>)
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d01e      	beq.n	8001d2c <prepareStrings+0x6c>
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d042      	beq.n	8001d78 <prepareStrings+0xb8>
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d000      	beq.n	8001cf8 <prepareStrings+0x38>
			snprintf		(secondRowString,19,	"TRYB:CZAS          ");
			snprintf		(thirdRowString,19, 	"PRACA:%.1f min     ",workingTimeNew);
			snprintf		(fourthRowString,19,	"SPOCZYNEK:%.1f min ",restingTimeNew);
			break;
	}
}
 8001cf6:	e061      	b.n	8001dbc <prepareStrings+0xfc>
			snprintf		(secondRowString,19,	"TRYB:MANUALNY      ");
 8001cf8:	4a36      	ldr	r2, [pc, #216]	; (8001dd4 <prepareStrings+0x114>)
 8001cfa:	2113      	movs	r1, #19
 8001cfc:	4836      	ldr	r0, [pc, #216]	; (8001dd8 <prepareStrings+0x118>)
 8001cfe:	f004 fd2f 	bl	8006760 <sniprintf>
			if(manualNew)
 8001d02:	4b36      	ldr	r3, [pc, #216]	; (8001ddc <prepareStrings+0x11c>)
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d005      	beq.n	8001d16 <prepareStrings+0x56>
				snprintf	(thirdRowString,19,	"PRACA POMPY:TAK    ");
 8001d0a:	4a35      	ldr	r2, [pc, #212]	; (8001de0 <prepareStrings+0x120>)
 8001d0c:	2113      	movs	r1, #19
 8001d0e:	4835      	ldr	r0, [pc, #212]	; (8001de4 <prepareStrings+0x124>)
 8001d10:	f004 fd26 	bl	8006760 <sniprintf>
 8001d14:	e004      	b.n	8001d20 <prepareStrings+0x60>
				snprintf	(thirdRowString,19,	"PRACA POMPY:NIE    ");
 8001d16:	4a34      	ldr	r2, [pc, #208]	; (8001de8 <prepareStrings+0x128>)
 8001d18:	2113      	movs	r1, #19
 8001d1a:	4832      	ldr	r0, [pc, #200]	; (8001de4 <prepareStrings+0x124>)
 8001d1c:	f004 fd20 	bl	8006760 <sniprintf>
			snprintf		(fourthRowString,19,	"                   ");
 8001d20:	4a32      	ldr	r2, [pc, #200]	; (8001dec <prepareStrings+0x12c>)
 8001d22:	2113      	movs	r1, #19
 8001d24:	4832      	ldr	r0, [pc, #200]	; (8001df0 <prepareStrings+0x130>)
 8001d26:	f004 fd1b 	bl	8006760 <sniprintf>
			break;
 8001d2a:	e047      	b.n	8001dbc <prepareStrings+0xfc>
			snprintf		(secondRowString,19,	"TRYB:TEMPERATURA   ");
 8001d2c:	4a31      	ldr	r2, [pc, #196]	; (8001df4 <prepareStrings+0x134>)
 8001d2e:	2113      	movs	r1, #19
 8001d30:	4829      	ldr	r0, [pc, #164]	; (8001dd8 <prepareStrings+0x118>)
 8001d32:	f004 fd15 	bl	8006760 <sniprintf>
			snprintf		(thirdRowString,19, 	"TEMP WYL:%.1f %cC  ",workingTemperatureNew,223);
 8001d36:	4b30      	ldr	r3, [pc, #192]	; (8001df8 <prepareStrings+0x138>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7fe fc04 	bl	8000548 <__aeabi_f2d>
 8001d40:	4603      	mov	r3, r0
 8001d42:	460c      	mov	r4, r1
 8001d44:	22df      	movs	r2, #223	; 0xdf
 8001d46:	9202      	str	r2, [sp, #8]
 8001d48:	e9cd 3400 	strd	r3, r4, [sp]
 8001d4c:	4a2b      	ldr	r2, [pc, #172]	; (8001dfc <prepareStrings+0x13c>)
 8001d4e:	2113      	movs	r1, #19
 8001d50:	4824      	ldr	r0, [pc, #144]	; (8001de4 <prepareStrings+0x124>)
 8001d52:	f004 fd05 	bl	8006760 <sniprintf>
			snprintf		(fourthRowString,19,	"HISTEREZA:%.1f %cC ",hysteresisNew,223);
 8001d56:	4b2a      	ldr	r3, [pc, #168]	; (8001e00 <prepareStrings+0x140>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7fe fbf4 	bl	8000548 <__aeabi_f2d>
 8001d60:	4603      	mov	r3, r0
 8001d62:	460c      	mov	r4, r1
 8001d64:	22df      	movs	r2, #223	; 0xdf
 8001d66:	9202      	str	r2, [sp, #8]
 8001d68:	e9cd 3400 	strd	r3, r4, [sp]
 8001d6c:	4a25      	ldr	r2, [pc, #148]	; (8001e04 <prepareStrings+0x144>)
 8001d6e:	2113      	movs	r1, #19
 8001d70:	481f      	ldr	r0, [pc, #124]	; (8001df0 <prepareStrings+0x130>)
 8001d72:	f004 fcf5 	bl	8006760 <sniprintf>
			break;
 8001d76:	e021      	b.n	8001dbc <prepareStrings+0xfc>
			snprintf		(secondRowString,19,	"TRYB:CZAS          ");
 8001d78:	4a23      	ldr	r2, [pc, #140]	; (8001e08 <prepareStrings+0x148>)
 8001d7a:	2113      	movs	r1, #19
 8001d7c:	4816      	ldr	r0, [pc, #88]	; (8001dd8 <prepareStrings+0x118>)
 8001d7e:	f004 fcef 	bl	8006760 <sniprintf>
			snprintf		(thirdRowString,19, 	"PRACA:%.1f min     ",workingTimeNew);
 8001d82:	4b22      	ldr	r3, [pc, #136]	; (8001e0c <prepareStrings+0x14c>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7fe fbde 	bl	8000548 <__aeabi_f2d>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	460c      	mov	r4, r1
 8001d90:	e9cd 3400 	strd	r3, r4, [sp]
 8001d94:	4a1e      	ldr	r2, [pc, #120]	; (8001e10 <prepareStrings+0x150>)
 8001d96:	2113      	movs	r1, #19
 8001d98:	4812      	ldr	r0, [pc, #72]	; (8001de4 <prepareStrings+0x124>)
 8001d9a:	f004 fce1 	bl	8006760 <sniprintf>
			snprintf		(fourthRowString,19,	"SPOCZYNEK:%.1f min ",restingTimeNew);
 8001d9e:	4b1d      	ldr	r3, [pc, #116]	; (8001e14 <prepareStrings+0x154>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7fe fbd0 	bl	8000548 <__aeabi_f2d>
 8001da8:	4603      	mov	r3, r0
 8001daa:	460c      	mov	r4, r1
 8001dac:	e9cd 3400 	strd	r3, r4, [sp]
 8001db0:	4a19      	ldr	r2, [pc, #100]	; (8001e18 <prepareStrings+0x158>)
 8001db2:	2113      	movs	r1, #19
 8001db4:	480e      	ldr	r0, [pc, #56]	; (8001df0 <prepareStrings+0x130>)
 8001db6:	f004 fcd3 	bl	8006760 <sniprintf>
			break;
 8001dba:	bf00      	nop
}
 8001dbc:	bf00      	nop
 8001dbe:	3704      	adds	r7, #4
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd90      	pop	{r4, r7, pc}
 8001dc4:	20000230 	.word	0x20000230
 8001dc8:	08009600 	.word	0x08009600
 8001dcc:	200002b4 	.word	0x200002b4
 8001dd0:	20000229 	.word	0x20000229
 8001dd4:	08009610 	.word	0x08009610
 8001dd8:	200002a0 	.word	0x200002a0
 8001ddc:	20000234 	.word	0x20000234
 8001de0:	08009624 	.word	0x08009624
 8001de4:	200003c8 	.word	0x200003c8
 8001de8:	08009638 	.word	0x08009638
 8001dec:	0800964c 	.word	0x0800964c
 8001df0:	200003dc 	.word	0x200003dc
 8001df4:	08009660 	.word	0x08009660
 8001df8:	2000001c 	.word	0x2000001c
 8001dfc:	08009674 	.word	0x08009674
 8001e00:	20000020 	.word	0x20000020
 8001e04:	08009688 	.word	0x08009688
 8001e08:	0800969c 	.word	0x0800969c
 8001e0c:	20000014 	.word	0x20000014
 8001e10:	080096b0 	.word	0x080096b0
 8001e14:	20000018 	.word	0x20000018
 8001e18:	080096c4 	.word	0x080096c4

08001e1c <updateVariables>:
void updateVariables()
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
	mode=modeNew;
 8001e20:	4b17      	ldr	r3, [pc, #92]	; (8001e80 <updateVariables+0x64>)
 8001e22:	781a      	ldrb	r2, [r3, #0]
 8001e24:	4b17      	ldr	r3, [pc, #92]	; (8001e84 <updateVariables+0x68>)
 8001e26:	701a      	strb	r2, [r3, #0]
	manual=manualNew;
 8001e28:	4b17      	ldr	r3, [pc, #92]	; (8001e88 <updateVariables+0x6c>)
 8001e2a:	781a      	ldrb	r2, [r3, #0]
 8001e2c:	4b17      	ldr	r3, [pc, #92]	; (8001e8c <updateVariables+0x70>)
 8001e2e:	701a      	strb	r2, [r3, #0]
	workingTime=workingTimeNew;
 8001e30:	4b17      	ldr	r3, [pc, #92]	; (8001e90 <updateVariables+0x74>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a17      	ldr	r2, [pc, #92]	; (8001e94 <updateVariables+0x78>)
 8001e36:	6013      	str	r3, [r2, #0]
	restingTime=restingTimeNew;
 8001e38:	4b17      	ldr	r3, [pc, #92]	; (8001e98 <updateVariables+0x7c>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a17      	ldr	r2, [pc, #92]	; (8001e9c <updateVariables+0x80>)
 8001e3e:	6013      	str	r3, [r2, #0]
	workingTemperature=workingTemperatureNew;
 8001e40:	4b17      	ldr	r3, [pc, #92]	; (8001ea0 <updateVariables+0x84>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a17      	ldr	r2, [pc, #92]	; (8001ea4 <updateVariables+0x88>)
 8001e46:	6013      	str	r3, [r2, #0]
	hysteresis=hysteresisNew;
 8001e48:	4b17      	ldr	r3, [pc, #92]	; (8001ea8 <updateVariables+0x8c>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a17      	ldr	r2, [pc, #92]	; (8001eac <updateVariables+0x90>)
 8001e4e:	6013      	str	r3, [r2, #0]
	hysteresisActive=0;
 8001e50:	4b17      	ldr	r3, [pc, #92]	; (8001eb0 <updateVariables+0x94>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	701a      	strb	r2, [r3, #0]
	if(mode==2)
 8001e56:	4b0b      	ldr	r3, [pc, #44]	; (8001e84 <updateVariables+0x68>)
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d10a      	bne.n	8001e74 <updateVariables+0x58>
		{
			working=1;
 8001e5e:	4b15      	ldr	r3, [pc, #84]	; (8001eb4 <updateVariables+0x98>)
 8001e60:	2201      	movs	r2, #1
 8001e62:	701a      	strb	r2, [r3, #0]
			timePassed=0;
 8001e64:	4b14      	ldr	r3, [pc, #80]	; (8001eb8 <updateVariables+0x9c>)
 8001e66:	f04f 0200 	mov.w	r2, #0
 8001e6a:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(&htim2,0);
 8001e6c:	4b13      	ldr	r3, [pc, #76]	; (8001ebc <updateVariables+0xa0>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2200      	movs	r2, #0
 8001e72:	625a      	str	r2, [r3, #36]	; 0x24
		}
}
 8001e74:	bf00      	nop
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	20000229 	.word	0x20000229
 8001e84:	20000228 	.word	0x20000228
 8001e88:	20000234 	.word	0x20000234
 8001e8c:	2000022a 	.word	0x2000022a
 8001e90:	20000014 	.word	0x20000014
 8001e94:	20000004 	.word	0x20000004
 8001e98:	20000018 	.word	0x20000018
 8001e9c:	20000008 	.word	0x20000008
 8001ea0:	2000001c 	.word	0x2000001c
 8001ea4:	2000000c 	.word	0x2000000c
 8001ea8:	20000020 	.word	0x20000020
 8001eac:	20000010 	.word	0x20000010
 8001eb0:	20000226 	.word	0x20000226
 8001eb4:	20000227 	.word	0x20000227
 8001eb8:	2000022c 	.word	0x2000022c
 8001ebc:	20000308 	.word	0x20000308

08001ec0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ec4:	f000 fc6d 	bl	80027a2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ec8:	f000 f84c 	bl	8001f64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ecc:	f000 fa02 	bl	80022d4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001ed0:	f000 f9d0 	bl	8002274 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001ed4:	f000 f8ce 	bl	8002074 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001ed8:	f000 f92a 	bl	8002130 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001edc:	f000 f97c 	bl	80021d8 <MX_TIM2_Init>
  MX_IWDG_Init();
 8001ee0:	f000 f908 	bl	80020f4 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8001ee4:	4818      	ldr	r0, [pc, #96]	; (8001f48 <main+0x88>)
 8001ee6:	f002 fd59 	bl	800499c <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8001eea:	4818      	ldr	r0, [pc, #96]	; (8001f4c <main+0x8c>)
 8001eec:	f002 fd80 	bl	80049f0 <HAL_TIM_Base_Start_IT>
  prepareTemperature();
 8001ef0:	f7ff face 	bl	8001490 <prepareTemperature>
  readTemperature();
 8001ef4:	f7ff fadc 	bl	80014b0 <readTemperature>
  lcd_init();
 8001ef8:	f7ff f976 	bl	80011e8 <lcd_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  	  	prepareTemperature();
 8001efc:	f7ff fac8 	bl	8001490 <prepareTemperature>
	  	  	checkKeyboard();
 8001f00:	f7ff fb7a 	bl	80015f8 <checkKeyboard>
	  	  	readTemperature();
 8001f04:	f7ff fad4 	bl	80014b0 <readTemperature>
	  	  	if(editionEnd)
 8001f08:	4b11      	ldr	r3, [pc, #68]	; (8001f50 <main+0x90>)
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d007      	beq.n	8001f20 <main+0x60>
	  	  	{
	  	  		updateVariables();
 8001f10:	f7ff ff84 	bl	8001e1c <updateVariables>
	  	  		currentRow=1;
 8001f14:	4b0f      	ldr	r3, [pc, #60]	; (8001f54 <main+0x94>)
 8001f16:	2201      	movs	r2, #1
 8001f18:	701a      	strb	r2, [r3, #0]
	  	  		editionEnd=0;
 8001f1a:	4b0d      	ldr	r3, [pc, #52]	; (8001f50 <main+0x90>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	701a      	strb	r2, [r3, #0]
	  	  	}
	  	  	controlRelay();
 8001f20:	f7ff fe3e 	bl	8001ba0 <controlRelay>
	  	  	prepareStrings();
 8001f24:	f7ff fecc 	bl	8001cc0 <prepareStrings>
		 	HAL_GPIO_WritePin(GPIOB,RELAY_Pin,working);
 8001f28:	4b0b      	ldr	r3, [pc, #44]	; (8001f58 <main+0x98>)
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	2110      	movs	r1, #16
 8001f30:	480a      	ldr	r0, [pc, #40]	; (8001f5c <main+0x9c>)
 8001f32:	f000 ff5d 	bl	8002df0 <HAL_GPIO_WritePin>
		 	HAL_IWDG_Refresh(&hiwdg);
 8001f36:	480a      	ldr	r0, [pc, #40]	; (8001f60 <main+0xa0>)
 8001f38:	f001 fb69 	bl	800360e <HAL_IWDG_Refresh>
		 	updateScreen();
 8001f3c:	f7ff fb08 	bl	8001550 <updateScreen>
		 	updateCursor();
 8001f40:	f7ff fdcc 	bl	8001adc <updateCursor>
	  	  	prepareTemperature();
 8001f44:	e7da      	b.n	8001efc <main+0x3c>
 8001f46:	bf00      	nop
 8001f48:	200002c8 	.word	0x200002c8
 8001f4c:	20000308 	.word	0x20000308
 8001f50:	20000225 	.word	0x20000225
 8001f54:	20000000 	.word	0x20000000
 8001f58:	20000227 	.word	0x20000227
 8001f5c:	48000400 	.word	0x48000400
 8001f60:	20000290 	.word	0x20000290

08001f64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b0ac      	sub	sp, #176	; 0xb0
 8001f68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f6a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001f6e:	2244      	movs	r2, #68	; 0x44
 8001f70:	2100      	movs	r1, #0
 8001f72:	4618      	mov	r0, r3
 8001f74:	f003 fda8 	bl	8005ac8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f78:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	601a      	str	r2, [r3, #0]
 8001f80:	605a      	str	r2, [r3, #4]
 8001f82:	609a      	str	r2, [r3, #8]
 8001f84:	60da      	str	r2, [r3, #12]
 8001f86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f88:	1d3b      	adds	r3, r7, #4
 8001f8a:	2254      	movs	r2, #84	; 0x54
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f003 fd9a 	bl	8005ac8 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8001f94:	f001 fb4c 	bl	8003630 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001f98:	4b35      	ldr	r3, [pc, #212]	; (8002070 <SystemClock_Config+0x10c>)
 8001f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f9e:	4a34      	ldr	r2, [pc, #208]	; (8002070 <SystemClock_Config+0x10c>)
 8001fa0:	f023 0318 	bic.w	r3, r3, #24
 8001fa4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 8001fa8:	231c      	movs	r3, #28
 8001faa:	66fb      	str	r3, [r7, #108]	; 0x6c
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001fac:	2301      	movs	r3, #1
 8001fae:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001fc2:	2360      	movs	r3, #96	; 0x60
 8001fc4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fc8:	2302      	movs	r3, #2
 8001fca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 36;
 8001fda:	2324      	movs	r3, #36	; 0x24
 8001fdc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001fe0:	2307      	movs	r3, #7
 8001fe2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001fec:	2302      	movs	r3, #2
 8001fee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ff2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f001 fb8e 	bl	8003718 <HAL_RCC_OscConfig>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8002002:	f000 f9ef 	bl	80023e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002006:	230f      	movs	r3, #15
 8002008:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800200a:	2303      	movs	r3, #3
 800200c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800200e:	2300      	movs	r3, #0
 8002010:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002012:	2300      	movs	r3, #0
 8002014:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002016:	2300      	movs	r3, #0
 8002018:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800201a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800201e:	2104      	movs	r1, #4
 8002020:	4618      	mov	r0, r3
 8002022:	f001 ff99 	bl	8003f58 <HAL_RCC_ClockConfig>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 800202c:	f000 f9da 	bl	80023e4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8002030:	2342      	movs	r3, #66	; 0x42
 8002032:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002034:	2300      	movs	r3, #0
 8002036:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 8002038:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800203c:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800203e:	1d3b      	adds	r3, r7, #4
 8002040:	4618      	mov	r0, r3
 8002042:	f002 f98d 	bl	8004360 <HAL_RCCEx_PeriphCLKConfig>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <SystemClock_Config+0xec>
  {
    Error_Handler();
 800204c:	f000 f9ca 	bl	80023e4 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002050:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002054:	f001 fb0a 	bl	800366c <HAL_PWREx_ControlVoltageScaling>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <SystemClock_Config+0xfe>
  {
    Error_Handler();
 800205e:	f000 f9c1 	bl	80023e4 <Error_Handler>
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8002062:	f002 fb6f 	bl	8004744 <HAL_RCCEx_EnableMSIPLLMode>
}
 8002066:	bf00      	nop
 8002068:	37b0      	adds	r7, #176	; 0xb0
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	40021000 	.word	0x40021000

08002074 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002078:	4b1b      	ldr	r3, [pc, #108]	; (80020e8 <MX_I2C1_Init+0x74>)
 800207a:	4a1c      	ldr	r2, [pc, #112]	; (80020ec <MX_I2C1_Init+0x78>)
 800207c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10808ED6;
 800207e:	4b1a      	ldr	r3, [pc, #104]	; (80020e8 <MX_I2C1_Init+0x74>)
 8002080:	4a1b      	ldr	r2, [pc, #108]	; (80020f0 <MX_I2C1_Init+0x7c>)
 8002082:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002084:	4b18      	ldr	r3, [pc, #96]	; (80020e8 <MX_I2C1_Init+0x74>)
 8002086:	2200      	movs	r2, #0
 8002088:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800208a:	4b17      	ldr	r3, [pc, #92]	; (80020e8 <MX_I2C1_Init+0x74>)
 800208c:	2201      	movs	r2, #1
 800208e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002090:	4b15      	ldr	r3, [pc, #84]	; (80020e8 <MX_I2C1_Init+0x74>)
 8002092:	2200      	movs	r2, #0
 8002094:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002096:	4b14      	ldr	r3, [pc, #80]	; (80020e8 <MX_I2C1_Init+0x74>)
 8002098:	2200      	movs	r2, #0
 800209a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800209c:	4b12      	ldr	r3, [pc, #72]	; (80020e8 <MX_I2C1_Init+0x74>)
 800209e:	2200      	movs	r2, #0
 80020a0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80020a2:	4b11      	ldr	r3, [pc, #68]	; (80020e8 <MX_I2C1_Init+0x74>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80020a8:	4b0f      	ldr	r3, [pc, #60]	; (80020e8 <MX_I2C1_Init+0x74>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80020ae:	480e      	ldr	r0, [pc, #56]	; (80020e8 <MX_I2C1_Init+0x74>)
 80020b0:	f000 fed8 	bl	8002e64 <HAL_I2C_Init>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80020ba:	f000 f993 	bl	80023e4 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 80020be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020c2:	4809      	ldr	r0, [pc, #36]	; (80020e8 <MX_I2C1_Init+0x74>)
 80020c4:	f001 f9c6 	bl	8003454 <HAL_I2CEx_ConfigAnalogFilter>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80020ce:	f000 f989 	bl	80023e4 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80020d2:	2100      	movs	r1, #0
 80020d4:	4804      	ldr	r0, [pc, #16]	; (80020e8 <MX_I2C1_Init+0x74>)
 80020d6:	f001 fa08 	bl	80034ea <HAL_I2CEx_ConfigDigitalFilter>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d001      	beq.n	80020e4 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80020e0:	f000 f980 	bl	80023e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80020e4:	bf00      	nop
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	20000244 	.word	0x20000244
 80020ec:	40005400 	.word	0x40005400
 80020f0:	10808ed6 	.word	0x10808ed6

080020f4 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80020f8:	4b0b      	ldr	r3, [pc, #44]	; (8002128 <MX_IWDG_Init+0x34>)
 80020fa:	4a0c      	ldr	r2, [pc, #48]	; (800212c <MX_IWDG_Init+0x38>)
 80020fc:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 80020fe:	4b0a      	ldr	r3, [pc, #40]	; (8002128 <MX_IWDG_Init+0x34>)
 8002100:	2203      	movs	r2, #3
 8002102:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8002104:	4b08      	ldr	r3, [pc, #32]	; (8002128 <MX_IWDG_Init+0x34>)
 8002106:	f640 72ff 	movw	r2, #4095	; 0xfff
 800210a:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 2999;
 800210c:	4b06      	ldr	r3, [pc, #24]	; (8002128 <MX_IWDG_Init+0x34>)
 800210e:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8002112:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8002114:	4804      	ldr	r0, [pc, #16]	; (8002128 <MX_IWDG_Init+0x34>)
 8002116:	f001 fa34 	bl	8003582 <HAL_IWDG_Init>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8002120:	f000 f960 	bl	80023e4 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8002124:	bf00      	nop
 8002126:	bd80      	pop	{r7, pc}
 8002128:	20000290 	.word	0x20000290
 800212c:	40003000 	.word	0x40003000

08002130 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b088      	sub	sp, #32
 8002134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002136:	f107 0310 	add.w	r3, r7, #16
 800213a:	2200      	movs	r2, #0
 800213c:	601a      	str	r2, [r3, #0]
 800213e:	605a      	str	r2, [r3, #4]
 8002140:	609a      	str	r2, [r3, #8]
 8002142:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002144:	1d3b      	adds	r3, r7, #4
 8002146:	2200      	movs	r2, #0
 8002148:	601a      	str	r2, [r3, #0]
 800214a:	605a      	str	r2, [r3, #4]
 800214c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800214e:	4b20      	ldr	r3, [pc, #128]	; (80021d0 <MX_TIM1_Init+0xa0>)
 8002150:	4a20      	ldr	r2, [pc, #128]	; (80021d4 <MX_TIM1_Init+0xa4>)
 8002152:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8002154:	4b1e      	ldr	r3, [pc, #120]	; (80021d0 <MX_TIM1_Init+0xa0>)
 8002156:	2247      	movs	r2, #71	; 0x47
 8002158:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800215a:	4b1d      	ldr	r3, [pc, #116]	; (80021d0 <MX_TIM1_Init+0xa0>)
 800215c:	2200      	movs	r2, #0
 800215e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8002160:	4b1b      	ldr	r3, [pc, #108]	; (80021d0 <MX_TIM1_Init+0xa0>)
 8002162:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002166:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002168:	4b19      	ldr	r3, [pc, #100]	; (80021d0 <MX_TIM1_Init+0xa0>)
 800216a:	2200      	movs	r2, #0
 800216c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800216e:	4b18      	ldr	r3, [pc, #96]	; (80021d0 <MX_TIM1_Init+0xa0>)
 8002170:	2200      	movs	r2, #0
 8002172:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002174:	4b16      	ldr	r3, [pc, #88]	; (80021d0 <MX_TIM1_Init+0xa0>)
 8002176:	2200      	movs	r2, #0
 8002178:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800217a:	4815      	ldr	r0, [pc, #84]	; (80021d0 <MX_TIM1_Init+0xa0>)
 800217c:	f002 fbe2 	bl	8004944 <HAL_TIM_Base_Init>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8002186:	f000 f92d 	bl	80023e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800218a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800218e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002190:	f107 0310 	add.w	r3, r7, #16
 8002194:	4619      	mov	r1, r3
 8002196:	480e      	ldr	r0, [pc, #56]	; (80021d0 <MX_TIM1_Init+0xa0>)
 8002198:	f002 fd73 	bl	8004c82 <HAL_TIM_ConfigClockSource>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80021a2:	f000 f91f 	bl	80023e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021a6:	2300      	movs	r3, #0
 80021a8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80021aa:	2300      	movs	r3, #0
 80021ac:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021ae:	2300      	movs	r3, #0
 80021b0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80021b2:	1d3b      	adds	r3, r7, #4
 80021b4:	4619      	mov	r1, r3
 80021b6:	4806      	ldr	r0, [pc, #24]	; (80021d0 <MX_TIM1_Init+0xa0>)
 80021b8:	f002 ff42 	bl	8005040 <HAL_TIMEx_MasterConfigSynchronization>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80021c2:	f000 f90f 	bl	80023e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80021c6:	bf00      	nop
 80021c8:	3720      	adds	r7, #32
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	200002c8 	.word	0x200002c8
 80021d4:	40012c00 	.word	0x40012c00

080021d8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b088      	sub	sp, #32
 80021dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021de:	f107 0310 	add.w	r3, r7, #16
 80021e2:	2200      	movs	r2, #0
 80021e4:	601a      	str	r2, [r3, #0]
 80021e6:	605a      	str	r2, [r3, #4]
 80021e8:	609a      	str	r2, [r3, #8]
 80021ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021ec:	1d3b      	adds	r3, r7, #4
 80021ee:	2200      	movs	r2, #0
 80021f0:	601a      	str	r2, [r3, #0]
 80021f2:	605a      	str	r2, [r3, #4]
 80021f4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80021f6:	4b1e      	ldr	r3, [pc, #120]	; (8002270 <MX_TIM2_Init+0x98>)
 80021f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80021fc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 40000;
 80021fe:	4b1c      	ldr	r3, [pc, #112]	; (8002270 <MX_TIM2_Init+0x98>)
 8002200:	f649 4240 	movw	r2, #40000	; 0x9c40
 8002204:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002206:	4b1a      	ldr	r3, [pc, #104]	; (8002270 <MX_TIM2_Init+0x98>)
 8002208:	2200      	movs	r2, #0
 800220a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 54000;
 800220c:	4b18      	ldr	r3, [pc, #96]	; (8002270 <MX_TIM2_Init+0x98>)
 800220e:	f24d 22f0 	movw	r2, #54000	; 0xd2f0
 8002212:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002214:	4b16      	ldr	r3, [pc, #88]	; (8002270 <MX_TIM2_Init+0x98>)
 8002216:	2200      	movs	r2, #0
 8002218:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800221a:	4b15      	ldr	r3, [pc, #84]	; (8002270 <MX_TIM2_Init+0x98>)
 800221c:	2280      	movs	r2, #128	; 0x80
 800221e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002220:	4813      	ldr	r0, [pc, #76]	; (8002270 <MX_TIM2_Init+0x98>)
 8002222:	f002 fb8f 	bl	8004944 <HAL_TIM_Base_Init>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d001      	beq.n	8002230 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 800222c:	f000 f8da 	bl	80023e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002230:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002234:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002236:	f107 0310 	add.w	r3, r7, #16
 800223a:	4619      	mov	r1, r3
 800223c:	480c      	ldr	r0, [pc, #48]	; (8002270 <MX_TIM2_Init+0x98>)
 800223e:	f002 fd20 	bl	8004c82 <HAL_TIM_ConfigClockSource>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d001      	beq.n	800224c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8002248:	f000 f8cc 	bl	80023e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800224c:	2300      	movs	r3, #0
 800224e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002250:	2300      	movs	r3, #0
 8002252:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002254:	1d3b      	adds	r3, r7, #4
 8002256:	4619      	mov	r1, r3
 8002258:	4805      	ldr	r0, [pc, #20]	; (8002270 <MX_TIM2_Init+0x98>)
 800225a:	f002 fef1 	bl	8005040 <HAL_TIMEx_MasterConfigSynchronization>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d001      	beq.n	8002268 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8002264:	f000 f8be 	bl	80023e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002268:	bf00      	nop
 800226a:	3720      	adds	r7, #32
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	20000308 	.word	0x20000308

08002274 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002278:	4b14      	ldr	r3, [pc, #80]	; (80022cc <MX_USART2_UART_Init+0x58>)
 800227a:	4a15      	ldr	r2, [pc, #84]	; (80022d0 <MX_USART2_UART_Init+0x5c>)
 800227c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800227e:	4b13      	ldr	r3, [pc, #76]	; (80022cc <MX_USART2_UART_Init+0x58>)
 8002280:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002284:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002286:	4b11      	ldr	r3, [pc, #68]	; (80022cc <MX_USART2_UART_Init+0x58>)
 8002288:	2200      	movs	r2, #0
 800228a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800228c:	4b0f      	ldr	r3, [pc, #60]	; (80022cc <MX_USART2_UART_Init+0x58>)
 800228e:	2200      	movs	r2, #0
 8002290:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002292:	4b0e      	ldr	r3, [pc, #56]	; (80022cc <MX_USART2_UART_Init+0x58>)
 8002294:	2200      	movs	r2, #0
 8002296:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002298:	4b0c      	ldr	r3, [pc, #48]	; (80022cc <MX_USART2_UART_Init+0x58>)
 800229a:	220c      	movs	r2, #12
 800229c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800229e:	4b0b      	ldr	r3, [pc, #44]	; (80022cc <MX_USART2_UART_Init+0x58>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80022a4:	4b09      	ldr	r3, [pc, #36]	; (80022cc <MX_USART2_UART_Init+0x58>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022aa:	4b08      	ldr	r3, [pc, #32]	; (80022cc <MX_USART2_UART_Init+0x58>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022b0:	4b06      	ldr	r3, [pc, #24]	; (80022cc <MX_USART2_UART_Init+0x58>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80022b6:	4805      	ldr	r0, [pc, #20]	; (80022cc <MX_USART2_UART_Init+0x58>)
 80022b8:	f002 ff46 	bl	8005148 <HAL_UART_Init>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80022c2:	f000 f88f 	bl	80023e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80022c6:	bf00      	nop
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	20000348 	.word	0x20000348
 80022d0:	40004400 	.word	0x40004400

080022d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b088      	sub	sp, #32
 80022d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022da:	f107 030c 	add.w	r3, r7, #12
 80022de:	2200      	movs	r2, #0
 80022e0:	601a      	str	r2, [r3, #0]
 80022e2:	605a      	str	r2, [r3, #4]
 80022e4:	609a      	str	r2, [r3, #8]
 80022e6:	60da      	str	r2, [r3, #12]
 80022e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022ea:	4b3b      	ldr	r3, [pc, #236]	; (80023d8 <MX_GPIO_Init+0x104>)
 80022ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ee:	4a3a      	ldr	r2, [pc, #232]	; (80023d8 <MX_GPIO_Init+0x104>)
 80022f0:	f043 0304 	orr.w	r3, r3, #4
 80022f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022f6:	4b38      	ldr	r3, [pc, #224]	; (80023d8 <MX_GPIO_Init+0x104>)
 80022f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022fa:	f003 0304 	and.w	r3, r3, #4
 80022fe:	60bb      	str	r3, [r7, #8]
 8002300:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002302:	4b35      	ldr	r3, [pc, #212]	; (80023d8 <MX_GPIO_Init+0x104>)
 8002304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002306:	4a34      	ldr	r2, [pc, #208]	; (80023d8 <MX_GPIO_Init+0x104>)
 8002308:	f043 0301 	orr.w	r3, r3, #1
 800230c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800230e:	4b32      	ldr	r3, [pc, #200]	; (80023d8 <MX_GPIO_Init+0x104>)
 8002310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002312:	f003 0301 	and.w	r3, r3, #1
 8002316:	607b      	str	r3, [r7, #4]
 8002318:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800231a:	4b2f      	ldr	r3, [pc, #188]	; (80023d8 <MX_GPIO_Init+0x104>)
 800231c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800231e:	4a2e      	ldr	r2, [pc, #184]	; (80023d8 <MX_GPIO_Init+0x104>)
 8002320:	f043 0302 	orr.w	r3, r3, #2
 8002324:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002326:	4b2c      	ldr	r3, [pc, #176]	; (80023d8 <MX_GPIO_Init+0x104>)
 8002328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800232a:	f003 0302 	and.w	r3, r3, #2
 800232e:	603b      	str	r3, [r7, #0]
 8002330:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DS18B20_Pin|LED_Pin|RELAY_Pin, GPIO_PIN_RESET);
 8002332:	2200      	movs	r2, #0
 8002334:	2119      	movs	r1, #25
 8002336:	4829      	ldr	r0, [pc, #164]	; (80023dc <MX_GPIO_Init+0x108>)
 8002338:	f000 fd5a 	bl	8002df0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NEXT_Pin BEFORE_Pin INC_Pin DEC_Pin 
                           SEL_Pin */
  GPIO_InitStruct.Pin = NEXT_Pin|BEFORE_Pin|INC_Pin|DEC_Pin 
 800233c:	237a      	movs	r3, #122	; 0x7a
 800233e:	60fb      	str	r3, [r7, #12]
                          |SEL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002340:	4b27      	ldr	r3, [pc, #156]	; (80023e0 <MX_GPIO_Init+0x10c>)
 8002342:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002344:	2301      	movs	r3, #1
 8002346:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002348:	f107 030c 	add.w	r3, r7, #12
 800234c:	4619      	mov	r1, r3
 800234e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002352:	f000 fbcb 	bl	8002aec <HAL_GPIO_Init>

  /*Configure GPIO pin : DS18B20_Pin */
  GPIO_InitStruct.Pin = DS18B20_Pin;
 8002356:	2301      	movs	r3, #1
 8002358:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800235a:	2301      	movs	r3, #1
 800235c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235e:	2300      	movs	r3, #0
 8002360:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002362:	2301      	movs	r3, #1
 8002364:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DS18B20_GPIO_Port, &GPIO_InitStruct);
 8002366:	f107 030c 	add.w	r3, r7, #12
 800236a:	4619      	mov	r1, r3
 800236c:	481b      	ldr	r0, [pc, #108]	; (80023dc <MX_GPIO_Init+0x108>)
 800236e:	f000 fbbd 	bl	8002aec <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin RELAY_Pin */
  GPIO_InitStruct.Pin = LED_Pin|RELAY_Pin;
 8002372:	2318      	movs	r3, #24
 8002374:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002376:	2301      	movs	r3, #1
 8002378:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237a:	2300      	movs	r3, #0
 800237c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800237e:	2300      	movs	r3, #0
 8002380:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002382:	f107 030c 	add.w	r3, r7, #12
 8002386:	4619      	mov	r1, r3
 8002388:	4814      	ldr	r0, [pc, #80]	; (80023dc <MX_GPIO_Init+0x108>)
 800238a:	f000 fbaf 	bl	8002aec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800238e:	2200      	movs	r2, #0
 8002390:	2100      	movs	r1, #0
 8002392:	2007      	movs	r0, #7
 8002394:	f000 fb73 	bl	8002a7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002398:	2007      	movs	r0, #7
 800239a:	f000 fb8c 	bl	8002ab6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800239e:	2200      	movs	r2, #0
 80023a0:	2100      	movs	r1, #0
 80023a2:	2009      	movs	r0, #9
 80023a4:	f000 fb6b 	bl	8002a7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80023a8:	2009      	movs	r0, #9
 80023aa:	f000 fb84 	bl	8002ab6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80023ae:	2200      	movs	r2, #0
 80023b0:	2100      	movs	r1, #0
 80023b2:	200a      	movs	r0, #10
 80023b4:	f000 fb63 	bl	8002a7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80023b8:	200a      	movs	r0, #10
 80023ba:	f000 fb7c 	bl	8002ab6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80023be:	2200      	movs	r2, #0
 80023c0:	2100      	movs	r1, #0
 80023c2:	2017      	movs	r0, #23
 80023c4:	f000 fb5b 	bl	8002a7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80023c8:	2017      	movs	r0, #23
 80023ca:	f000 fb74 	bl	8002ab6 <HAL_NVIC_EnableIRQ>

}
 80023ce:	bf00      	nop
 80023d0:	3720      	adds	r7, #32
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	40021000 	.word	0x40021000
 80023dc:	48000400 	.word	0x48000400
 80023e0:	10210000 	.word	0x10210000

080023e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80023e8:	bf00      	nop
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
	...

080023f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023fa:	4b0f      	ldr	r3, [pc, #60]	; (8002438 <HAL_MspInit+0x44>)
 80023fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023fe:	4a0e      	ldr	r2, [pc, #56]	; (8002438 <HAL_MspInit+0x44>)
 8002400:	f043 0301 	orr.w	r3, r3, #1
 8002404:	6613      	str	r3, [r2, #96]	; 0x60
 8002406:	4b0c      	ldr	r3, [pc, #48]	; (8002438 <HAL_MspInit+0x44>)
 8002408:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	607b      	str	r3, [r7, #4]
 8002410:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002412:	4b09      	ldr	r3, [pc, #36]	; (8002438 <HAL_MspInit+0x44>)
 8002414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002416:	4a08      	ldr	r2, [pc, #32]	; (8002438 <HAL_MspInit+0x44>)
 8002418:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800241c:	6593      	str	r3, [r2, #88]	; 0x58
 800241e:	4b06      	ldr	r3, [pc, #24]	; (8002438 <HAL_MspInit+0x44>)
 8002420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002426:	603b      	str	r3, [r7, #0]
 8002428:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800242a:	bf00      	nop
 800242c:	370c      	adds	r7, #12
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	40021000 	.word	0x40021000

0800243c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b08a      	sub	sp, #40	; 0x28
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002444:	f107 0314 	add.w	r3, r7, #20
 8002448:	2200      	movs	r2, #0
 800244a:	601a      	str	r2, [r3, #0]
 800244c:	605a      	str	r2, [r3, #4]
 800244e:	609a      	str	r2, [r3, #8]
 8002450:	60da      	str	r2, [r3, #12]
 8002452:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a18      	ldr	r2, [pc, #96]	; (80024bc <HAL_I2C_MspInit+0x80>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d129      	bne.n	80024b2 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800245e:	4b18      	ldr	r3, [pc, #96]	; (80024c0 <HAL_I2C_MspInit+0x84>)
 8002460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002462:	4a17      	ldr	r2, [pc, #92]	; (80024c0 <HAL_I2C_MspInit+0x84>)
 8002464:	f043 0301 	orr.w	r3, r3, #1
 8002468:	64d3      	str	r3, [r2, #76]	; 0x4c
 800246a:	4b15      	ldr	r3, [pc, #84]	; (80024c0 <HAL_I2C_MspInit+0x84>)
 800246c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800246e:	f003 0301 	and.w	r3, r3, #1
 8002472:	613b      	str	r3, [r7, #16]
 8002474:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002476:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800247a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800247c:	2312      	movs	r3, #18
 800247e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002480:	2301      	movs	r3, #1
 8002482:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002484:	2303      	movs	r3, #3
 8002486:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002488:	2304      	movs	r3, #4
 800248a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800248c:	f107 0314 	add.w	r3, r7, #20
 8002490:	4619      	mov	r1, r3
 8002492:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002496:	f000 fb29 	bl	8002aec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800249a:	4b09      	ldr	r3, [pc, #36]	; (80024c0 <HAL_I2C_MspInit+0x84>)
 800249c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800249e:	4a08      	ldr	r2, [pc, #32]	; (80024c0 <HAL_I2C_MspInit+0x84>)
 80024a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80024a4:	6593      	str	r3, [r2, #88]	; 0x58
 80024a6:	4b06      	ldr	r3, [pc, #24]	; (80024c0 <HAL_I2C_MspInit+0x84>)
 80024a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024ae:	60fb      	str	r3, [r7, #12]
 80024b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80024b2:	bf00      	nop
 80024b4:	3728      	adds	r7, #40	; 0x28
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	40005400 	.word	0x40005400
 80024c0:	40021000 	.word	0x40021000

080024c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a16      	ldr	r2, [pc, #88]	; (800252c <HAL_TIM_Base_MspInit+0x68>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d10c      	bne.n	80024f0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80024d6:	4b16      	ldr	r3, [pc, #88]	; (8002530 <HAL_TIM_Base_MspInit+0x6c>)
 80024d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024da:	4a15      	ldr	r2, [pc, #84]	; (8002530 <HAL_TIM_Base_MspInit+0x6c>)
 80024dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80024e0:	6613      	str	r3, [r2, #96]	; 0x60
 80024e2:	4b13      	ldr	r3, [pc, #76]	; (8002530 <HAL_TIM_Base_MspInit+0x6c>)
 80024e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024ea:	60fb      	str	r3, [r7, #12]
 80024ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80024ee:	e018      	b.n	8002522 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024f8:	d113      	bne.n	8002522 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80024fa:	4b0d      	ldr	r3, [pc, #52]	; (8002530 <HAL_TIM_Base_MspInit+0x6c>)
 80024fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024fe:	4a0c      	ldr	r2, [pc, #48]	; (8002530 <HAL_TIM_Base_MspInit+0x6c>)
 8002500:	f043 0301 	orr.w	r3, r3, #1
 8002504:	6593      	str	r3, [r2, #88]	; 0x58
 8002506:	4b0a      	ldr	r3, [pc, #40]	; (8002530 <HAL_TIM_Base_MspInit+0x6c>)
 8002508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800250a:	f003 0301 	and.w	r3, r3, #1
 800250e:	60bb      	str	r3, [r7, #8]
 8002510:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002512:	2200      	movs	r2, #0
 8002514:	2100      	movs	r1, #0
 8002516:	201c      	movs	r0, #28
 8002518:	f000 fab1 	bl	8002a7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800251c:	201c      	movs	r0, #28
 800251e:	f000 faca 	bl	8002ab6 <HAL_NVIC_EnableIRQ>
}
 8002522:	bf00      	nop
 8002524:	3710      	adds	r7, #16
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	40012c00 	.word	0x40012c00
 8002530:	40021000 	.word	0x40021000

08002534 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b08a      	sub	sp, #40	; 0x28
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800253c:	f107 0314 	add.w	r3, r7, #20
 8002540:	2200      	movs	r2, #0
 8002542:	601a      	str	r2, [r3, #0]
 8002544:	605a      	str	r2, [r3, #4]
 8002546:	609a      	str	r2, [r3, #8]
 8002548:	60da      	str	r2, [r3, #12]
 800254a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a20      	ldr	r2, [pc, #128]	; (80025d4 <HAL_UART_MspInit+0xa0>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d13a      	bne.n	80025cc <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002556:	4b20      	ldr	r3, [pc, #128]	; (80025d8 <HAL_UART_MspInit+0xa4>)
 8002558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800255a:	4a1f      	ldr	r2, [pc, #124]	; (80025d8 <HAL_UART_MspInit+0xa4>)
 800255c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002560:	6593      	str	r3, [r2, #88]	; 0x58
 8002562:	4b1d      	ldr	r3, [pc, #116]	; (80025d8 <HAL_UART_MspInit+0xa4>)
 8002564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800256a:	613b      	str	r3, [r7, #16]
 800256c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800256e:	4b1a      	ldr	r3, [pc, #104]	; (80025d8 <HAL_UART_MspInit+0xa4>)
 8002570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002572:	4a19      	ldr	r2, [pc, #100]	; (80025d8 <HAL_UART_MspInit+0xa4>)
 8002574:	f043 0301 	orr.w	r3, r3, #1
 8002578:	64d3      	str	r3, [r2, #76]	; 0x4c
 800257a:	4b17      	ldr	r3, [pc, #92]	; (80025d8 <HAL_UART_MspInit+0xa4>)
 800257c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800257e:	f003 0301 	and.w	r3, r3, #1
 8002582:	60fb      	str	r3, [r7, #12]
 8002584:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002586:	2304      	movs	r3, #4
 8002588:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800258a:	2302      	movs	r3, #2
 800258c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258e:	2300      	movs	r3, #0
 8002590:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002592:	2303      	movs	r3, #3
 8002594:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002596:	2307      	movs	r3, #7
 8002598:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800259a:	f107 0314 	add.w	r3, r7, #20
 800259e:	4619      	mov	r1, r3
 80025a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025a4:	f000 faa2 	bl	8002aec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80025a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ae:	2302      	movs	r3, #2
 80025b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b2:	2300      	movs	r3, #0
 80025b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025b6:	2303      	movs	r3, #3
 80025b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80025ba:	2303      	movs	r3, #3
 80025bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025be:	f107 0314 	add.w	r3, r7, #20
 80025c2:	4619      	mov	r1, r3
 80025c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025c8:	f000 fa90 	bl	8002aec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80025cc:	bf00      	nop
 80025ce:	3728      	adds	r7, #40	; 0x28
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	40004400 	.word	0x40004400
 80025d8:	40021000 	.word	0x40021000

080025dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80025e0:	bf00      	nop
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr

080025ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025ea:	b480      	push	{r7}
 80025ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025ee:	e7fe      	b.n	80025ee <HardFault_Handler+0x4>

080025f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025f4:	e7fe      	b.n	80025f4 <MemManage_Handler+0x4>

080025f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025f6:	b480      	push	{r7}
 80025f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025fa:	e7fe      	b.n	80025fa <BusFault_Handler+0x4>

080025fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002600:	e7fe      	b.n	8002600 <UsageFault_Handler+0x4>

08002602 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002602:	b480      	push	{r7}
 8002604:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002606:	bf00      	nop
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002614:	bf00      	nop
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr

0800261e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800261e:	b480      	push	{r7}
 8002620:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002622:	bf00      	nop
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr

0800262c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002630:	f000 f90a 	bl	8002848 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002634:	bf00      	nop
 8002636:	bd80      	pop	{r7, pc}

08002638 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800263c:	2002      	movs	r0, #2
 800263e:	f000 fbef 	bl	8002e20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002642:	bf00      	nop
 8002644:	bd80      	pop	{r7, pc}

08002646 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002646:	b580      	push	{r7, lr}
 8002648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800264a:	2008      	movs	r0, #8
 800264c:	f000 fbe8 	bl	8002e20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002650:	bf00      	nop
 8002652:	bd80      	pop	{r7, pc}

08002654 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8002658:	2010      	movs	r0, #16
 800265a:	f000 fbe1 	bl	8002e20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800265e:	bf00      	nop
 8002660:	bd80      	pop	{r7, pc}

08002662 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002662:	b580      	push	{r7, lr}
 8002664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002666:	2020      	movs	r0, #32
 8002668:	f000 fbda 	bl	8002e20 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800266c:	2040      	movs	r0, #64	; 0x40
 800266e:	f000 fbd7 	bl	8002e20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002672:	bf00      	nop
 8002674:	bd80      	pop	{r7, pc}
	...

08002678 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800267c:	4802      	ldr	r0, [pc, #8]	; (8002688 <TIM2_IRQHandler+0x10>)
 800267e:	f002 f9e1 	bl	8004a44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002682:	bf00      	nop
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	20000308 	.word	0x20000308

0800268c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002694:	4b11      	ldr	r3, [pc, #68]	; (80026dc <_sbrk+0x50>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d102      	bne.n	80026a2 <_sbrk+0x16>
		heap_end = &end;
 800269c:	4b0f      	ldr	r3, [pc, #60]	; (80026dc <_sbrk+0x50>)
 800269e:	4a10      	ldr	r2, [pc, #64]	; (80026e0 <_sbrk+0x54>)
 80026a0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80026a2:	4b0e      	ldr	r3, [pc, #56]	; (80026dc <_sbrk+0x50>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80026a8:	4b0c      	ldr	r3, [pc, #48]	; (80026dc <_sbrk+0x50>)
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	4413      	add	r3, r2
 80026b0:	466a      	mov	r2, sp
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d907      	bls.n	80026c6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80026b6:	f003 f9dd 	bl	8005a74 <__errno>
 80026ba:	4602      	mov	r2, r0
 80026bc:	230c      	movs	r3, #12
 80026be:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80026c0:	f04f 33ff 	mov.w	r3, #4294967295
 80026c4:	e006      	b.n	80026d4 <_sbrk+0x48>
	}

	heap_end += incr;
 80026c6:	4b05      	ldr	r3, [pc, #20]	; (80026dc <_sbrk+0x50>)
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4413      	add	r3, r2
 80026ce:	4a03      	ldr	r2, [pc, #12]	; (80026dc <_sbrk+0x50>)
 80026d0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80026d2:	68fb      	ldr	r3, [r7, #12]
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3710      	adds	r7, #16
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	20000238 	.word	0x20000238
 80026e0:	200003f8 	.word	0x200003f8

080026e4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026e8:	4b17      	ldr	r3, [pc, #92]	; (8002748 <SystemInit+0x64>)
 80026ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ee:	4a16      	ldr	r2, [pc, #88]	; (8002748 <SystemInit+0x64>)
 80026f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80026f8:	4b14      	ldr	r3, [pc, #80]	; (800274c <SystemInit+0x68>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a13      	ldr	r2, [pc, #76]	; (800274c <SystemInit+0x68>)
 80026fe:	f043 0301 	orr.w	r3, r3, #1
 8002702:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002704:	4b11      	ldr	r3, [pc, #68]	; (800274c <SystemInit+0x68>)
 8002706:	2200      	movs	r2, #0
 8002708:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800270a:	4b10      	ldr	r3, [pc, #64]	; (800274c <SystemInit+0x68>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a0f      	ldr	r2, [pc, #60]	; (800274c <SystemInit+0x68>)
 8002710:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002714:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002718:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800271a:	4b0c      	ldr	r3, [pc, #48]	; (800274c <SystemInit+0x68>)
 800271c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002720:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002722:	4b0a      	ldr	r3, [pc, #40]	; (800274c <SystemInit+0x68>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a09      	ldr	r2, [pc, #36]	; (800274c <SystemInit+0x68>)
 8002728:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800272c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800272e:	4b07      	ldr	r3, [pc, #28]	; (800274c <SystemInit+0x68>)
 8002730:	2200      	movs	r2, #0
 8002732:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002734:	4b04      	ldr	r3, [pc, #16]	; (8002748 <SystemInit+0x64>)
 8002736:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800273a:	609a      	str	r2, [r3, #8]
#endif
}
 800273c:	bf00      	nop
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop
 8002748:	e000ed00 	.word	0xe000ed00
 800274c:	40021000 	.word	0x40021000

08002750 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002750:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002788 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002754:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002756:	e003      	b.n	8002760 <LoopCopyDataInit>

08002758 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002758:	4b0c      	ldr	r3, [pc, #48]	; (800278c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800275a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800275c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800275e:	3104      	adds	r1, #4

08002760 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002760:	480b      	ldr	r0, [pc, #44]	; (8002790 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002762:	4b0c      	ldr	r3, [pc, #48]	; (8002794 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002764:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002766:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002768:	d3f6      	bcc.n	8002758 <CopyDataInit>
	ldr	r2, =_sbss
 800276a:	4a0b      	ldr	r2, [pc, #44]	; (8002798 <LoopForever+0x12>)
	b	LoopFillZerobss
 800276c:	e002      	b.n	8002774 <LoopFillZerobss>

0800276e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800276e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002770:	f842 3b04 	str.w	r3, [r2], #4

08002774 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002774:	4b09      	ldr	r3, [pc, #36]	; (800279c <LoopForever+0x16>)
	cmp	r2, r3
 8002776:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002778:	d3f9      	bcc.n	800276e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800277a:	f7ff ffb3 	bl	80026e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800277e:	f003 f97f 	bl	8005a80 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002782:	f7ff fb9d 	bl	8001ec0 <main>

08002786 <LoopForever>:

LoopForever:
    b LoopForever
 8002786:	e7fe      	b.n	8002786 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002788:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 800278c:	080099e8 	.word	0x080099e8
	ldr	r0, =_sdata
 8002790:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002794:	20000200 	.word	0x20000200
	ldr	r2, =_sbss
 8002798:	20000200 	.word	0x20000200
	ldr	r3, = _ebss
 800279c:	200003f8 	.word	0x200003f8

080027a0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80027a0:	e7fe      	b.n	80027a0 <ADC1_IRQHandler>

080027a2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027a2:	b580      	push	{r7, lr}
 80027a4:	b082      	sub	sp, #8
 80027a6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80027a8:	2300      	movs	r3, #0
 80027aa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027ac:	2003      	movs	r0, #3
 80027ae:	f000 f95b 	bl	8002a68 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80027b2:	2000      	movs	r0, #0
 80027b4:	f000 f80e 	bl	80027d4 <HAL_InitTick>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d002      	beq.n	80027c4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	71fb      	strb	r3, [r7, #7]
 80027c2:	e001      	b.n	80027c8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80027c4:	f7ff fe16 	bl	80023f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80027c8:	79fb      	ldrb	r3, [r7, #7]
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3708      	adds	r7, #8
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
	...

080027d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80027dc:	2300      	movs	r3, #0
 80027de:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80027e0:	4b16      	ldr	r3, [pc, #88]	; (800283c <HAL_InitTick+0x68>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d022      	beq.n	800282e <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80027e8:	4b15      	ldr	r3, [pc, #84]	; (8002840 <HAL_InitTick+0x6c>)
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	4b13      	ldr	r3, [pc, #76]	; (800283c <HAL_InitTick+0x68>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80027f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80027f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80027fc:	4618      	mov	r0, r3
 80027fe:	f000 f968 	bl	8002ad2 <HAL_SYSTICK_Config>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d10f      	bne.n	8002828 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2b0f      	cmp	r3, #15
 800280c:	d809      	bhi.n	8002822 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800280e:	2200      	movs	r2, #0
 8002810:	6879      	ldr	r1, [r7, #4]
 8002812:	f04f 30ff 	mov.w	r0, #4294967295
 8002816:	f000 f932 	bl	8002a7e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800281a:	4a0a      	ldr	r2, [pc, #40]	; (8002844 <HAL_InitTick+0x70>)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6013      	str	r3, [r2, #0]
 8002820:	e007      	b.n	8002832 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	73fb      	strb	r3, [r7, #15]
 8002826:	e004      	b.n	8002832 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	73fb      	strb	r3, [r7, #15]
 800282c:	e001      	b.n	8002832 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002832:	7bfb      	ldrb	r3, [r7, #15]
}
 8002834:	4618      	mov	r0, r3
 8002836:	3710      	adds	r7, #16
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	2000002c 	.word	0x2000002c
 8002840:	20000024 	.word	0x20000024
 8002844:	20000028 	.word	0x20000028

08002848 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002848:	b480      	push	{r7}
 800284a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800284c:	4b05      	ldr	r3, [pc, #20]	; (8002864 <HAL_IncTick+0x1c>)
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	4b05      	ldr	r3, [pc, #20]	; (8002868 <HAL_IncTick+0x20>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4413      	add	r3, r2
 8002856:	4a03      	ldr	r2, [pc, #12]	; (8002864 <HAL_IncTick+0x1c>)
 8002858:	6013      	str	r3, [r2, #0]
}
 800285a:	bf00      	nop
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr
 8002864:	200003f0 	.word	0x200003f0
 8002868:	2000002c 	.word	0x2000002c

0800286c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
  return uwTick;
 8002870:	4b03      	ldr	r3, [pc, #12]	; (8002880 <HAL_GetTick+0x14>)
 8002872:	681b      	ldr	r3, [r3, #0]
}
 8002874:	4618      	mov	r0, r3
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	200003f0 	.word	0x200003f0

08002884 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800288c:	f7ff ffee 	bl	800286c <HAL_GetTick>
 8002890:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800289c:	d004      	beq.n	80028a8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800289e:	4b09      	ldr	r3, [pc, #36]	; (80028c4 <HAL_Delay+0x40>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	68fa      	ldr	r2, [r7, #12]
 80028a4:	4413      	add	r3, r2
 80028a6:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80028a8:	bf00      	nop
 80028aa:	f7ff ffdf 	bl	800286c <HAL_GetTick>
 80028ae:	4602      	mov	r2, r0
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	68fa      	ldr	r2, [r7, #12]
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d8f7      	bhi.n	80028aa <HAL_Delay+0x26>
  {
  }
}
 80028ba:	bf00      	nop
 80028bc:	3710      	adds	r7, #16
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	2000002c 	.word	0x2000002c

080028c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b085      	sub	sp, #20
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f003 0307 	and.w	r3, r3, #7
 80028d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028d8:	4b0c      	ldr	r3, [pc, #48]	; (800290c <__NVIC_SetPriorityGrouping+0x44>)
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028de:	68ba      	ldr	r2, [r7, #8]
 80028e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028e4:	4013      	ands	r3, r2
 80028e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028fa:	4a04      	ldr	r2, [pc, #16]	; (800290c <__NVIC_SetPriorityGrouping+0x44>)
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	60d3      	str	r3, [r2, #12]
}
 8002900:	bf00      	nop
 8002902:	3714      	adds	r7, #20
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr
 800290c:	e000ed00 	.word	0xe000ed00

08002910 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002914:	4b04      	ldr	r3, [pc, #16]	; (8002928 <__NVIC_GetPriorityGrouping+0x18>)
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	0a1b      	lsrs	r3, r3, #8
 800291a:	f003 0307 	and.w	r3, r3, #7
}
 800291e:	4618      	mov	r0, r3
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr
 8002928:	e000ed00 	.word	0xe000ed00

0800292c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	4603      	mov	r3, r0
 8002934:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800293a:	2b00      	cmp	r3, #0
 800293c:	db0b      	blt.n	8002956 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800293e:	79fb      	ldrb	r3, [r7, #7]
 8002940:	f003 021f 	and.w	r2, r3, #31
 8002944:	4907      	ldr	r1, [pc, #28]	; (8002964 <__NVIC_EnableIRQ+0x38>)
 8002946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800294a:	095b      	lsrs	r3, r3, #5
 800294c:	2001      	movs	r0, #1
 800294e:	fa00 f202 	lsl.w	r2, r0, r2
 8002952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002956:	bf00      	nop
 8002958:	370c      	adds	r7, #12
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	e000e100 	.word	0xe000e100

08002968 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	4603      	mov	r3, r0
 8002970:	6039      	str	r1, [r7, #0]
 8002972:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002978:	2b00      	cmp	r3, #0
 800297a:	db0a      	blt.n	8002992 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	b2da      	uxtb	r2, r3
 8002980:	490c      	ldr	r1, [pc, #48]	; (80029b4 <__NVIC_SetPriority+0x4c>)
 8002982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002986:	0112      	lsls	r2, r2, #4
 8002988:	b2d2      	uxtb	r2, r2
 800298a:	440b      	add	r3, r1
 800298c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002990:	e00a      	b.n	80029a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	b2da      	uxtb	r2, r3
 8002996:	4908      	ldr	r1, [pc, #32]	; (80029b8 <__NVIC_SetPriority+0x50>)
 8002998:	79fb      	ldrb	r3, [r7, #7]
 800299a:	f003 030f 	and.w	r3, r3, #15
 800299e:	3b04      	subs	r3, #4
 80029a0:	0112      	lsls	r2, r2, #4
 80029a2:	b2d2      	uxtb	r2, r2
 80029a4:	440b      	add	r3, r1
 80029a6:	761a      	strb	r2, [r3, #24]
}
 80029a8:	bf00      	nop
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr
 80029b4:	e000e100 	.word	0xe000e100
 80029b8:	e000ed00 	.word	0xe000ed00

080029bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029bc:	b480      	push	{r7}
 80029be:	b089      	sub	sp, #36	; 0x24
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	60b9      	str	r1, [r7, #8]
 80029c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f003 0307 	and.w	r3, r3, #7
 80029ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	f1c3 0307 	rsb	r3, r3, #7
 80029d6:	2b04      	cmp	r3, #4
 80029d8:	bf28      	it	cs
 80029da:	2304      	movcs	r3, #4
 80029dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	3304      	adds	r3, #4
 80029e2:	2b06      	cmp	r3, #6
 80029e4:	d902      	bls.n	80029ec <NVIC_EncodePriority+0x30>
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	3b03      	subs	r3, #3
 80029ea:	e000      	b.n	80029ee <NVIC_EncodePriority+0x32>
 80029ec:	2300      	movs	r3, #0
 80029ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029f0:	f04f 32ff 	mov.w	r2, #4294967295
 80029f4:	69bb      	ldr	r3, [r7, #24]
 80029f6:	fa02 f303 	lsl.w	r3, r2, r3
 80029fa:	43da      	mvns	r2, r3
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	401a      	ands	r2, r3
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a04:	f04f 31ff 	mov.w	r1, #4294967295
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a0e:	43d9      	mvns	r1, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a14:	4313      	orrs	r3, r2
         );
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3724      	adds	r7, #36	; 0x24
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
	...

08002a24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	3b01      	subs	r3, #1
 8002a30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a34:	d301      	bcc.n	8002a3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a36:	2301      	movs	r3, #1
 8002a38:	e00f      	b.n	8002a5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a3a:	4a0a      	ldr	r2, [pc, #40]	; (8002a64 <SysTick_Config+0x40>)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	3b01      	subs	r3, #1
 8002a40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a42:	210f      	movs	r1, #15
 8002a44:	f04f 30ff 	mov.w	r0, #4294967295
 8002a48:	f7ff ff8e 	bl	8002968 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a4c:	4b05      	ldr	r3, [pc, #20]	; (8002a64 <SysTick_Config+0x40>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a52:	4b04      	ldr	r3, [pc, #16]	; (8002a64 <SysTick_Config+0x40>)
 8002a54:	2207      	movs	r2, #7
 8002a56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3708      	adds	r7, #8
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	e000e010 	.word	0xe000e010

08002a68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f7ff ff29 	bl	80028c8 <__NVIC_SetPriorityGrouping>
}
 8002a76:	bf00      	nop
 8002a78:	3708      	adds	r7, #8
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	b086      	sub	sp, #24
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	4603      	mov	r3, r0
 8002a86:	60b9      	str	r1, [r7, #8]
 8002a88:	607a      	str	r2, [r7, #4]
 8002a8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a90:	f7ff ff3e 	bl	8002910 <__NVIC_GetPriorityGrouping>
 8002a94:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	68b9      	ldr	r1, [r7, #8]
 8002a9a:	6978      	ldr	r0, [r7, #20]
 8002a9c:	f7ff ff8e 	bl	80029bc <NVIC_EncodePriority>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002aa6:	4611      	mov	r1, r2
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7ff ff5d 	bl	8002968 <__NVIC_SetPriority>
}
 8002aae:	bf00      	nop
 8002ab0:	3718      	adds	r7, #24
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}

08002ab6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	b082      	sub	sp, #8
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	4603      	mov	r3, r0
 8002abe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ac0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7ff ff31 	bl	800292c <__NVIC_EnableIRQ>
}
 8002aca:	bf00      	nop
 8002acc:	3708      	adds	r7, #8
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}

08002ad2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	b082      	sub	sp, #8
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f7ff ffa2 	bl	8002a24 <SysTick_Config>
 8002ae0:	4603      	mov	r3, r0
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3708      	adds	r7, #8
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
	...

08002aec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b087      	sub	sp, #28
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002af6:	2300      	movs	r3, #0
 8002af8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002afa:	e148      	b.n	8002d8e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	2101      	movs	r1, #1
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	fa01 f303 	lsl.w	r3, r1, r3
 8002b08:	4013      	ands	r3, r2
 8002b0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	f000 813a 	beq.w	8002d88 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d00b      	beq.n	8002b34 <HAL_GPIO_Init+0x48>
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d007      	beq.n	8002b34 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b28:	2b11      	cmp	r3, #17
 8002b2a:	d003      	beq.n	8002b34 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	2b12      	cmp	r3, #18
 8002b32:	d130      	bne.n	8002b96 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	005b      	lsls	r3, r3, #1
 8002b3e:	2203      	movs	r2, #3
 8002b40:	fa02 f303 	lsl.w	r3, r2, r3
 8002b44:	43db      	mvns	r3, r3
 8002b46:	693a      	ldr	r2, [r7, #16]
 8002b48:	4013      	ands	r3, r2
 8002b4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	68da      	ldr	r2, [r3, #12]
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	005b      	lsls	r3, r3, #1
 8002b54:	fa02 f303 	lsl.w	r3, r2, r3
 8002b58:	693a      	ldr	r2, [r7, #16]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	693a      	ldr	r2, [r7, #16]
 8002b62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b72:	43db      	mvns	r3, r3
 8002b74:	693a      	ldr	r2, [r7, #16]
 8002b76:	4013      	ands	r3, r2
 8002b78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	091b      	lsrs	r3, r3, #4
 8002b80:	f003 0201 	and.w	r2, r3, #1
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8a:	693a      	ldr	r2, [r7, #16]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	693a      	ldr	r2, [r7, #16]
 8002b94:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	005b      	lsls	r3, r3, #1
 8002ba0:	2203      	movs	r2, #3
 8002ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba6:	43db      	mvns	r3, r3
 8002ba8:	693a      	ldr	r2, [r7, #16]
 8002baa:	4013      	ands	r3, r2
 8002bac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	689a      	ldr	r2, [r3, #8]
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	005b      	lsls	r3, r3, #1
 8002bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bba:	693a      	ldr	r2, [r7, #16]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	693a      	ldr	r2, [r7, #16]
 8002bc4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d003      	beq.n	8002bd6 <HAL_GPIO_Init+0xea>
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	2b12      	cmp	r3, #18
 8002bd4:	d123      	bne.n	8002c1e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	08da      	lsrs	r2, r3, #3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	3208      	adds	r2, #8
 8002bde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002be2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	f003 0307 	and.w	r3, r3, #7
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	220f      	movs	r2, #15
 8002bee:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf2:	43db      	mvns	r3, r3
 8002bf4:	693a      	ldr	r2, [r7, #16]
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	691a      	ldr	r2, [r3, #16]
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	f003 0307 	and.w	r3, r3, #7
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0a:	693a      	ldr	r2, [r7, #16]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	08da      	lsrs	r2, r3, #3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	3208      	adds	r2, #8
 8002c18:	6939      	ldr	r1, [r7, #16]
 8002c1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	005b      	lsls	r3, r3, #1
 8002c28:	2203      	movs	r2, #3
 8002c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2e:	43db      	mvns	r3, r3
 8002c30:	693a      	ldr	r2, [r7, #16]
 8002c32:	4013      	ands	r3, r2
 8002c34:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	f003 0203 	and.w	r2, r3, #3
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	005b      	lsls	r3, r3, #1
 8002c42:	fa02 f303 	lsl.w	r3, r2, r3
 8002c46:	693a      	ldr	r2, [r7, #16]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	693a      	ldr	r2, [r7, #16]
 8002c50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	f000 8094 	beq.w	8002d88 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c60:	4b52      	ldr	r3, [pc, #328]	; (8002dac <HAL_GPIO_Init+0x2c0>)
 8002c62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c64:	4a51      	ldr	r2, [pc, #324]	; (8002dac <HAL_GPIO_Init+0x2c0>)
 8002c66:	f043 0301 	orr.w	r3, r3, #1
 8002c6a:	6613      	str	r3, [r2, #96]	; 0x60
 8002c6c:	4b4f      	ldr	r3, [pc, #316]	; (8002dac <HAL_GPIO_Init+0x2c0>)
 8002c6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c70:	f003 0301 	and.w	r3, r3, #1
 8002c74:	60bb      	str	r3, [r7, #8]
 8002c76:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002c78:	4a4d      	ldr	r2, [pc, #308]	; (8002db0 <HAL_GPIO_Init+0x2c4>)
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	089b      	lsrs	r3, r3, #2
 8002c7e:	3302      	adds	r3, #2
 8002c80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c84:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	f003 0303 	and.w	r3, r3, #3
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	220f      	movs	r2, #15
 8002c90:	fa02 f303 	lsl.w	r3, r2, r3
 8002c94:	43db      	mvns	r3, r3
 8002c96:	693a      	ldr	r2, [r7, #16]
 8002c98:	4013      	ands	r3, r2
 8002c9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002ca2:	d00d      	beq.n	8002cc0 <HAL_GPIO_Init+0x1d4>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	4a43      	ldr	r2, [pc, #268]	; (8002db4 <HAL_GPIO_Init+0x2c8>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d007      	beq.n	8002cbc <HAL_GPIO_Init+0x1d0>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	4a42      	ldr	r2, [pc, #264]	; (8002db8 <HAL_GPIO_Init+0x2cc>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d101      	bne.n	8002cb8 <HAL_GPIO_Init+0x1cc>
 8002cb4:	2302      	movs	r3, #2
 8002cb6:	e004      	b.n	8002cc2 <HAL_GPIO_Init+0x1d6>
 8002cb8:	2307      	movs	r3, #7
 8002cba:	e002      	b.n	8002cc2 <HAL_GPIO_Init+0x1d6>
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e000      	b.n	8002cc2 <HAL_GPIO_Init+0x1d6>
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	697a      	ldr	r2, [r7, #20]
 8002cc4:	f002 0203 	and.w	r2, r2, #3
 8002cc8:	0092      	lsls	r2, r2, #2
 8002cca:	4093      	lsls	r3, r2
 8002ccc:	693a      	ldr	r2, [r7, #16]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002cd2:	4937      	ldr	r1, [pc, #220]	; (8002db0 <HAL_GPIO_Init+0x2c4>)
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	089b      	lsrs	r3, r3, #2
 8002cd8:	3302      	adds	r3, #2
 8002cda:	693a      	ldr	r2, [r7, #16]
 8002cdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002ce0:	4b36      	ldr	r3, [pc, #216]	; (8002dbc <HAL_GPIO_Init+0x2d0>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	43db      	mvns	r3, r3
 8002cea:	693a      	ldr	r2, [r7, #16]
 8002cec:	4013      	ands	r3, r2
 8002cee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d003      	beq.n	8002d04 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002cfc:	693a      	ldr	r2, [r7, #16]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002d04:	4a2d      	ldr	r2, [pc, #180]	; (8002dbc <HAL_GPIO_Init+0x2d0>)
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002d0a:	4b2c      	ldr	r3, [pc, #176]	; (8002dbc <HAL_GPIO_Init+0x2d0>)
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	43db      	mvns	r3, r3
 8002d14:	693a      	ldr	r2, [r7, #16]
 8002d16:	4013      	ands	r3, r2
 8002d18:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d003      	beq.n	8002d2e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002d26:	693a      	ldr	r2, [r7, #16]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002d2e:	4a23      	ldr	r2, [pc, #140]	; (8002dbc <HAL_GPIO_Init+0x2d0>)
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002d34:	4b21      	ldr	r3, [pc, #132]	; (8002dbc <HAL_GPIO_Init+0x2d0>)
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	43db      	mvns	r3, r3
 8002d3e:	693a      	ldr	r2, [r7, #16]
 8002d40:	4013      	ands	r3, r2
 8002d42:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d003      	beq.n	8002d58 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002d50:	693a      	ldr	r2, [r7, #16]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002d58:	4a18      	ldr	r2, [pc, #96]	; (8002dbc <HAL_GPIO_Init+0x2d0>)
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002d5e:	4b17      	ldr	r3, [pc, #92]	; (8002dbc <HAL_GPIO_Init+0x2d0>)
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	43db      	mvns	r3, r3
 8002d68:	693a      	ldr	r2, [r7, #16]
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d003      	beq.n	8002d82 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002d7a:	693a      	ldr	r2, [r7, #16]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002d82:	4a0e      	ldr	r2, [pc, #56]	; (8002dbc <HAL_GPIO_Init+0x2d0>)
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	fa22 f303 	lsr.w	r3, r2, r3
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	f47f aeaf 	bne.w	8002afc <HAL_GPIO_Init+0x10>
  }
}
 8002d9e:	bf00      	nop
 8002da0:	371c      	adds	r7, #28
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr
 8002daa:	bf00      	nop
 8002dac:	40021000 	.word	0x40021000
 8002db0:	40010000 	.word	0x40010000
 8002db4:	48000400 	.word	0x48000400
 8002db8:	48000800 	.word	0x48000800
 8002dbc:	40010400 	.word	0x40010400

08002dc0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b085      	sub	sp, #20
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	460b      	mov	r3, r1
 8002dca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	691a      	ldr	r2, [r3, #16]
 8002dd0:	887b      	ldrh	r3, [r7, #2]
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d002      	beq.n	8002dde <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	73fb      	strb	r3, [r7, #15]
 8002ddc:	e001      	b.n	8002de2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002dde:	2300      	movs	r3, #0
 8002de0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002de2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3714      	adds	r7, #20
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	460b      	mov	r3, r1
 8002dfa:	807b      	strh	r3, [r7, #2]
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e00:	787b      	ldrb	r3, [r7, #1]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d003      	beq.n	8002e0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e06:	887a      	ldrh	r2, [r7, #2]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e0c:	e002      	b.n	8002e14 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e0e:	887a      	ldrh	r2, [r7, #2]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002e14:	bf00      	nop
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	4603      	mov	r3, r0
 8002e28:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002e2a:	4b0d      	ldr	r3, [pc, #52]	; (8002e60 <HAL_GPIO_EXTI_IRQHandler+0x40>)
 8002e2c:	695a      	ldr	r2, [r3, #20]
 8002e2e:	88fb      	ldrh	r3, [r7, #6]
 8002e30:	4013      	ands	r3, r2
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d00f      	beq.n	8002e56 <HAL_GPIO_EXTI_IRQHandler+0x36>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e36:	4a0a      	ldr	r2, [pc, #40]	; (8002e60 <HAL_GPIO_EXTI_IRQHandler+0x40>)
 8002e38:	88fb      	ldrh	r3, [r7, #6]
 8002e3a:	6153      	str	r3, [r2, #20]
    if(HAL_GPIO_ReadPin(GPIOA, GPIO_Pin)==0)
 8002e3c:	88fb      	ldrh	r3, [r7, #6]
 8002e3e:	4619      	mov	r1, r3
 8002e40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e44:	f7ff ffbc 	bl	8002dc0 <HAL_GPIO_ReadPin>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d103      	bne.n	8002e56 <HAL_GPIO_EXTI_IRQHandler+0x36>
   		    	HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e4e:	88fb      	ldrh	r3, [r7, #6]
 8002e50:	4618      	mov	r0, r3
 8002e52:	f7fe fdff 	bl	8001a54 <HAL_GPIO_EXTI_Callback>
  }
}
 8002e56:	bf00      	nop
 8002e58:	3708      	adds	r7, #8
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	40010400 	.word	0x40010400

08002e64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d101      	bne.n	8002e76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e081      	b.n	8002f7a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d106      	bne.n	8002e90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f7ff fad6 	bl	800243c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2224      	movs	r2, #36	; 0x24
 8002e94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f022 0201 	bic.w	r2, r2, #1
 8002ea6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	685a      	ldr	r2, [r3, #4]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002eb4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	689a      	ldr	r2, [r3, #8]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ec4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d107      	bne.n	8002ede <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	689a      	ldr	r2, [r3, #8]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002eda:	609a      	str	r2, [r3, #8]
 8002edc:	e006      	b.n	8002eec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	689a      	ldr	r2, [r3, #8]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002eea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d104      	bne.n	8002efe <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002efc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	6812      	ldr	r2, [r2, #0]
 8002f08:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f10:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	68da      	ldr	r2, [r3, #12]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f20:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	691a      	ldr	r2, [r3, #16]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	695b      	ldr	r3, [r3, #20]
 8002f2a:	ea42 0103 	orr.w	r1, r2, r3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	699b      	ldr	r3, [r3, #24]
 8002f32:	021a      	lsls	r2, r3, #8
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	430a      	orrs	r2, r1
 8002f3a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	69d9      	ldr	r1, [r3, #28]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6a1a      	ldr	r2, [r3, #32]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	430a      	orrs	r2, r1
 8002f4a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f042 0201 	orr.w	r2, r2, #1
 8002f5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2220      	movs	r2, #32
 8002f66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3708      	adds	r7, #8
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
	...

08002f84 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b088      	sub	sp, #32
 8002f88:	af02      	add	r7, sp, #8
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	607a      	str	r2, [r7, #4]
 8002f8e:	461a      	mov	r2, r3
 8002f90:	460b      	mov	r3, r1
 8002f92:	817b      	strh	r3, [r7, #10]
 8002f94:	4613      	mov	r3, r2
 8002f96:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	2b20      	cmp	r3, #32
 8002fa2:	f040 80da 	bne.w	800315a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d101      	bne.n	8002fb4 <HAL_I2C_Master_Transmit+0x30>
 8002fb0:	2302      	movs	r3, #2
 8002fb2:	e0d3      	b.n	800315c <HAL_I2C_Master_Transmit+0x1d8>
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002fbc:	f7ff fc56 	bl	800286c <HAL_GetTick>
 8002fc0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	9300      	str	r3, [sp, #0]
 8002fc6:	2319      	movs	r3, #25
 8002fc8:	2201      	movs	r2, #1
 8002fca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002fce:	68f8      	ldr	r0, [r7, #12]
 8002fd0:	f000 f8f0 	bl	80031b4 <I2C_WaitOnFlagUntilTimeout>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d001      	beq.n	8002fde <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e0be      	b.n	800315c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2221      	movs	r2, #33	; 0x21
 8002fe2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2210      	movs	r2, #16
 8002fea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	893a      	ldrh	r2, [r7, #8]
 8002ffe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2200      	movs	r2, #0
 8003004:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800300a:	b29b      	uxth	r3, r3
 800300c:	2bff      	cmp	r3, #255	; 0xff
 800300e:	d90e      	bls.n	800302e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	22ff      	movs	r2, #255	; 0xff
 8003014:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800301a:	b2da      	uxtb	r2, r3
 800301c:	8979      	ldrh	r1, [r7, #10]
 800301e:	4b51      	ldr	r3, [pc, #324]	; (8003164 <HAL_I2C_Master_Transmit+0x1e0>)
 8003020:	9300      	str	r3, [sp, #0]
 8003022:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003026:	68f8      	ldr	r0, [r7, #12]
 8003028:	f000 f9e6 	bl	80033f8 <I2C_TransferConfig>
 800302c:	e06c      	b.n	8003108 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003032:	b29a      	uxth	r2, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800303c:	b2da      	uxtb	r2, r3
 800303e:	8979      	ldrh	r1, [r7, #10]
 8003040:	4b48      	ldr	r3, [pc, #288]	; (8003164 <HAL_I2C_Master_Transmit+0x1e0>)
 8003042:	9300      	str	r3, [sp, #0]
 8003044:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003048:	68f8      	ldr	r0, [r7, #12]
 800304a:	f000 f9d5 	bl	80033f8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800304e:	e05b      	b.n	8003108 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003050:	697a      	ldr	r2, [r7, #20]
 8003052:	6a39      	ldr	r1, [r7, #32]
 8003054:	68f8      	ldr	r0, [r7, #12]
 8003056:	f000 f8ed 	bl	8003234 <I2C_WaitOnTXISFlagUntilTimeout>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d001      	beq.n	8003064 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e07b      	b.n	800315c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003068:	781a      	ldrb	r2, [r3, #0]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003074:	1c5a      	adds	r2, r3, #1
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800307e:	b29b      	uxth	r3, r3
 8003080:	3b01      	subs	r3, #1
 8003082:	b29a      	uxth	r2, r3
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800308c:	3b01      	subs	r3, #1
 800308e:	b29a      	uxth	r2, r3
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003098:	b29b      	uxth	r3, r3
 800309a:	2b00      	cmp	r3, #0
 800309c:	d034      	beq.n	8003108 <HAL_I2C_Master_Transmit+0x184>
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d130      	bne.n	8003108 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	9300      	str	r3, [sp, #0]
 80030aa:	6a3b      	ldr	r3, [r7, #32]
 80030ac:	2200      	movs	r2, #0
 80030ae:	2180      	movs	r1, #128	; 0x80
 80030b0:	68f8      	ldr	r0, [r7, #12]
 80030b2:	f000 f87f 	bl	80031b4 <I2C_WaitOnFlagUntilTimeout>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d001      	beq.n	80030c0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e04d      	b.n	800315c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	2bff      	cmp	r3, #255	; 0xff
 80030c8:	d90e      	bls.n	80030e8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	22ff      	movs	r2, #255	; 0xff
 80030ce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030d4:	b2da      	uxtb	r2, r3
 80030d6:	8979      	ldrh	r1, [r7, #10]
 80030d8:	2300      	movs	r3, #0
 80030da:	9300      	str	r3, [sp, #0]
 80030dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030e0:	68f8      	ldr	r0, [r7, #12]
 80030e2:	f000 f989 	bl	80033f8 <I2C_TransferConfig>
 80030e6:	e00f      	b.n	8003108 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ec:	b29a      	uxth	r2, r3
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030f6:	b2da      	uxtb	r2, r3
 80030f8:	8979      	ldrh	r1, [r7, #10]
 80030fa:	2300      	movs	r3, #0
 80030fc:	9300      	str	r3, [sp, #0]
 80030fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003102:	68f8      	ldr	r0, [r7, #12]
 8003104:	f000 f978 	bl	80033f8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800310c:	b29b      	uxth	r3, r3
 800310e:	2b00      	cmp	r3, #0
 8003110:	d19e      	bne.n	8003050 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003112:	697a      	ldr	r2, [r7, #20]
 8003114:	6a39      	ldr	r1, [r7, #32]
 8003116:	68f8      	ldr	r0, [r7, #12]
 8003118:	f000 f8cc 	bl	80032b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d001      	beq.n	8003126 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e01a      	b.n	800315c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2220      	movs	r2, #32
 800312c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	6859      	ldr	r1, [r3, #4]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	4b0b      	ldr	r3, [pc, #44]	; (8003168 <HAL_I2C_Master_Transmit+0x1e4>)
 800313a:	400b      	ands	r3, r1
 800313c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2220      	movs	r2, #32
 8003142:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2200      	movs	r2, #0
 800314a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003156:	2300      	movs	r3, #0
 8003158:	e000      	b.n	800315c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800315a:	2302      	movs	r3, #2
  }
}
 800315c:	4618      	mov	r0, r3
 800315e:	3718      	adds	r7, #24
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}
 8003164:	80002000 	.word	0x80002000
 8003168:	fe00e800 	.word	0xfe00e800

0800316c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	699b      	ldr	r3, [r3, #24]
 800317a:	f003 0302 	and.w	r3, r3, #2
 800317e:	2b02      	cmp	r3, #2
 8003180:	d103      	bne.n	800318a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	2200      	movs	r2, #0
 8003188:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	699b      	ldr	r3, [r3, #24]
 8003190:	f003 0301 	and.w	r3, r3, #1
 8003194:	2b01      	cmp	r3, #1
 8003196:	d007      	beq.n	80031a8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	699a      	ldr	r2, [r3, #24]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f042 0201 	orr.w	r2, r2, #1
 80031a6:	619a      	str	r2, [r3, #24]
  }
}
 80031a8:	bf00      	nop
 80031aa:	370c      	adds	r7, #12
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b084      	sub	sp, #16
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	60f8      	str	r0, [r7, #12]
 80031bc:	60b9      	str	r1, [r7, #8]
 80031be:	603b      	str	r3, [r7, #0]
 80031c0:	4613      	mov	r3, r2
 80031c2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031c4:	e022      	b.n	800320c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031cc:	d01e      	beq.n	800320c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031ce:	f7ff fb4d 	bl	800286c <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	683a      	ldr	r2, [r7, #0]
 80031da:	429a      	cmp	r2, r3
 80031dc:	d302      	bcc.n	80031e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d113      	bne.n	800320c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031e8:	f043 0220 	orr.w	r2, r3, #32
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2220      	movs	r2, #32
 80031f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2200      	movs	r2, #0
 8003204:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e00f      	b.n	800322c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	699a      	ldr	r2, [r3, #24]
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	4013      	ands	r3, r2
 8003216:	68ba      	ldr	r2, [r7, #8]
 8003218:	429a      	cmp	r2, r3
 800321a:	bf0c      	ite	eq
 800321c:	2301      	moveq	r3, #1
 800321e:	2300      	movne	r3, #0
 8003220:	b2db      	uxtb	r3, r3
 8003222:	461a      	mov	r2, r3
 8003224:	79fb      	ldrb	r3, [r7, #7]
 8003226:	429a      	cmp	r2, r3
 8003228:	d0cd      	beq.n	80031c6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800322a:	2300      	movs	r3, #0
}
 800322c:	4618      	mov	r0, r3
 800322e:	3710      	adds	r7, #16
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b084      	sub	sp, #16
 8003238:	af00      	add	r7, sp, #0
 800323a:	60f8      	str	r0, [r7, #12]
 800323c:	60b9      	str	r1, [r7, #8]
 800323e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003240:	e02c      	b.n	800329c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	68b9      	ldr	r1, [r7, #8]
 8003246:	68f8      	ldr	r0, [r7, #12]
 8003248:	f000 f870 	bl	800332c <I2C_IsAcknowledgeFailed>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d001      	beq.n	8003256 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e02a      	b.n	80032ac <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800325c:	d01e      	beq.n	800329c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800325e:	f7ff fb05 	bl	800286c <HAL_GetTick>
 8003262:	4602      	mov	r2, r0
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	68ba      	ldr	r2, [r7, #8]
 800326a:	429a      	cmp	r2, r3
 800326c:	d302      	bcc.n	8003274 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d113      	bne.n	800329c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003278:	f043 0220 	orr.w	r2, r3, #32
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2220      	movs	r2, #32
 8003284:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2200      	movs	r2, #0
 800328c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e007      	b.n	80032ac <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	699b      	ldr	r3, [r3, #24]
 80032a2:	f003 0302 	and.w	r3, r3, #2
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d1cb      	bne.n	8003242 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80032aa:	2300      	movs	r3, #0
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3710      	adds	r7, #16
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	60f8      	str	r0, [r7, #12]
 80032bc:	60b9      	str	r1, [r7, #8]
 80032be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032c0:	e028      	b.n	8003314 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	68b9      	ldr	r1, [r7, #8]
 80032c6:	68f8      	ldr	r0, [r7, #12]
 80032c8:	f000 f830 	bl	800332c <I2C_IsAcknowledgeFailed>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d001      	beq.n	80032d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e026      	b.n	8003324 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032d6:	f7ff fac9 	bl	800286c <HAL_GetTick>
 80032da:	4602      	mov	r2, r0
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	68ba      	ldr	r2, [r7, #8]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d302      	bcc.n	80032ec <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d113      	bne.n	8003314 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f0:	f043 0220 	orr.w	r2, r3, #32
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2220      	movs	r2, #32
 80032fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2200      	movs	r2, #0
 800330c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e007      	b.n	8003324 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	699b      	ldr	r3, [r3, #24]
 800331a:	f003 0320 	and.w	r3, r3, #32
 800331e:	2b20      	cmp	r3, #32
 8003320:	d1cf      	bne.n	80032c2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003322:	2300      	movs	r3, #0
}
 8003324:	4618      	mov	r0, r3
 8003326:	3710      	adds	r7, #16
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}

0800332c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b084      	sub	sp, #16
 8003330:	af00      	add	r7, sp, #0
 8003332:	60f8      	str	r0, [r7, #12]
 8003334:	60b9      	str	r1, [r7, #8]
 8003336:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	699b      	ldr	r3, [r3, #24]
 800333e:	f003 0310 	and.w	r3, r3, #16
 8003342:	2b10      	cmp	r3, #16
 8003344:	d151      	bne.n	80033ea <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003346:	e022      	b.n	800338e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800334e:	d01e      	beq.n	800338e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003350:	f7ff fa8c 	bl	800286c <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	68ba      	ldr	r2, [r7, #8]
 800335c:	429a      	cmp	r2, r3
 800335e:	d302      	bcc.n	8003366 <I2C_IsAcknowledgeFailed+0x3a>
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d113      	bne.n	800338e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800336a:	f043 0220 	orr.w	r2, r3, #32
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2220      	movs	r2, #32
 8003376:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2200      	movs	r2, #0
 800337e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2200      	movs	r2, #0
 8003386:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e02e      	b.n	80033ec <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	699b      	ldr	r3, [r3, #24]
 8003394:	f003 0320 	and.w	r3, r3, #32
 8003398:	2b20      	cmp	r3, #32
 800339a:	d1d5      	bne.n	8003348 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	2210      	movs	r2, #16
 80033a2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2220      	movs	r2, #32
 80033aa:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80033ac:	68f8      	ldr	r0, [r7, #12]
 80033ae:	f7ff fedd 	bl	800316c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	6859      	ldr	r1, [r3, #4]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	4b0d      	ldr	r3, [pc, #52]	; (80033f4 <I2C_IsAcknowledgeFailed+0xc8>)
 80033be:	400b      	ands	r3, r1
 80033c0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033c6:	f043 0204 	orr.w	r2, r3, #4
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2220      	movs	r2, #32
 80033d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2200      	movs	r2, #0
 80033da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e000      	b.n	80033ec <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80033ea:	2300      	movs	r3, #0
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3710      	adds	r7, #16
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	fe00e800 	.word	0xfe00e800

080033f8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b085      	sub	sp, #20
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	60f8      	str	r0, [r7, #12]
 8003400:	607b      	str	r3, [r7, #4]
 8003402:	460b      	mov	r3, r1
 8003404:	817b      	strh	r3, [r7, #10]
 8003406:	4613      	mov	r3, r2
 8003408:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	685a      	ldr	r2, [r3, #4]
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	0d5b      	lsrs	r3, r3, #21
 8003414:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003418:	4b0d      	ldr	r3, [pc, #52]	; (8003450 <I2C_TransferConfig+0x58>)
 800341a:	430b      	orrs	r3, r1
 800341c:	43db      	mvns	r3, r3
 800341e:	ea02 0103 	and.w	r1, r2, r3
 8003422:	897b      	ldrh	r3, [r7, #10]
 8003424:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003428:	7a7b      	ldrb	r3, [r7, #9]
 800342a:	041b      	lsls	r3, r3, #16
 800342c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003430:	431a      	orrs	r2, r3
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	431a      	orrs	r2, r3
 8003436:	69bb      	ldr	r3, [r7, #24]
 8003438:	431a      	orrs	r2, r3
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	430a      	orrs	r2, r1
 8003440:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003442:	bf00      	nop
 8003444:	3714      	adds	r7, #20
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr
 800344e:	bf00      	nop
 8003450:	03ff63ff 	.word	0x03ff63ff

08003454 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003454:	b480      	push	{r7}
 8003456:	b083      	sub	sp, #12
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003464:	b2db      	uxtb	r3, r3
 8003466:	2b20      	cmp	r3, #32
 8003468:	d138      	bne.n	80034dc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003470:	2b01      	cmp	r3, #1
 8003472:	d101      	bne.n	8003478 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003474:	2302      	movs	r3, #2
 8003476:	e032      	b.n	80034de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2224      	movs	r2, #36	; 0x24
 8003484:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f022 0201 	bic.w	r2, r2, #1
 8003496:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80034a6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	6819      	ldr	r1, [r3, #0]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	683a      	ldr	r2, [r7, #0]
 80034b4:	430a      	orrs	r2, r1
 80034b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f042 0201 	orr.w	r2, r2, #1
 80034c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2220      	movs	r2, #32
 80034cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2200      	movs	r2, #0
 80034d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80034d8:	2300      	movs	r3, #0
 80034da:	e000      	b.n	80034de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80034dc:	2302      	movs	r3, #2
  }
}
 80034de:	4618      	mov	r0, r3
 80034e0:	370c      	adds	r7, #12
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr

080034ea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80034ea:	b480      	push	{r7}
 80034ec:	b085      	sub	sp, #20
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	6078      	str	r0, [r7, #4]
 80034f2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	2b20      	cmp	r3, #32
 80034fe:	d139      	bne.n	8003574 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003506:	2b01      	cmp	r3, #1
 8003508:	d101      	bne.n	800350e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800350a:	2302      	movs	r3, #2
 800350c:	e033      	b.n	8003576 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2201      	movs	r2, #1
 8003512:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2224      	movs	r2, #36	; 0x24
 800351a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f022 0201 	bic.w	r2, r2, #1
 800352c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800353c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	021b      	lsls	r3, r3, #8
 8003542:	68fa      	ldr	r2, [r7, #12]
 8003544:	4313      	orrs	r3, r2
 8003546:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	68fa      	ldr	r2, [r7, #12]
 800354e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f042 0201 	orr.w	r2, r2, #1
 800355e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2220      	movs	r2, #32
 8003564:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003570:	2300      	movs	r3, #0
 8003572:	e000      	b.n	8003576 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003574:	2302      	movs	r3, #2
  }
}
 8003576:	4618      	mov	r0, r3
 8003578:	3714      	adds	r7, #20
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr

08003582 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8003582:	b580      	push	{r7, lr}
 8003584:	b084      	sub	sp, #16
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d101      	bne.n	8003594 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e038      	b.n	8003606 <HAL_IWDG_Init+0x84>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800359c:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f245 5255 	movw	r2, #21845	; 0x5555
 80035a6:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	6852      	ldr	r2, [r2, #4]
 80035b0:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	6892      	ldr	r2, [r2, #8]
 80035ba:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80035bc:	f7ff f956 	bl	800286c <HAL_GetTick>
 80035c0:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 80035c2:	e008      	b.n	80035d6 <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80035c4:	f7ff f952 	bl	800286c <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	2b30      	cmp	r3, #48	; 0x30
 80035d0:	d901      	bls.n	80035d6 <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e017      	b.n	8003606 <HAL_IWDG_Init+0x84>
  while (hiwdg->Instance->SR != 0x00u)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d1f1      	bne.n	80035c4 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	691a      	ldr	r2, [r3, #16]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d005      	beq.n	80035fa <HAL_IWDG_Init+0x78>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	68d2      	ldr	r2, [r2, #12]
 80035f6:	611a      	str	r2, [r3, #16]
 80035f8:	e004      	b.n	8003604 <HAL_IWDG_Init+0x82>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8003602:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003604:	2300      	movs	r3, #0
}
 8003606:	4618      	mov	r0, r3
 8003608:	3710      	adds	r7, #16
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}

0800360e <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800360e:	b480      	push	{r7}
 8003610:	b083      	sub	sp, #12
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800361e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	370c      	adds	r7, #12
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr
	...

08003630 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003630:	b480      	push	{r7}
 8003632:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003634:	4b05      	ldr	r3, [pc, #20]	; (800364c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a04      	ldr	r2, [pc, #16]	; (800364c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800363a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800363e:	6013      	str	r3, [r2, #0]
}
 8003640:	bf00      	nop
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr
 800364a:	bf00      	nop
 800364c:	40007000 	.word	0x40007000

08003650 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003650:	b480      	push	{r7}
 8003652:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003654:	4b04      	ldr	r3, [pc, #16]	; (8003668 <HAL_PWREx_GetVoltageRange+0x18>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800365c:	4618      	mov	r0, r3
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop
 8003668:	40007000 	.word	0x40007000

0800366c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800366c:	b480      	push	{r7}
 800366e:	b085      	sub	sp, #20
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800367a:	d130      	bne.n	80036de <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800367c:	4b23      	ldr	r3, [pc, #140]	; (800370c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003684:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003688:	d038      	beq.n	80036fc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800368a:	4b20      	ldr	r3, [pc, #128]	; (800370c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003692:	4a1e      	ldr	r2, [pc, #120]	; (800370c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003694:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003698:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800369a:	4b1d      	ldr	r3, [pc, #116]	; (8003710 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	2232      	movs	r2, #50	; 0x32
 80036a0:	fb02 f303 	mul.w	r3, r2, r3
 80036a4:	4a1b      	ldr	r2, [pc, #108]	; (8003714 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80036a6:	fba2 2303 	umull	r2, r3, r2, r3
 80036aa:	0c9b      	lsrs	r3, r3, #18
 80036ac:	3301      	adds	r3, #1
 80036ae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036b0:	e002      	b.n	80036b8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	3b01      	subs	r3, #1
 80036b6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036b8:	4b14      	ldr	r3, [pc, #80]	; (800370c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036ba:	695b      	ldr	r3, [r3, #20]
 80036bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036c4:	d102      	bne.n	80036cc <HAL_PWREx_ControlVoltageScaling+0x60>
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d1f2      	bne.n	80036b2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80036cc:	4b0f      	ldr	r3, [pc, #60]	; (800370c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036ce:	695b      	ldr	r3, [r3, #20]
 80036d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036d8:	d110      	bne.n	80036fc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e00f      	b.n	80036fe <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80036de:	4b0b      	ldr	r3, [pc, #44]	; (800370c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80036e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036ea:	d007      	beq.n	80036fc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80036ec:	4b07      	ldr	r3, [pc, #28]	; (800370c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80036f4:	4a05      	ldr	r2, [pc, #20]	; (800370c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80036fa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3714      	adds	r7, #20
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr
 800370a:	bf00      	nop
 800370c:	40007000 	.word	0x40007000
 8003710:	20000024 	.word	0x20000024
 8003714:	431bde83 	.word	0x431bde83

08003718 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b088      	sub	sp, #32
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d102      	bne.n	800372c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	f000 bc11 	b.w	8003f4e <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800372c:	4ba0      	ldr	r3, [pc, #640]	; (80039b0 <HAL_RCC_OscConfig+0x298>)
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	f003 030c 	and.w	r3, r3, #12
 8003734:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003736:	4b9e      	ldr	r3, [pc, #632]	; (80039b0 <HAL_RCC_OscConfig+0x298>)
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	f003 0303 	and.w	r3, r3, #3
 800373e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0310 	and.w	r3, r3, #16
 8003748:	2b00      	cmp	r3, #0
 800374a:	f000 80e4 	beq.w	8003916 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800374e:	69bb      	ldr	r3, [r7, #24]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d007      	beq.n	8003764 <HAL_RCC_OscConfig+0x4c>
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	2b0c      	cmp	r3, #12
 8003758:	f040 808b 	bne.w	8003872 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	2b01      	cmp	r3, #1
 8003760:	f040 8087 	bne.w	8003872 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003764:	4b92      	ldr	r3, [pc, #584]	; (80039b0 <HAL_RCC_OscConfig+0x298>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0302 	and.w	r3, r3, #2
 800376c:	2b00      	cmp	r3, #0
 800376e:	d005      	beq.n	800377c <HAL_RCC_OscConfig+0x64>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	699b      	ldr	r3, [r3, #24]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d101      	bne.n	800377c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e3e8      	b.n	8003f4e <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a1a      	ldr	r2, [r3, #32]
 8003780:	4b8b      	ldr	r3, [pc, #556]	; (80039b0 <HAL_RCC_OscConfig+0x298>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0308 	and.w	r3, r3, #8
 8003788:	2b00      	cmp	r3, #0
 800378a:	d004      	beq.n	8003796 <HAL_RCC_OscConfig+0x7e>
 800378c:	4b88      	ldr	r3, [pc, #544]	; (80039b0 <HAL_RCC_OscConfig+0x298>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003794:	e005      	b.n	80037a2 <HAL_RCC_OscConfig+0x8a>
 8003796:	4b86      	ldr	r3, [pc, #536]	; (80039b0 <HAL_RCC_OscConfig+0x298>)
 8003798:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800379c:	091b      	lsrs	r3, r3, #4
 800379e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d223      	bcs.n	80037ee <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a1b      	ldr	r3, [r3, #32]
 80037aa:	4618      	mov	r0, r3
 80037ac:	f000 fd78 	bl	80042a0 <RCC_SetFlashLatencyFromMSIRange>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d001      	beq.n	80037ba <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e3c9      	b.n	8003f4e <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037ba:	4b7d      	ldr	r3, [pc, #500]	; (80039b0 <HAL_RCC_OscConfig+0x298>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a7c      	ldr	r2, [pc, #496]	; (80039b0 <HAL_RCC_OscConfig+0x298>)
 80037c0:	f043 0308 	orr.w	r3, r3, #8
 80037c4:	6013      	str	r3, [r2, #0]
 80037c6:	4b7a      	ldr	r3, [pc, #488]	; (80039b0 <HAL_RCC_OscConfig+0x298>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a1b      	ldr	r3, [r3, #32]
 80037d2:	4977      	ldr	r1, [pc, #476]	; (80039b0 <HAL_RCC_OscConfig+0x298>)
 80037d4:	4313      	orrs	r3, r2
 80037d6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037d8:	4b75      	ldr	r3, [pc, #468]	; (80039b0 <HAL_RCC_OscConfig+0x298>)
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	69db      	ldr	r3, [r3, #28]
 80037e4:	021b      	lsls	r3, r3, #8
 80037e6:	4972      	ldr	r1, [pc, #456]	; (80039b0 <HAL_RCC_OscConfig+0x298>)
 80037e8:	4313      	orrs	r3, r2
 80037ea:	604b      	str	r3, [r1, #4]
 80037ec:	e025      	b.n	800383a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037ee:	4b70      	ldr	r3, [pc, #448]	; (80039b0 <HAL_RCC_OscConfig+0x298>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a6f      	ldr	r2, [pc, #444]	; (80039b0 <HAL_RCC_OscConfig+0x298>)
 80037f4:	f043 0308 	orr.w	r3, r3, #8
 80037f8:	6013      	str	r3, [r2, #0]
 80037fa:	4b6d      	ldr	r3, [pc, #436]	; (80039b0 <HAL_RCC_OscConfig+0x298>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a1b      	ldr	r3, [r3, #32]
 8003806:	496a      	ldr	r1, [pc, #424]	; (80039b0 <HAL_RCC_OscConfig+0x298>)
 8003808:	4313      	orrs	r3, r2
 800380a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800380c:	4b68      	ldr	r3, [pc, #416]	; (80039b0 <HAL_RCC_OscConfig+0x298>)
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	69db      	ldr	r3, [r3, #28]
 8003818:	021b      	lsls	r3, r3, #8
 800381a:	4965      	ldr	r1, [pc, #404]	; (80039b0 <HAL_RCC_OscConfig+0x298>)
 800381c:	4313      	orrs	r3, r2
 800381e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d109      	bne.n	800383a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a1b      	ldr	r3, [r3, #32]
 800382a:	4618      	mov	r0, r3
 800382c:	f000 fd38 	bl	80042a0 <RCC_SetFlashLatencyFromMSIRange>
 8003830:	4603      	mov	r3, r0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d001      	beq.n	800383a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e389      	b.n	8003f4e <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800383a:	f000 fc6f 	bl	800411c <HAL_RCC_GetSysClockFreq>
 800383e:	4601      	mov	r1, r0
 8003840:	4b5b      	ldr	r3, [pc, #364]	; (80039b0 <HAL_RCC_OscConfig+0x298>)
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	091b      	lsrs	r3, r3, #4
 8003846:	f003 030f 	and.w	r3, r3, #15
 800384a:	4a5a      	ldr	r2, [pc, #360]	; (80039b4 <HAL_RCC_OscConfig+0x29c>)
 800384c:	5cd3      	ldrb	r3, [r2, r3]
 800384e:	f003 031f 	and.w	r3, r3, #31
 8003852:	fa21 f303 	lsr.w	r3, r1, r3
 8003856:	4a58      	ldr	r2, [pc, #352]	; (80039b8 <HAL_RCC_OscConfig+0x2a0>)
 8003858:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800385a:	4b58      	ldr	r3, [pc, #352]	; (80039bc <HAL_RCC_OscConfig+0x2a4>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4618      	mov	r0, r3
 8003860:	f7fe ffb8 	bl	80027d4 <HAL_InitTick>
 8003864:	4603      	mov	r3, r0
 8003866:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003868:	7bfb      	ldrb	r3, [r7, #15]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d052      	beq.n	8003914 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800386e:	7bfb      	ldrb	r3, [r7, #15]
 8003870:	e36d      	b.n	8003f4e <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	699b      	ldr	r3, [r3, #24]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d032      	beq.n	80038e0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800387a:	4b4d      	ldr	r3, [pc, #308]	; (80039b0 <HAL_RCC_OscConfig+0x298>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a4c      	ldr	r2, [pc, #304]	; (80039b0 <HAL_RCC_OscConfig+0x298>)
 8003880:	f043 0301 	orr.w	r3, r3, #1
 8003884:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003886:	f7fe fff1 	bl	800286c <HAL_GetTick>
 800388a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800388c:	e008      	b.n	80038a0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800388e:	f7fe ffed 	bl	800286c <HAL_GetTick>
 8003892:	4602      	mov	r2, r0
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	2b02      	cmp	r3, #2
 800389a:	d901      	bls.n	80038a0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	e356      	b.n	8003f4e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038a0:	4b43      	ldr	r3, [pc, #268]	; (80039b0 <HAL_RCC_OscConfig+0x298>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0302 	and.w	r3, r3, #2
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d0f0      	beq.n	800388e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038ac:	4b40      	ldr	r3, [pc, #256]	; (80039b0 <HAL_RCC_OscConfig+0x298>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a3f      	ldr	r2, [pc, #252]	; (80039b0 <HAL_RCC_OscConfig+0x298>)
 80038b2:	f043 0308 	orr.w	r3, r3, #8
 80038b6:	6013      	str	r3, [r2, #0]
 80038b8:	4b3d      	ldr	r3, [pc, #244]	; (80039b0 <HAL_RCC_OscConfig+0x298>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6a1b      	ldr	r3, [r3, #32]
 80038c4:	493a      	ldr	r1, [pc, #232]	; (80039b0 <HAL_RCC_OscConfig+0x298>)
 80038c6:	4313      	orrs	r3, r2
 80038c8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038ca:	4b39      	ldr	r3, [pc, #228]	; (80039b0 <HAL_RCC_OscConfig+0x298>)
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	69db      	ldr	r3, [r3, #28]
 80038d6:	021b      	lsls	r3, r3, #8
 80038d8:	4935      	ldr	r1, [pc, #212]	; (80039b0 <HAL_RCC_OscConfig+0x298>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	604b      	str	r3, [r1, #4]
 80038de:	e01a      	b.n	8003916 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80038e0:	4b33      	ldr	r3, [pc, #204]	; (80039b0 <HAL_RCC_OscConfig+0x298>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a32      	ldr	r2, [pc, #200]	; (80039b0 <HAL_RCC_OscConfig+0x298>)
 80038e6:	f023 0301 	bic.w	r3, r3, #1
 80038ea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80038ec:	f7fe ffbe 	bl	800286c <HAL_GetTick>
 80038f0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80038f2:	e008      	b.n	8003906 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80038f4:	f7fe ffba 	bl	800286c <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d901      	bls.n	8003906 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e323      	b.n	8003f4e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003906:	4b2a      	ldr	r3, [pc, #168]	; (80039b0 <HAL_RCC_OscConfig+0x298>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0302 	and.w	r3, r3, #2
 800390e:	2b00      	cmp	r3, #0
 8003910:	d1f0      	bne.n	80038f4 <HAL_RCC_OscConfig+0x1dc>
 8003912:	e000      	b.n	8003916 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003914:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0301 	and.w	r3, r3, #1
 800391e:	2b00      	cmp	r3, #0
 8003920:	d073      	beq.n	8003a0a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003922:	69bb      	ldr	r3, [r7, #24]
 8003924:	2b08      	cmp	r3, #8
 8003926:	d005      	beq.n	8003934 <HAL_RCC_OscConfig+0x21c>
 8003928:	69bb      	ldr	r3, [r7, #24]
 800392a:	2b0c      	cmp	r3, #12
 800392c:	d10e      	bne.n	800394c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	2b03      	cmp	r3, #3
 8003932:	d10b      	bne.n	800394c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003934:	4b1e      	ldr	r3, [pc, #120]	; (80039b0 <HAL_RCC_OscConfig+0x298>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d063      	beq.n	8003a08 <HAL_RCC_OscConfig+0x2f0>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d15f      	bne.n	8003a08 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e300      	b.n	8003f4e <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003954:	d106      	bne.n	8003964 <HAL_RCC_OscConfig+0x24c>
 8003956:	4b16      	ldr	r3, [pc, #88]	; (80039b0 <HAL_RCC_OscConfig+0x298>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a15      	ldr	r2, [pc, #84]	; (80039b0 <HAL_RCC_OscConfig+0x298>)
 800395c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003960:	6013      	str	r3, [r2, #0]
 8003962:	e01d      	b.n	80039a0 <HAL_RCC_OscConfig+0x288>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800396c:	d10c      	bne.n	8003988 <HAL_RCC_OscConfig+0x270>
 800396e:	4b10      	ldr	r3, [pc, #64]	; (80039b0 <HAL_RCC_OscConfig+0x298>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a0f      	ldr	r2, [pc, #60]	; (80039b0 <HAL_RCC_OscConfig+0x298>)
 8003974:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003978:	6013      	str	r3, [r2, #0]
 800397a:	4b0d      	ldr	r3, [pc, #52]	; (80039b0 <HAL_RCC_OscConfig+0x298>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a0c      	ldr	r2, [pc, #48]	; (80039b0 <HAL_RCC_OscConfig+0x298>)
 8003980:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003984:	6013      	str	r3, [r2, #0]
 8003986:	e00b      	b.n	80039a0 <HAL_RCC_OscConfig+0x288>
 8003988:	4b09      	ldr	r3, [pc, #36]	; (80039b0 <HAL_RCC_OscConfig+0x298>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a08      	ldr	r2, [pc, #32]	; (80039b0 <HAL_RCC_OscConfig+0x298>)
 800398e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003992:	6013      	str	r3, [r2, #0]
 8003994:	4b06      	ldr	r3, [pc, #24]	; (80039b0 <HAL_RCC_OscConfig+0x298>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a05      	ldr	r2, [pc, #20]	; (80039b0 <HAL_RCC_OscConfig+0x298>)
 800399a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800399e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d01b      	beq.n	80039e0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039a8:	f7fe ff60 	bl	800286c <HAL_GetTick>
 80039ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039ae:	e010      	b.n	80039d2 <HAL_RCC_OscConfig+0x2ba>
 80039b0:	40021000 	.word	0x40021000
 80039b4:	080096d8 	.word	0x080096d8
 80039b8:	20000024 	.word	0x20000024
 80039bc:	20000028 	.word	0x20000028
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039c0:	f7fe ff54 	bl	800286c <HAL_GetTick>
 80039c4:	4602      	mov	r2, r0
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	2b64      	cmp	r3, #100	; 0x64
 80039cc:	d901      	bls.n	80039d2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e2bd      	b.n	8003f4e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039d2:	4baf      	ldr	r3, [pc, #700]	; (8003c90 <HAL_RCC_OscConfig+0x578>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d0f0      	beq.n	80039c0 <HAL_RCC_OscConfig+0x2a8>
 80039de:	e014      	b.n	8003a0a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e0:	f7fe ff44 	bl	800286c <HAL_GetTick>
 80039e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039e6:	e008      	b.n	80039fa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039e8:	f7fe ff40 	bl	800286c <HAL_GetTick>
 80039ec:	4602      	mov	r2, r0
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	2b64      	cmp	r3, #100	; 0x64
 80039f4:	d901      	bls.n	80039fa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e2a9      	b.n	8003f4e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039fa:	4ba5      	ldr	r3, [pc, #660]	; (8003c90 <HAL_RCC_OscConfig+0x578>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d1f0      	bne.n	80039e8 <HAL_RCC_OscConfig+0x2d0>
 8003a06:	e000      	b.n	8003a0a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0302 	and.w	r3, r3, #2
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d060      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	2b04      	cmp	r3, #4
 8003a1a:	d005      	beq.n	8003a28 <HAL_RCC_OscConfig+0x310>
 8003a1c:	69bb      	ldr	r3, [r7, #24]
 8003a1e:	2b0c      	cmp	r3, #12
 8003a20:	d119      	bne.n	8003a56 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	2b02      	cmp	r3, #2
 8003a26:	d116      	bne.n	8003a56 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a28:	4b99      	ldr	r3, [pc, #612]	; (8003c90 <HAL_RCC_OscConfig+0x578>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d005      	beq.n	8003a40 <HAL_RCC_OscConfig+0x328>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d101      	bne.n	8003a40 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e286      	b.n	8003f4e <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a40:	4b93      	ldr	r3, [pc, #588]	; (8003c90 <HAL_RCC_OscConfig+0x578>)
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	691b      	ldr	r3, [r3, #16]
 8003a4c:	061b      	lsls	r3, r3, #24
 8003a4e:	4990      	ldr	r1, [pc, #576]	; (8003c90 <HAL_RCC_OscConfig+0x578>)
 8003a50:	4313      	orrs	r3, r2
 8003a52:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a54:	e040      	b.n	8003ad8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d023      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a5e:	4b8c      	ldr	r3, [pc, #560]	; (8003c90 <HAL_RCC_OscConfig+0x578>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a8b      	ldr	r2, [pc, #556]	; (8003c90 <HAL_RCC_OscConfig+0x578>)
 8003a64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a6a:	f7fe feff 	bl	800286c <HAL_GetTick>
 8003a6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a70:	e008      	b.n	8003a84 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a72:	f7fe fefb 	bl	800286c <HAL_GetTick>
 8003a76:	4602      	mov	r2, r0
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	d901      	bls.n	8003a84 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003a80:	2303      	movs	r3, #3
 8003a82:	e264      	b.n	8003f4e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a84:	4b82      	ldr	r3, [pc, #520]	; (8003c90 <HAL_RCC_OscConfig+0x578>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d0f0      	beq.n	8003a72 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a90:	4b7f      	ldr	r3, [pc, #508]	; (8003c90 <HAL_RCC_OscConfig+0x578>)
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	691b      	ldr	r3, [r3, #16]
 8003a9c:	061b      	lsls	r3, r3, #24
 8003a9e:	497c      	ldr	r1, [pc, #496]	; (8003c90 <HAL_RCC_OscConfig+0x578>)
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	604b      	str	r3, [r1, #4]
 8003aa4:	e018      	b.n	8003ad8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003aa6:	4b7a      	ldr	r3, [pc, #488]	; (8003c90 <HAL_RCC_OscConfig+0x578>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a79      	ldr	r2, [pc, #484]	; (8003c90 <HAL_RCC_OscConfig+0x578>)
 8003aac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ab0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab2:	f7fe fedb 	bl	800286c <HAL_GetTick>
 8003ab6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ab8:	e008      	b.n	8003acc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003aba:	f7fe fed7 	bl	800286c <HAL_GetTick>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	2b02      	cmp	r3, #2
 8003ac6:	d901      	bls.n	8003acc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003ac8:	2303      	movs	r3, #3
 8003aca:	e240      	b.n	8003f4e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003acc:	4b70      	ldr	r3, [pc, #448]	; (8003c90 <HAL_RCC_OscConfig+0x578>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d1f0      	bne.n	8003aba <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0308 	and.w	r3, r3, #8
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d03c      	beq.n	8003b5e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	695b      	ldr	r3, [r3, #20]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d01c      	beq.n	8003b26 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003aec:	4b68      	ldr	r3, [pc, #416]	; (8003c90 <HAL_RCC_OscConfig+0x578>)
 8003aee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003af2:	4a67      	ldr	r2, [pc, #412]	; (8003c90 <HAL_RCC_OscConfig+0x578>)
 8003af4:	f043 0301 	orr.w	r3, r3, #1
 8003af8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003afc:	f7fe feb6 	bl	800286c <HAL_GetTick>
 8003b00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b02:	e008      	b.n	8003b16 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b04:	f7fe feb2 	bl	800286c <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	d901      	bls.n	8003b16 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e21b      	b.n	8003f4e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b16:	4b5e      	ldr	r3, [pc, #376]	; (8003c90 <HAL_RCC_OscConfig+0x578>)
 8003b18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b1c:	f003 0302 	and.w	r3, r3, #2
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d0ef      	beq.n	8003b04 <HAL_RCC_OscConfig+0x3ec>
 8003b24:	e01b      	b.n	8003b5e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b26:	4b5a      	ldr	r3, [pc, #360]	; (8003c90 <HAL_RCC_OscConfig+0x578>)
 8003b28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b2c:	4a58      	ldr	r2, [pc, #352]	; (8003c90 <HAL_RCC_OscConfig+0x578>)
 8003b2e:	f023 0301 	bic.w	r3, r3, #1
 8003b32:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b36:	f7fe fe99 	bl	800286c <HAL_GetTick>
 8003b3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b3c:	e008      	b.n	8003b50 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b3e:	f7fe fe95 	bl	800286c <HAL_GetTick>
 8003b42:	4602      	mov	r2, r0
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d901      	bls.n	8003b50 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	e1fe      	b.n	8003f4e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b50:	4b4f      	ldr	r3, [pc, #316]	; (8003c90 <HAL_RCC_OscConfig+0x578>)
 8003b52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b56:	f003 0302 	and.w	r3, r3, #2
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d1ef      	bne.n	8003b3e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0304 	and.w	r3, r3, #4
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	f000 80a6 	beq.w	8003cb8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003b70:	4b47      	ldr	r3, [pc, #284]	; (8003c90 <HAL_RCC_OscConfig+0x578>)
 8003b72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d10d      	bne.n	8003b98 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b7c:	4b44      	ldr	r3, [pc, #272]	; (8003c90 <HAL_RCC_OscConfig+0x578>)
 8003b7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b80:	4a43      	ldr	r2, [pc, #268]	; (8003c90 <HAL_RCC_OscConfig+0x578>)
 8003b82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b86:	6593      	str	r3, [r2, #88]	; 0x58
 8003b88:	4b41      	ldr	r3, [pc, #260]	; (8003c90 <HAL_RCC_OscConfig+0x578>)
 8003b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b90:	60bb      	str	r3, [r7, #8]
 8003b92:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b94:	2301      	movs	r3, #1
 8003b96:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b98:	4b3e      	ldr	r3, [pc, #248]	; (8003c94 <HAL_RCC_OscConfig+0x57c>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d118      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ba4:	4b3b      	ldr	r3, [pc, #236]	; (8003c94 <HAL_RCC_OscConfig+0x57c>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a3a      	ldr	r2, [pc, #232]	; (8003c94 <HAL_RCC_OscConfig+0x57c>)
 8003baa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bb0:	f7fe fe5c 	bl	800286c <HAL_GetTick>
 8003bb4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bb6:	e008      	b.n	8003bca <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bb8:	f7fe fe58 	bl	800286c <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d901      	bls.n	8003bca <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e1c1      	b.n	8003f4e <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bca:	4b32      	ldr	r3, [pc, #200]	; (8003c94 <HAL_RCC_OscConfig+0x57c>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d0f0      	beq.n	8003bb8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d108      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x4d8>
 8003bde:	4b2c      	ldr	r3, [pc, #176]	; (8003c90 <HAL_RCC_OscConfig+0x578>)
 8003be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003be4:	4a2a      	ldr	r2, [pc, #168]	; (8003c90 <HAL_RCC_OscConfig+0x578>)
 8003be6:	f043 0301 	orr.w	r3, r3, #1
 8003bea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003bee:	e024      	b.n	8003c3a <HAL_RCC_OscConfig+0x522>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	2b05      	cmp	r3, #5
 8003bf6:	d110      	bne.n	8003c1a <HAL_RCC_OscConfig+0x502>
 8003bf8:	4b25      	ldr	r3, [pc, #148]	; (8003c90 <HAL_RCC_OscConfig+0x578>)
 8003bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bfe:	4a24      	ldr	r2, [pc, #144]	; (8003c90 <HAL_RCC_OscConfig+0x578>)
 8003c00:	f043 0304 	orr.w	r3, r3, #4
 8003c04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c08:	4b21      	ldr	r3, [pc, #132]	; (8003c90 <HAL_RCC_OscConfig+0x578>)
 8003c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c0e:	4a20      	ldr	r2, [pc, #128]	; (8003c90 <HAL_RCC_OscConfig+0x578>)
 8003c10:	f043 0301 	orr.w	r3, r3, #1
 8003c14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c18:	e00f      	b.n	8003c3a <HAL_RCC_OscConfig+0x522>
 8003c1a:	4b1d      	ldr	r3, [pc, #116]	; (8003c90 <HAL_RCC_OscConfig+0x578>)
 8003c1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c20:	4a1b      	ldr	r2, [pc, #108]	; (8003c90 <HAL_RCC_OscConfig+0x578>)
 8003c22:	f023 0301 	bic.w	r3, r3, #1
 8003c26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c2a:	4b19      	ldr	r3, [pc, #100]	; (8003c90 <HAL_RCC_OscConfig+0x578>)
 8003c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c30:	4a17      	ldr	r2, [pc, #92]	; (8003c90 <HAL_RCC_OscConfig+0x578>)
 8003c32:	f023 0304 	bic.w	r3, r3, #4
 8003c36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d016      	beq.n	8003c70 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c42:	f7fe fe13 	bl	800286c <HAL_GetTick>
 8003c46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c48:	e00a      	b.n	8003c60 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c4a:	f7fe fe0f 	bl	800286c <HAL_GetTick>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d901      	bls.n	8003c60 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	e176      	b.n	8003f4e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c60:	4b0b      	ldr	r3, [pc, #44]	; (8003c90 <HAL_RCC_OscConfig+0x578>)
 8003c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c66:	f003 0302 	and.w	r3, r3, #2
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d0ed      	beq.n	8003c4a <HAL_RCC_OscConfig+0x532>
 8003c6e:	e01a      	b.n	8003ca6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c70:	f7fe fdfc 	bl	800286c <HAL_GetTick>
 8003c74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c76:	e00f      	b.n	8003c98 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c78:	f7fe fdf8 	bl	800286c <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d906      	bls.n	8003c98 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e15f      	b.n	8003f4e <HAL_RCC_OscConfig+0x836>
 8003c8e:	bf00      	nop
 8003c90:	40021000 	.word	0x40021000
 8003c94:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c98:	4baa      	ldr	r3, [pc, #680]	; (8003f44 <HAL_RCC_OscConfig+0x82c>)
 8003c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c9e:	f003 0302 	and.w	r3, r3, #2
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d1e8      	bne.n	8003c78 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ca6:	7ffb      	ldrb	r3, [r7, #31]
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d105      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cac:	4ba5      	ldr	r3, [pc, #660]	; (8003f44 <HAL_RCC_OscConfig+0x82c>)
 8003cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cb0:	4aa4      	ldr	r2, [pc, #656]	; (8003f44 <HAL_RCC_OscConfig+0x82c>)
 8003cb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cb6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0320 	and.w	r3, r3, #32
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d03c      	beq.n	8003d3e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d01c      	beq.n	8003d06 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003ccc:	4b9d      	ldr	r3, [pc, #628]	; (8003f44 <HAL_RCC_OscConfig+0x82c>)
 8003cce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003cd2:	4a9c      	ldr	r2, [pc, #624]	; (8003f44 <HAL_RCC_OscConfig+0x82c>)
 8003cd4:	f043 0301 	orr.w	r3, r3, #1
 8003cd8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cdc:	f7fe fdc6 	bl	800286c <HAL_GetTick>
 8003ce0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003ce2:	e008      	b.n	8003cf6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ce4:	f7fe fdc2 	bl	800286c <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	d901      	bls.n	8003cf6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	e12b      	b.n	8003f4e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003cf6:	4b93      	ldr	r3, [pc, #588]	; (8003f44 <HAL_RCC_OscConfig+0x82c>)
 8003cf8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003cfc:	f003 0302 	and.w	r3, r3, #2
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d0ef      	beq.n	8003ce4 <HAL_RCC_OscConfig+0x5cc>
 8003d04:	e01b      	b.n	8003d3e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003d06:	4b8f      	ldr	r3, [pc, #572]	; (8003f44 <HAL_RCC_OscConfig+0x82c>)
 8003d08:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d0c:	4a8d      	ldr	r2, [pc, #564]	; (8003f44 <HAL_RCC_OscConfig+0x82c>)
 8003d0e:	f023 0301 	bic.w	r3, r3, #1
 8003d12:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d16:	f7fe fda9 	bl	800286c <HAL_GetTick>
 8003d1a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d1c:	e008      	b.n	8003d30 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d1e:	f7fe fda5 	bl	800286c <HAL_GetTick>
 8003d22:	4602      	mov	r2, r0
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d901      	bls.n	8003d30 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	e10e      	b.n	8003f4e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d30:	4b84      	ldr	r3, [pc, #528]	; (8003f44 <HAL_RCC_OscConfig+0x82c>)
 8003d32:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d36:	f003 0302 	and.w	r3, r3, #2
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d1ef      	bne.n	8003d1e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	f000 8102 	beq.w	8003f4c <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	f040 80c5 	bne.w	8003edc <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003d52:	4b7c      	ldr	r3, [pc, #496]	; (8003f44 <HAL_RCC_OscConfig+0x82c>)
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	f003 0203 	and.w	r2, r3, #3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d12c      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d70:	3b01      	subs	r3, #1
 8003d72:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d123      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d82:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d11b      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d92:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d113      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003da2:	085b      	lsrs	r3, r3, #1
 8003da4:	3b01      	subs	r3, #1
 8003da6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d109      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db6:	085b      	lsrs	r3, r3, #1
 8003db8:	3b01      	subs	r3, #1
 8003dba:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d067      	beq.n	8003e90 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003dc0:	69bb      	ldr	r3, [r7, #24]
 8003dc2:	2b0c      	cmp	r3, #12
 8003dc4:	d062      	beq.n	8003e8c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003dc6:	4b5f      	ldr	r3, [pc, #380]	; (8003f44 <HAL_RCC_OscConfig+0x82c>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d001      	beq.n	8003dd6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e0bb      	b.n	8003f4e <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003dd6:	4b5b      	ldr	r3, [pc, #364]	; (8003f44 <HAL_RCC_OscConfig+0x82c>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a5a      	ldr	r2, [pc, #360]	; (8003f44 <HAL_RCC_OscConfig+0x82c>)
 8003ddc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003de0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003de2:	f7fe fd43 	bl	800286c <HAL_GetTick>
 8003de6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003de8:	e008      	b.n	8003dfc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dea:	f7fe fd3f 	bl	800286c <HAL_GetTick>
 8003dee:	4602      	mov	r2, r0
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	1ad3      	subs	r3, r2, r3
 8003df4:	2b02      	cmp	r3, #2
 8003df6:	d901      	bls.n	8003dfc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	e0a8      	b.n	8003f4e <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003dfc:	4b51      	ldr	r3, [pc, #324]	; (8003f44 <HAL_RCC_OscConfig+0x82c>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d1f0      	bne.n	8003dea <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e08:	4b4e      	ldr	r3, [pc, #312]	; (8003f44 <HAL_RCC_OscConfig+0x82c>)
 8003e0a:	68da      	ldr	r2, [r3, #12]
 8003e0c:	4b4e      	ldr	r3, [pc, #312]	; (8003f48 <HAL_RCC_OscConfig+0x830>)
 8003e0e:	4013      	ands	r3, r2
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003e18:	3a01      	subs	r2, #1
 8003e1a:	0112      	lsls	r2, r2, #4
 8003e1c:	4311      	orrs	r1, r2
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003e22:	0212      	lsls	r2, r2, #8
 8003e24:	4311      	orrs	r1, r2
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003e2a:	0852      	lsrs	r2, r2, #1
 8003e2c:	3a01      	subs	r2, #1
 8003e2e:	0552      	lsls	r2, r2, #21
 8003e30:	4311      	orrs	r1, r2
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003e36:	0852      	lsrs	r2, r2, #1
 8003e38:	3a01      	subs	r2, #1
 8003e3a:	0652      	lsls	r2, r2, #25
 8003e3c:	4311      	orrs	r1, r2
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003e42:	06d2      	lsls	r2, r2, #27
 8003e44:	430a      	orrs	r2, r1
 8003e46:	493f      	ldr	r1, [pc, #252]	; (8003f44 <HAL_RCC_OscConfig+0x82c>)
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003e4c:	4b3d      	ldr	r3, [pc, #244]	; (8003f44 <HAL_RCC_OscConfig+0x82c>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a3c      	ldr	r2, [pc, #240]	; (8003f44 <HAL_RCC_OscConfig+0x82c>)
 8003e52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e56:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e58:	4b3a      	ldr	r3, [pc, #232]	; (8003f44 <HAL_RCC_OscConfig+0x82c>)
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	4a39      	ldr	r2, [pc, #228]	; (8003f44 <HAL_RCC_OscConfig+0x82c>)
 8003e5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e62:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003e64:	f7fe fd02 	bl	800286c <HAL_GetTick>
 8003e68:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e6a:	e008      	b.n	8003e7e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e6c:	f7fe fcfe 	bl	800286c <HAL_GetTick>
 8003e70:	4602      	mov	r2, r0
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	2b02      	cmp	r3, #2
 8003e78:	d901      	bls.n	8003e7e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	e067      	b.n	8003f4e <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e7e:	4b31      	ldr	r3, [pc, #196]	; (8003f44 <HAL_RCC_OscConfig+0x82c>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d0f0      	beq.n	8003e6c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e8a:	e05f      	b.n	8003f4c <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e05e      	b.n	8003f4e <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e90:	4b2c      	ldr	r3, [pc, #176]	; (8003f44 <HAL_RCC_OscConfig+0x82c>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d157      	bne.n	8003f4c <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003e9c:	4b29      	ldr	r3, [pc, #164]	; (8003f44 <HAL_RCC_OscConfig+0x82c>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a28      	ldr	r2, [pc, #160]	; (8003f44 <HAL_RCC_OscConfig+0x82c>)
 8003ea2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ea6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ea8:	4b26      	ldr	r3, [pc, #152]	; (8003f44 <HAL_RCC_OscConfig+0x82c>)
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	4a25      	ldr	r2, [pc, #148]	; (8003f44 <HAL_RCC_OscConfig+0x82c>)
 8003eae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003eb2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003eb4:	f7fe fcda 	bl	800286c <HAL_GetTick>
 8003eb8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003eba:	e008      	b.n	8003ece <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ebc:	f7fe fcd6 	bl	800286c <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	d901      	bls.n	8003ece <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e03f      	b.n	8003f4e <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ece:	4b1d      	ldr	r3, [pc, #116]	; (8003f44 <HAL_RCC_OscConfig+0x82c>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d0f0      	beq.n	8003ebc <HAL_RCC_OscConfig+0x7a4>
 8003eda:	e037      	b.n	8003f4c <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003edc:	69bb      	ldr	r3, [r7, #24]
 8003ede:	2b0c      	cmp	r3, #12
 8003ee0:	d02d      	beq.n	8003f3e <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ee2:	4b18      	ldr	r3, [pc, #96]	; (8003f44 <HAL_RCC_OscConfig+0x82c>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a17      	ldr	r2, [pc, #92]	; (8003f44 <HAL_RCC_OscConfig+0x82c>)
 8003ee8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003eec:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003eee:	4b15      	ldr	r3, [pc, #84]	; (8003f44 <HAL_RCC_OscConfig+0x82c>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d105      	bne.n	8003f06 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003efa:	4b12      	ldr	r3, [pc, #72]	; (8003f44 <HAL_RCC_OscConfig+0x82c>)
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	4a11      	ldr	r2, [pc, #68]	; (8003f44 <HAL_RCC_OscConfig+0x82c>)
 8003f00:	f023 0303 	bic.w	r3, r3, #3
 8003f04:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003f06:	4b0f      	ldr	r3, [pc, #60]	; (8003f44 <HAL_RCC_OscConfig+0x82c>)
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	4a0e      	ldr	r2, [pc, #56]	; (8003f44 <HAL_RCC_OscConfig+0x82c>)
 8003f0c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003f10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f14:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f16:	f7fe fca9 	bl	800286c <HAL_GetTick>
 8003f1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f1c:	e008      	b.n	8003f30 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f1e:	f7fe fca5 	bl	800286c <HAL_GetTick>
 8003f22:	4602      	mov	r2, r0
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	d901      	bls.n	8003f30 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	e00e      	b.n	8003f4e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f30:	4b04      	ldr	r3, [pc, #16]	; (8003f44 <HAL_RCC_OscConfig+0x82c>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d1f0      	bne.n	8003f1e <HAL_RCC_OscConfig+0x806>
 8003f3c:	e006      	b.n	8003f4c <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e005      	b.n	8003f4e <HAL_RCC_OscConfig+0x836>
 8003f42:	bf00      	nop
 8003f44:	40021000 	.word	0x40021000
 8003f48:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8003f4c:	2300      	movs	r3, #0
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3720      	adds	r7, #32
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	bf00      	nop

08003f58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d101      	bne.n	8003f6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e0c8      	b.n	80040fe <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f6c:	4b66      	ldr	r3, [pc, #408]	; (8004108 <HAL_RCC_ClockConfig+0x1b0>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0307 	and.w	r3, r3, #7
 8003f74:	683a      	ldr	r2, [r7, #0]
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d910      	bls.n	8003f9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f7a:	4b63      	ldr	r3, [pc, #396]	; (8004108 <HAL_RCC_ClockConfig+0x1b0>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f023 0207 	bic.w	r2, r3, #7
 8003f82:	4961      	ldr	r1, [pc, #388]	; (8004108 <HAL_RCC_ClockConfig+0x1b0>)
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f8a:	4b5f      	ldr	r3, [pc, #380]	; (8004108 <HAL_RCC_ClockConfig+0x1b0>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0307 	and.w	r3, r3, #7
 8003f92:	683a      	ldr	r2, [r7, #0]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d001      	beq.n	8003f9c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e0b0      	b.n	80040fe <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 0301 	and.w	r3, r3, #1
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d04c      	beq.n	8004042 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	2b03      	cmp	r3, #3
 8003fae:	d107      	bne.n	8003fc0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fb0:	4b56      	ldr	r3, [pc, #344]	; (800410c <HAL_RCC_ClockConfig+0x1b4>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d121      	bne.n	8004000 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e09e      	b.n	80040fe <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d107      	bne.n	8003fd8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fc8:	4b50      	ldr	r3, [pc, #320]	; (800410c <HAL_RCC_ClockConfig+0x1b4>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d115      	bne.n	8004000 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e092      	b.n	80040fe <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d107      	bne.n	8003ff0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003fe0:	4b4a      	ldr	r3, [pc, #296]	; (800410c <HAL_RCC_ClockConfig+0x1b4>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 0302 	and.w	r3, r3, #2
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d109      	bne.n	8004000 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e086      	b.n	80040fe <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ff0:	4b46      	ldr	r3, [pc, #280]	; (800410c <HAL_RCC_ClockConfig+0x1b4>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d101      	bne.n	8004000 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e07e      	b.n	80040fe <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004000:	4b42      	ldr	r3, [pc, #264]	; (800410c <HAL_RCC_ClockConfig+0x1b4>)
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	f023 0203 	bic.w	r2, r3, #3
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	493f      	ldr	r1, [pc, #252]	; (800410c <HAL_RCC_ClockConfig+0x1b4>)
 800400e:	4313      	orrs	r3, r2
 8004010:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004012:	f7fe fc2b 	bl	800286c <HAL_GetTick>
 8004016:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004018:	e00a      	b.n	8004030 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800401a:	f7fe fc27 	bl	800286c <HAL_GetTick>
 800401e:	4602      	mov	r2, r0
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	f241 3288 	movw	r2, #5000	; 0x1388
 8004028:	4293      	cmp	r3, r2
 800402a:	d901      	bls.n	8004030 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800402c:	2303      	movs	r3, #3
 800402e:	e066      	b.n	80040fe <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004030:	4b36      	ldr	r3, [pc, #216]	; (800410c <HAL_RCC_ClockConfig+0x1b4>)
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f003 020c 	and.w	r2, r3, #12
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	429a      	cmp	r2, r3
 8004040:	d1eb      	bne.n	800401a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0302 	and.w	r3, r3, #2
 800404a:	2b00      	cmp	r3, #0
 800404c:	d008      	beq.n	8004060 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800404e:	4b2f      	ldr	r3, [pc, #188]	; (800410c <HAL_RCC_ClockConfig+0x1b4>)
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	492c      	ldr	r1, [pc, #176]	; (800410c <HAL_RCC_ClockConfig+0x1b4>)
 800405c:	4313      	orrs	r3, r2
 800405e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004060:	4b29      	ldr	r3, [pc, #164]	; (8004108 <HAL_RCC_ClockConfig+0x1b0>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0307 	and.w	r3, r3, #7
 8004068:	683a      	ldr	r2, [r7, #0]
 800406a:	429a      	cmp	r2, r3
 800406c:	d210      	bcs.n	8004090 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800406e:	4b26      	ldr	r3, [pc, #152]	; (8004108 <HAL_RCC_ClockConfig+0x1b0>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f023 0207 	bic.w	r2, r3, #7
 8004076:	4924      	ldr	r1, [pc, #144]	; (8004108 <HAL_RCC_ClockConfig+0x1b0>)
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	4313      	orrs	r3, r2
 800407c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800407e:	4b22      	ldr	r3, [pc, #136]	; (8004108 <HAL_RCC_ClockConfig+0x1b0>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0307 	and.w	r3, r3, #7
 8004086:	683a      	ldr	r2, [r7, #0]
 8004088:	429a      	cmp	r2, r3
 800408a:	d001      	beq.n	8004090 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e036      	b.n	80040fe <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0304 	and.w	r3, r3, #4
 8004098:	2b00      	cmp	r3, #0
 800409a:	d008      	beq.n	80040ae <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800409c:	4b1b      	ldr	r3, [pc, #108]	; (800410c <HAL_RCC_ClockConfig+0x1b4>)
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	4918      	ldr	r1, [pc, #96]	; (800410c <HAL_RCC_ClockConfig+0x1b4>)
 80040aa:	4313      	orrs	r3, r2
 80040ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 0308 	and.w	r3, r3, #8
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d009      	beq.n	80040ce <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040ba:	4b14      	ldr	r3, [pc, #80]	; (800410c <HAL_RCC_ClockConfig+0x1b4>)
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	691b      	ldr	r3, [r3, #16]
 80040c6:	00db      	lsls	r3, r3, #3
 80040c8:	4910      	ldr	r1, [pc, #64]	; (800410c <HAL_RCC_ClockConfig+0x1b4>)
 80040ca:	4313      	orrs	r3, r2
 80040cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80040ce:	f000 f825 	bl	800411c <HAL_RCC_GetSysClockFreq>
 80040d2:	4601      	mov	r1, r0
 80040d4:	4b0d      	ldr	r3, [pc, #52]	; (800410c <HAL_RCC_ClockConfig+0x1b4>)
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	091b      	lsrs	r3, r3, #4
 80040da:	f003 030f 	and.w	r3, r3, #15
 80040de:	4a0c      	ldr	r2, [pc, #48]	; (8004110 <HAL_RCC_ClockConfig+0x1b8>)
 80040e0:	5cd3      	ldrb	r3, [r2, r3]
 80040e2:	f003 031f 	and.w	r3, r3, #31
 80040e6:	fa21 f303 	lsr.w	r3, r1, r3
 80040ea:	4a0a      	ldr	r2, [pc, #40]	; (8004114 <HAL_RCC_ClockConfig+0x1bc>)
 80040ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80040ee:	4b0a      	ldr	r3, [pc, #40]	; (8004118 <HAL_RCC_ClockConfig+0x1c0>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4618      	mov	r0, r3
 80040f4:	f7fe fb6e 	bl	80027d4 <HAL_InitTick>
 80040f8:	4603      	mov	r3, r0
 80040fa:	72fb      	strb	r3, [r7, #11]

  return status;
 80040fc:	7afb      	ldrb	r3, [r7, #11]
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3710      	adds	r7, #16
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	40022000 	.word	0x40022000
 800410c:	40021000 	.word	0x40021000
 8004110:	080096d8 	.word	0x080096d8
 8004114:	20000024 	.word	0x20000024
 8004118:	20000028 	.word	0x20000028

0800411c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800411c:	b480      	push	{r7}
 800411e:	b089      	sub	sp, #36	; 0x24
 8004120:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004122:	2300      	movs	r3, #0
 8004124:	61fb      	str	r3, [r7, #28]
 8004126:	2300      	movs	r3, #0
 8004128:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800412a:	4b3d      	ldr	r3, [pc, #244]	; (8004220 <HAL_RCC_GetSysClockFreq+0x104>)
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	f003 030c 	and.w	r3, r3, #12
 8004132:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004134:	4b3a      	ldr	r3, [pc, #232]	; (8004220 <HAL_RCC_GetSysClockFreq+0x104>)
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	f003 0303 	and.w	r3, r3, #3
 800413c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d005      	beq.n	8004150 <HAL_RCC_GetSysClockFreq+0x34>
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	2b0c      	cmp	r3, #12
 8004148:	d121      	bne.n	800418e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2b01      	cmp	r3, #1
 800414e:	d11e      	bne.n	800418e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004150:	4b33      	ldr	r3, [pc, #204]	; (8004220 <HAL_RCC_GetSysClockFreq+0x104>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 0308 	and.w	r3, r3, #8
 8004158:	2b00      	cmp	r3, #0
 800415a:	d107      	bne.n	800416c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800415c:	4b30      	ldr	r3, [pc, #192]	; (8004220 <HAL_RCC_GetSysClockFreq+0x104>)
 800415e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004162:	0a1b      	lsrs	r3, r3, #8
 8004164:	f003 030f 	and.w	r3, r3, #15
 8004168:	61fb      	str	r3, [r7, #28]
 800416a:	e005      	b.n	8004178 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800416c:	4b2c      	ldr	r3, [pc, #176]	; (8004220 <HAL_RCC_GetSysClockFreq+0x104>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	091b      	lsrs	r3, r3, #4
 8004172:	f003 030f 	and.w	r3, r3, #15
 8004176:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004178:	4a2a      	ldr	r2, [pc, #168]	; (8004224 <HAL_RCC_GetSysClockFreq+0x108>)
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004180:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d10d      	bne.n	80041a4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004188:	69fb      	ldr	r3, [r7, #28]
 800418a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800418c:	e00a      	b.n	80041a4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	2b04      	cmp	r3, #4
 8004192:	d102      	bne.n	800419a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004194:	4b24      	ldr	r3, [pc, #144]	; (8004228 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004196:	61bb      	str	r3, [r7, #24]
 8004198:	e004      	b.n	80041a4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	2b08      	cmp	r3, #8
 800419e:	d101      	bne.n	80041a4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80041a0:	4b22      	ldr	r3, [pc, #136]	; (800422c <HAL_RCC_GetSysClockFreq+0x110>)
 80041a2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	2b0c      	cmp	r3, #12
 80041a8:	d133      	bne.n	8004212 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80041aa:	4b1d      	ldr	r3, [pc, #116]	; (8004220 <HAL_RCC_GetSysClockFreq+0x104>)
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	f003 0303 	and.w	r3, r3, #3
 80041b2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	2b02      	cmp	r3, #2
 80041b8:	d002      	beq.n	80041c0 <HAL_RCC_GetSysClockFreq+0xa4>
 80041ba:	2b03      	cmp	r3, #3
 80041bc:	d003      	beq.n	80041c6 <HAL_RCC_GetSysClockFreq+0xaa>
 80041be:	e005      	b.n	80041cc <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80041c0:	4b19      	ldr	r3, [pc, #100]	; (8004228 <HAL_RCC_GetSysClockFreq+0x10c>)
 80041c2:	617b      	str	r3, [r7, #20]
      break;
 80041c4:	e005      	b.n	80041d2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80041c6:	4b19      	ldr	r3, [pc, #100]	; (800422c <HAL_RCC_GetSysClockFreq+0x110>)
 80041c8:	617b      	str	r3, [r7, #20]
      break;
 80041ca:	e002      	b.n	80041d2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	617b      	str	r3, [r7, #20]
      break;
 80041d0:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80041d2:	4b13      	ldr	r3, [pc, #76]	; (8004220 <HAL_RCC_GetSysClockFreq+0x104>)
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	091b      	lsrs	r3, r3, #4
 80041d8:	f003 0307 	and.w	r3, r3, #7
 80041dc:	3301      	adds	r3, #1
 80041de:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80041e0:	4b0f      	ldr	r3, [pc, #60]	; (8004220 <HAL_RCC_GetSysClockFreq+0x104>)
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	0a1b      	lsrs	r3, r3, #8
 80041e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041ea:	697a      	ldr	r2, [r7, #20]
 80041ec:	fb02 f203 	mul.w	r2, r2, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80041f6:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80041f8:	4b09      	ldr	r3, [pc, #36]	; (8004220 <HAL_RCC_GetSysClockFreq+0x104>)
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	0e5b      	lsrs	r3, r3, #25
 80041fe:	f003 0303 	and.w	r3, r3, #3
 8004202:	3301      	adds	r3, #1
 8004204:	005b      	lsls	r3, r3, #1
 8004206:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004208:	697a      	ldr	r2, [r7, #20]
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004210:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004212:	69bb      	ldr	r3, [r7, #24]
}
 8004214:	4618      	mov	r0, r3
 8004216:	3724      	adds	r7, #36	; 0x24
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr
 8004220:	40021000 	.word	0x40021000
 8004224:	080096f0 	.word	0x080096f0
 8004228:	00f42400 	.word	0x00f42400
 800422c:	007a1200 	.word	0x007a1200

08004230 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004230:	b480      	push	{r7}
 8004232:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004234:	4b03      	ldr	r3, [pc, #12]	; (8004244 <HAL_RCC_GetHCLKFreq+0x14>)
 8004236:	681b      	ldr	r3, [r3, #0]
}
 8004238:	4618      	mov	r0, r3
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	20000024 	.word	0x20000024

08004248 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800424c:	f7ff fff0 	bl	8004230 <HAL_RCC_GetHCLKFreq>
 8004250:	4601      	mov	r1, r0
 8004252:	4b06      	ldr	r3, [pc, #24]	; (800426c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	0a1b      	lsrs	r3, r3, #8
 8004258:	f003 0307 	and.w	r3, r3, #7
 800425c:	4a04      	ldr	r2, [pc, #16]	; (8004270 <HAL_RCC_GetPCLK1Freq+0x28>)
 800425e:	5cd3      	ldrb	r3, [r2, r3]
 8004260:	f003 031f 	and.w	r3, r3, #31
 8004264:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004268:	4618      	mov	r0, r3
 800426a:	bd80      	pop	{r7, pc}
 800426c:	40021000 	.word	0x40021000
 8004270:	080096e8 	.word	0x080096e8

08004274 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004278:	f7ff ffda 	bl	8004230 <HAL_RCC_GetHCLKFreq>
 800427c:	4601      	mov	r1, r0
 800427e:	4b06      	ldr	r3, [pc, #24]	; (8004298 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	0adb      	lsrs	r3, r3, #11
 8004284:	f003 0307 	and.w	r3, r3, #7
 8004288:	4a04      	ldr	r2, [pc, #16]	; (800429c <HAL_RCC_GetPCLK2Freq+0x28>)
 800428a:	5cd3      	ldrb	r3, [r2, r3]
 800428c:	f003 031f 	and.w	r3, r3, #31
 8004290:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004294:	4618      	mov	r0, r3
 8004296:	bd80      	pop	{r7, pc}
 8004298:	40021000 	.word	0x40021000
 800429c:	080096e8 	.word	0x080096e8

080042a0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b086      	sub	sp, #24
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80042a8:	2300      	movs	r3, #0
 80042aa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80042ac:	4b2a      	ldr	r3, [pc, #168]	; (8004358 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d003      	beq.n	80042c0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80042b8:	f7ff f9ca 	bl	8003650 <HAL_PWREx_GetVoltageRange>
 80042bc:	6178      	str	r0, [r7, #20]
 80042be:	e014      	b.n	80042ea <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80042c0:	4b25      	ldr	r3, [pc, #148]	; (8004358 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042c4:	4a24      	ldr	r2, [pc, #144]	; (8004358 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042ca:	6593      	str	r3, [r2, #88]	; 0x58
 80042cc:	4b22      	ldr	r3, [pc, #136]	; (8004358 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042d4:	60fb      	str	r3, [r7, #12]
 80042d6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80042d8:	f7ff f9ba 	bl	8003650 <HAL_PWREx_GetVoltageRange>
 80042dc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80042de:	4b1e      	ldr	r3, [pc, #120]	; (8004358 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042e2:	4a1d      	ldr	r2, [pc, #116]	; (8004358 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042e8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042f0:	d10b      	bne.n	800430a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2b80      	cmp	r3, #128	; 0x80
 80042f6:	d919      	bls.n	800432c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2ba0      	cmp	r3, #160	; 0xa0
 80042fc:	d902      	bls.n	8004304 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80042fe:	2302      	movs	r3, #2
 8004300:	613b      	str	r3, [r7, #16]
 8004302:	e013      	b.n	800432c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004304:	2301      	movs	r3, #1
 8004306:	613b      	str	r3, [r7, #16]
 8004308:	e010      	b.n	800432c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2b80      	cmp	r3, #128	; 0x80
 800430e:	d902      	bls.n	8004316 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004310:	2303      	movs	r3, #3
 8004312:	613b      	str	r3, [r7, #16]
 8004314:	e00a      	b.n	800432c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2b80      	cmp	r3, #128	; 0x80
 800431a:	d102      	bne.n	8004322 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800431c:	2302      	movs	r3, #2
 800431e:	613b      	str	r3, [r7, #16]
 8004320:	e004      	b.n	800432c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2b70      	cmp	r3, #112	; 0x70
 8004326:	d101      	bne.n	800432c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004328:	2301      	movs	r3, #1
 800432a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800432c:	4b0b      	ldr	r3, [pc, #44]	; (800435c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f023 0207 	bic.w	r2, r3, #7
 8004334:	4909      	ldr	r1, [pc, #36]	; (800435c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	4313      	orrs	r3, r2
 800433a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800433c:	4b07      	ldr	r3, [pc, #28]	; (800435c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 0307 	and.w	r3, r3, #7
 8004344:	693a      	ldr	r2, [r7, #16]
 8004346:	429a      	cmp	r2, r3
 8004348:	d001      	beq.n	800434e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e000      	b.n	8004350 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800434e:	2300      	movs	r3, #0
}
 8004350:	4618      	mov	r0, r3
 8004352:	3718      	adds	r7, #24
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}
 8004358:	40021000 	.word	0x40021000
 800435c:	40022000 	.word	0x40022000

08004360 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b086      	sub	sp, #24
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004368:	2300      	movs	r3, #0
 800436a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800436c:	2300      	movs	r3, #0
 800436e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004378:	2b00      	cmp	r3, #0
 800437a:	d02f      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004380:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004384:	d005      	beq.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004386:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800438a:	d015      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x58>
 800438c:	2b00      	cmp	r3, #0
 800438e:	d007      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8004390:	e00f      	b.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004392:	4bac      	ldr	r3, [pc, #688]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	4aab      	ldr	r2, [pc, #684]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004398:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800439c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800439e:	e00c      	b.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	3304      	adds	r3, #4
 80043a4:	2100      	movs	r1, #0
 80043a6:	4618      	mov	r0, r3
 80043a8:	f000 f9dc 	bl	8004764 <RCCEx_PLLSAI1_Config>
 80043ac:	4603      	mov	r3, r0
 80043ae:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80043b0:	e003      	b.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	74fb      	strb	r3, [r7, #19]
      break;
 80043b6:	e000      	b.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 80043b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043ba:	7cfb      	ldrb	r3, [r7, #19]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d10b      	bne.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80043c0:	4ba0      	ldr	r3, [pc, #640]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80043c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043c6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043ce:	499d      	ldr	r1, [pc, #628]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80043d0:	4313      	orrs	r3, r2
 80043d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80043d6:	e001      	b.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043d8:	7cfb      	ldrb	r3, [r7, #19]
 80043da:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	f000 8099 	beq.w	800451c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043ea:	2300      	movs	r3, #0
 80043ec:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80043ee:	4b95      	ldr	r3, [pc, #596]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80043f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d101      	bne.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80043fa:	2301      	movs	r3, #1
 80043fc:	e000      	b.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 80043fe:	2300      	movs	r3, #0
 8004400:	2b00      	cmp	r3, #0
 8004402:	d00d      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004404:	4b8f      	ldr	r3, [pc, #572]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004406:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004408:	4a8e      	ldr	r2, [pc, #568]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800440a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800440e:	6593      	str	r3, [r2, #88]	; 0x58
 8004410:	4b8c      	ldr	r3, [pc, #560]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004412:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004414:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004418:	60bb      	str	r3, [r7, #8]
 800441a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800441c:	2301      	movs	r3, #1
 800441e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004420:	4b89      	ldr	r3, [pc, #548]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a88      	ldr	r2, [pc, #544]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004426:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800442a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800442c:	f7fe fa1e 	bl	800286c <HAL_GetTick>
 8004430:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004432:	e009      	b.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004434:	f7fe fa1a 	bl	800286c <HAL_GetTick>
 8004438:	4602      	mov	r2, r0
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	2b02      	cmp	r3, #2
 8004440:	d902      	bls.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	74fb      	strb	r3, [r7, #19]
        break;
 8004446:	e005      	b.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004448:	4b7f      	ldr	r3, [pc, #508]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004450:	2b00      	cmp	r3, #0
 8004452:	d0ef      	beq.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 8004454:	7cfb      	ldrb	r3, [r7, #19]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d155      	bne.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800445a:	4b7a      	ldr	r3, [pc, #488]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800445c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004460:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004464:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d01e      	beq.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004470:	697a      	ldr	r2, [r7, #20]
 8004472:	429a      	cmp	r2, r3
 8004474:	d019      	beq.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004476:	4b73      	ldr	r3, [pc, #460]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004478:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800447c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004480:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004482:	4b70      	ldr	r3, [pc, #448]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004484:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004488:	4a6e      	ldr	r2, [pc, #440]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800448a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800448e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004492:	4b6c      	ldr	r3, [pc, #432]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004494:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004498:	4a6a      	ldr	r2, [pc, #424]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800449a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800449e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80044a2:	4a68      	ldr	r2, [pc, #416]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	f003 0301 	and.w	r3, r3, #1
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d016      	beq.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044b4:	f7fe f9da 	bl	800286c <HAL_GetTick>
 80044b8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044ba:	e00b      	b.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044bc:	f7fe f9d6 	bl	800286c <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d902      	bls.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	74fb      	strb	r3, [r7, #19]
            break;
 80044d2:	e006      	b.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044d4:	4b5b      	ldr	r3, [pc, #364]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80044d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044da:	f003 0302 	and.w	r3, r3, #2
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d0ec      	beq.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 80044e2:	7cfb      	ldrb	r3, [r7, #19]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d10b      	bne.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044e8:	4b56      	ldr	r3, [pc, #344]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80044ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044f6:	4953      	ldr	r1, [pc, #332]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80044f8:	4313      	orrs	r3, r2
 80044fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80044fe:	e004      	b.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004500:	7cfb      	ldrb	r3, [r7, #19]
 8004502:	74bb      	strb	r3, [r7, #18]
 8004504:	e001      	b.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004506:	7cfb      	ldrb	r3, [r7, #19]
 8004508:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800450a:	7c7b      	ldrb	r3, [r7, #17]
 800450c:	2b01      	cmp	r3, #1
 800450e:	d105      	bne.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004510:	4b4c      	ldr	r3, [pc, #304]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004514:	4a4b      	ldr	r2, [pc, #300]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004516:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800451a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 0301 	and.w	r3, r3, #1
 8004524:	2b00      	cmp	r3, #0
 8004526:	d00a      	beq.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004528:	4b46      	ldr	r3, [pc, #280]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800452a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800452e:	f023 0203 	bic.w	r2, r3, #3
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6a1b      	ldr	r3, [r3, #32]
 8004536:	4943      	ldr	r1, [pc, #268]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004538:	4313      	orrs	r3, r2
 800453a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 0302 	and.w	r3, r3, #2
 8004546:	2b00      	cmp	r3, #0
 8004548:	d00a      	beq.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800454a:	4b3e      	ldr	r3, [pc, #248]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800454c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004550:	f023 020c 	bic.w	r2, r3, #12
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004558:	493a      	ldr	r1, [pc, #232]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800455a:	4313      	orrs	r3, r2
 800455c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0320 	and.w	r3, r3, #32
 8004568:	2b00      	cmp	r3, #0
 800456a:	d00a      	beq.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800456c:	4b35      	ldr	r3, [pc, #212]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800456e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004572:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800457a:	4932      	ldr	r1, [pc, #200]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800457c:	4313      	orrs	r3, r2
 800457e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800458a:	2b00      	cmp	r3, #0
 800458c:	d00a      	beq.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800458e:	4b2d      	ldr	r3, [pc, #180]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004590:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004594:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800459c:	4929      	ldr	r1, [pc, #164]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800459e:	4313      	orrs	r3, r2
 80045a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d00a      	beq.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80045b0:	4b24      	ldr	r3, [pc, #144]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80045b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045be:	4921      	ldr	r1, [pc, #132]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80045c0:	4313      	orrs	r3, r2
 80045c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d00a      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80045d2:	4b1c      	ldr	r3, [pc, #112]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80045d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045d8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e0:	4918      	ldr	r1, [pc, #96]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80045e2:	4313      	orrs	r3, r2
 80045e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d00a      	beq.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80045f4:	4b13      	ldr	r3, [pc, #76]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80045f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045fa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004602:	4910      	ldr	r1, [pc, #64]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004604:	4313      	orrs	r3, r2
 8004606:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004612:	2b00      	cmp	r3, #0
 8004614:	d02c      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004616:	4b0b      	ldr	r3, [pc, #44]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004618:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800461c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004624:	4907      	ldr	r1, [pc, #28]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004626:	4313      	orrs	r3, r2
 8004628:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004630:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004634:	d10a      	bne.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004636:	4b03      	ldr	r3, [pc, #12]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	4a02      	ldr	r2, [pc, #8]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800463c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004640:	60d3      	str	r3, [r2, #12]
 8004642:	e015      	b.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8004644:	40021000 	.word	0x40021000
 8004648:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004650:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004654:	d10c      	bne.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x310>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	3304      	adds	r3, #4
 800465a:	2101      	movs	r1, #1
 800465c:	4618      	mov	r0, r3
 800465e:	f000 f881 	bl	8004764 <RCCEx_PLLSAI1_Config>
 8004662:	4603      	mov	r3, r0
 8004664:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004666:	7cfb      	ldrb	r3, [r7, #19]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d001      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x310>
        {
          /* set overall return value */
          status = ret;
 800466c:	7cfb      	ldrb	r3, [r7, #19]
 800466e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004678:	2b00      	cmp	r3, #0
 800467a:	d028      	beq.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800467c:	4b30      	ldr	r3, [pc, #192]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800467e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004682:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800468a:	492d      	ldr	r1, [pc, #180]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800468c:	4313      	orrs	r3, r2
 800468e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004696:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800469a:	d106      	bne.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800469c:	4b28      	ldr	r3, [pc, #160]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	4a27      	ldr	r2, [pc, #156]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046a6:	60d3      	str	r3, [r2, #12]
 80046a8:	e011      	b.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80046b2:	d10c      	bne.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	3304      	adds	r3, #4
 80046b8:	2101      	movs	r1, #1
 80046ba:	4618      	mov	r0, r3
 80046bc:	f000 f852 	bl	8004764 <RCCEx_PLLSAI1_Config>
 80046c0:	4603      	mov	r3, r0
 80046c2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80046c4:	7cfb      	ldrb	r3, [r7, #19]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d001      	beq.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x36e>
      {
        /* set overall return value */
        status = ret;
 80046ca:	7cfb      	ldrb	r3, [r7, #19]
 80046cc:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d01c      	beq.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80046da:	4b19      	ldr	r3, [pc, #100]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046e0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046e8:	4915      	ldr	r1, [pc, #84]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046ea:	4313      	orrs	r3, r2
 80046ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80046f8:	d10c      	bne.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	3304      	adds	r3, #4
 80046fe:	2102      	movs	r1, #2
 8004700:	4618      	mov	r0, r3
 8004702:	f000 f82f 	bl	8004764 <RCCEx_PLLSAI1_Config>
 8004706:	4603      	mov	r3, r0
 8004708:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800470a:	7cfb      	ldrb	r3, [r7, #19]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d001      	beq.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 8004710:	7cfb      	ldrb	r3, [r7, #19]
 8004712:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800471c:	2b00      	cmp	r3, #0
 800471e:	d00a      	beq.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004720:	4b07      	ldr	r3, [pc, #28]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004726:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800472e:	4904      	ldr	r1, [pc, #16]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004730:	4313      	orrs	r3, r2
 8004732:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004736:	7cbb      	ldrb	r3, [r7, #18]
}
 8004738:	4618      	mov	r0, r3
 800473a:	3718      	adds	r7, #24
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}
 8004740:	40021000 	.word	0x40021000

08004744 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004744:	b480      	push	{r7}
 8004746:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004748:	4b05      	ldr	r3, [pc, #20]	; (8004760 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a04      	ldr	r2, [pc, #16]	; (8004760 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800474e:	f043 0304 	orr.w	r3, r3, #4
 8004752:	6013      	str	r3, [r2, #0]
}
 8004754:	bf00      	nop
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr
 800475e:	bf00      	nop
 8004760:	40021000 	.word	0x40021000

08004764 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b084      	sub	sp, #16
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800476e:	2300      	movs	r3, #0
 8004770:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004772:	4b73      	ldr	r3, [pc, #460]	; (8004940 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	f003 0303 	and.w	r3, r3, #3
 800477a:	2b00      	cmp	r3, #0
 800477c:	d018      	beq.n	80047b0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800477e:	4b70      	ldr	r3, [pc, #448]	; (8004940 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	f003 0203 	and.w	r2, r3, #3
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	429a      	cmp	r2, r3
 800478c:	d10d      	bne.n	80047aa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
       ||
 8004792:	2b00      	cmp	r3, #0
 8004794:	d009      	beq.n	80047aa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004796:	4b6a      	ldr	r3, [pc, #424]	; (8004940 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	091b      	lsrs	r3, r3, #4
 800479c:	f003 0307 	and.w	r3, r3, #7
 80047a0:	1c5a      	adds	r2, r3, #1
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	685b      	ldr	r3, [r3, #4]
       ||
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d044      	beq.n	8004834 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	73fb      	strb	r3, [r7, #15]
 80047ae:	e041      	b.n	8004834 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	2b02      	cmp	r3, #2
 80047b6:	d00c      	beq.n	80047d2 <RCCEx_PLLSAI1_Config+0x6e>
 80047b8:	2b03      	cmp	r3, #3
 80047ba:	d013      	beq.n	80047e4 <RCCEx_PLLSAI1_Config+0x80>
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d120      	bne.n	8004802 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80047c0:	4b5f      	ldr	r3, [pc, #380]	; (8004940 <RCCEx_PLLSAI1_Config+0x1dc>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 0302 	and.w	r3, r3, #2
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d11d      	bne.n	8004808 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047d0:	e01a      	b.n	8004808 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80047d2:	4b5b      	ldr	r3, [pc, #364]	; (8004940 <RCCEx_PLLSAI1_Config+0x1dc>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d116      	bne.n	800480c <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047e2:	e013      	b.n	800480c <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80047e4:	4b56      	ldr	r3, [pc, #344]	; (8004940 <RCCEx_PLLSAI1_Config+0x1dc>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d10f      	bne.n	8004810 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80047f0:	4b53      	ldr	r3, [pc, #332]	; (8004940 <RCCEx_PLLSAI1_Config+0x1dc>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d109      	bne.n	8004810 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004800:	e006      	b.n	8004810 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	73fb      	strb	r3, [r7, #15]
      break;
 8004806:	e004      	b.n	8004812 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004808:	bf00      	nop
 800480a:	e002      	b.n	8004812 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800480c:	bf00      	nop
 800480e:	e000      	b.n	8004812 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004810:	bf00      	nop
    }

    if(status == HAL_OK)
 8004812:	7bfb      	ldrb	r3, [r7, #15]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d10d      	bne.n	8004834 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004818:	4b49      	ldr	r3, [pc, #292]	; (8004940 <RCCEx_PLLSAI1_Config+0x1dc>)
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6819      	ldr	r1, [r3, #0]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	3b01      	subs	r3, #1
 800482a:	011b      	lsls	r3, r3, #4
 800482c:	430b      	orrs	r3, r1
 800482e:	4944      	ldr	r1, [pc, #272]	; (8004940 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004830:	4313      	orrs	r3, r2
 8004832:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004834:	7bfb      	ldrb	r3, [r7, #15]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d17c      	bne.n	8004934 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800483a:	4b41      	ldr	r3, [pc, #260]	; (8004940 <RCCEx_PLLSAI1_Config+0x1dc>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a40      	ldr	r2, [pc, #256]	; (8004940 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004840:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004844:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004846:	f7fe f811 	bl	800286c <HAL_GetTick>
 800484a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800484c:	e009      	b.n	8004862 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800484e:	f7fe f80d 	bl	800286c <HAL_GetTick>
 8004852:	4602      	mov	r2, r0
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	1ad3      	subs	r3, r2, r3
 8004858:	2b02      	cmp	r3, #2
 800485a:	d902      	bls.n	8004862 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800485c:	2303      	movs	r3, #3
 800485e:	73fb      	strb	r3, [r7, #15]
        break;
 8004860:	e005      	b.n	800486e <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004862:	4b37      	ldr	r3, [pc, #220]	; (8004940 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d1ef      	bne.n	800484e <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800486e:	7bfb      	ldrb	r3, [r7, #15]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d15f      	bne.n	8004934 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d110      	bne.n	800489c <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800487a:	4b31      	ldr	r3, [pc, #196]	; (8004940 <RCCEx_PLLSAI1_Config+0x1dc>)
 800487c:	691b      	ldr	r3, [r3, #16]
 800487e:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004882:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	6892      	ldr	r2, [r2, #8]
 800488a:	0211      	lsls	r1, r2, #8
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	68d2      	ldr	r2, [r2, #12]
 8004890:	06d2      	lsls	r2, r2, #27
 8004892:	430a      	orrs	r2, r1
 8004894:	492a      	ldr	r1, [pc, #168]	; (8004940 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004896:	4313      	orrs	r3, r2
 8004898:	610b      	str	r3, [r1, #16]
 800489a:	e027      	b.n	80048ec <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d112      	bne.n	80048c8 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80048a2:	4b27      	ldr	r3, [pc, #156]	; (8004940 <RCCEx_PLLSAI1_Config+0x1dc>)
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80048aa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	6892      	ldr	r2, [r2, #8]
 80048b2:	0211      	lsls	r1, r2, #8
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	6912      	ldr	r2, [r2, #16]
 80048b8:	0852      	lsrs	r2, r2, #1
 80048ba:	3a01      	subs	r2, #1
 80048bc:	0552      	lsls	r2, r2, #21
 80048be:	430a      	orrs	r2, r1
 80048c0:	491f      	ldr	r1, [pc, #124]	; (8004940 <RCCEx_PLLSAI1_Config+0x1dc>)
 80048c2:	4313      	orrs	r3, r2
 80048c4:	610b      	str	r3, [r1, #16]
 80048c6:	e011      	b.n	80048ec <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80048c8:	4b1d      	ldr	r3, [pc, #116]	; (8004940 <RCCEx_PLLSAI1_Config+0x1dc>)
 80048ca:	691b      	ldr	r3, [r3, #16]
 80048cc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80048d0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80048d4:	687a      	ldr	r2, [r7, #4]
 80048d6:	6892      	ldr	r2, [r2, #8]
 80048d8:	0211      	lsls	r1, r2, #8
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	6952      	ldr	r2, [r2, #20]
 80048de:	0852      	lsrs	r2, r2, #1
 80048e0:	3a01      	subs	r2, #1
 80048e2:	0652      	lsls	r2, r2, #25
 80048e4:	430a      	orrs	r2, r1
 80048e6:	4916      	ldr	r1, [pc, #88]	; (8004940 <RCCEx_PLLSAI1_Config+0x1dc>)
 80048e8:	4313      	orrs	r3, r2
 80048ea:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80048ec:	4b14      	ldr	r3, [pc, #80]	; (8004940 <RCCEx_PLLSAI1_Config+0x1dc>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a13      	ldr	r2, [pc, #76]	; (8004940 <RCCEx_PLLSAI1_Config+0x1dc>)
 80048f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80048f6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048f8:	f7fd ffb8 	bl	800286c <HAL_GetTick>
 80048fc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80048fe:	e009      	b.n	8004914 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004900:	f7fd ffb4 	bl	800286c <HAL_GetTick>
 8004904:	4602      	mov	r2, r0
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	1ad3      	subs	r3, r2, r3
 800490a:	2b02      	cmp	r3, #2
 800490c:	d902      	bls.n	8004914 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 800490e:	2303      	movs	r3, #3
 8004910:	73fb      	strb	r3, [r7, #15]
          break;
 8004912:	e005      	b.n	8004920 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004914:	4b0a      	ldr	r3, [pc, #40]	; (8004940 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800491c:	2b00      	cmp	r3, #0
 800491e:	d0ef      	beq.n	8004900 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8004920:	7bfb      	ldrb	r3, [r7, #15]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d106      	bne.n	8004934 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004926:	4b06      	ldr	r3, [pc, #24]	; (8004940 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004928:	691a      	ldr	r2, [r3, #16]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	699b      	ldr	r3, [r3, #24]
 800492e:	4904      	ldr	r1, [pc, #16]	; (8004940 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004930:	4313      	orrs	r3, r2
 8004932:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004934:	7bfb      	ldrb	r3, [r7, #15]
}
 8004936:	4618      	mov	r0, r3
 8004938:	3710      	adds	r7, #16
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
 800493e:	bf00      	nop
 8004940:	40021000 	.word	0x40021000

08004944 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b082      	sub	sp, #8
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d101      	bne.n	8004956 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e01d      	b.n	8004992 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800495c:	b2db      	uxtb	r3, r3
 800495e:	2b00      	cmp	r3, #0
 8004960:	d106      	bne.n	8004970 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f7fd fdaa 	bl	80024c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2202      	movs	r2, #2
 8004974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	3304      	adds	r3, #4
 8004980:	4619      	mov	r1, r3
 8004982:	4610      	mov	r0, r2
 8004984:	f000 fa5e 	bl	8004e44 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2201      	movs	r2, #1
 800498c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004990:	2300      	movs	r3, #0
}
 8004992:	4618      	mov	r0, r3
 8004994:	3708      	adds	r7, #8
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
	...

0800499c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800499c:	b480      	push	{r7}
 800499e:	b085      	sub	sp, #20
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2202      	movs	r2, #2
 80049a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	689a      	ldr	r2, [r3, #8]
 80049b2:	4b0e      	ldr	r3, [pc, #56]	; (80049ec <HAL_TIM_Base_Start+0x50>)
 80049b4:	4013      	ands	r3, r2
 80049b6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2b06      	cmp	r3, #6
 80049bc:	d00b      	beq.n	80049d6 <HAL_TIM_Base_Start+0x3a>
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049c4:	d007      	beq.n	80049d6 <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f042 0201 	orr.w	r2, r2, #1
 80049d4:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2201      	movs	r2, #1
 80049da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80049de:	2300      	movs	r3, #0
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3714      	adds	r7, #20
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr
 80049ec:	00010007 	.word	0x00010007

080049f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b085      	sub	sp, #20
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	68da      	ldr	r2, [r3, #12]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f042 0201 	orr.w	r2, r2, #1
 8004a06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	689a      	ldr	r2, [r3, #8]
 8004a0e:	4b0c      	ldr	r3, [pc, #48]	; (8004a40 <HAL_TIM_Base_Start_IT+0x50>)
 8004a10:	4013      	ands	r3, r2
 8004a12:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2b06      	cmp	r3, #6
 8004a18:	d00b      	beq.n	8004a32 <HAL_TIM_Base_Start_IT+0x42>
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a20:	d007      	beq.n	8004a32 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f042 0201 	orr.w	r2, r2, #1
 8004a30:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a32:	2300      	movs	r3, #0
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3714      	adds	r7, #20
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr
 8004a40:	00010007 	.word	0x00010007

08004a44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b082      	sub	sp, #8
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	691b      	ldr	r3, [r3, #16]
 8004a52:	f003 0302 	and.w	r3, r3, #2
 8004a56:	2b02      	cmp	r3, #2
 8004a58:	d122      	bne.n	8004aa0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	f003 0302 	and.w	r3, r3, #2
 8004a64:	2b02      	cmp	r3, #2
 8004a66:	d11b      	bne.n	8004aa0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f06f 0202 	mvn.w	r2, #2
 8004a70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2201      	movs	r2, #1
 8004a76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	699b      	ldr	r3, [r3, #24]
 8004a7e:	f003 0303 	and.w	r3, r3, #3
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d003      	beq.n	8004a8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f000 f9be 	bl	8004e08 <HAL_TIM_IC_CaptureCallback>
 8004a8c:	e005      	b.n	8004a9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f000 f9b0 	bl	8004df4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f000 f9c1 	bl	8004e1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	691b      	ldr	r3, [r3, #16]
 8004aa6:	f003 0304 	and.w	r3, r3, #4
 8004aaa:	2b04      	cmp	r3, #4
 8004aac:	d122      	bne.n	8004af4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	f003 0304 	and.w	r3, r3, #4
 8004ab8:	2b04      	cmp	r3, #4
 8004aba:	d11b      	bne.n	8004af4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f06f 0204 	mvn.w	r2, #4
 8004ac4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2202      	movs	r2, #2
 8004aca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	699b      	ldr	r3, [r3, #24]
 8004ad2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d003      	beq.n	8004ae2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f000 f994 	bl	8004e08 <HAL_TIM_IC_CaptureCallback>
 8004ae0:	e005      	b.n	8004aee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f000 f986 	bl	8004df4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f000 f997 	bl	8004e1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	f003 0308 	and.w	r3, r3, #8
 8004afe:	2b08      	cmp	r3, #8
 8004b00:	d122      	bne.n	8004b48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	f003 0308 	and.w	r3, r3, #8
 8004b0c:	2b08      	cmp	r3, #8
 8004b0e:	d11b      	bne.n	8004b48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f06f 0208 	mvn.w	r2, #8
 8004b18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2204      	movs	r2, #4
 8004b1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	69db      	ldr	r3, [r3, #28]
 8004b26:	f003 0303 	and.w	r3, r3, #3
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d003      	beq.n	8004b36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 f96a 	bl	8004e08 <HAL_TIM_IC_CaptureCallback>
 8004b34:	e005      	b.n	8004b42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 f95c 	bl	8004df4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f000 f96d 	bl	8004e1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	691b      	ldr	r3, [r3, #16]
 8004b4e:	f003 0310 	and.w	r3, r3, #16
 8004b52:	2b10      	cmp	r3, #16
 8004b54:	d122      	bne.n	8004b9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	f003 0310 	and.w	r3, r3, #16
 8004b60:	2b10      	cmp	r3, #16
 8004b62:	d11b      	bne.n	8004b9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f06f 0210 	mvn.w	r2, #16
 8004b6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2208      	movs	r2, #8
 8004b72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	69db      	ldr	r3, [r3, #28]
 8004b7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d003      	beq.n	8004b8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 f940 	bl	8004e08 <HAL_TIM_IC_CaptureCallback>
 8004b88:	e005      	b.n	8004b96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f000 f932 	bl	8004df4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f000 f943 	bl	8004e1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	691b      	ldr	r3, [r3, #16]
 8004ba2:	f003 0301 	and.w	r3, r3, #1
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d10e      	bne.n	8004bc8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	f003 0301 	and.w	r3, r3, #1
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d107      	bne.n	8004bc8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f06f 0201 	mvn.w	r2, #1
 8004bc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f7fc fcfc 	bl	80015c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	691b      	ldr	r3, [r3, #16]
 8004bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bd2:	2b80      	cmp	r3, #128	; 0x80
 8004bd4:	d10e      	bne.n	8004bf4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004be0:	2b80      	cmp	r3, #128	; 0x80
 8004be2:	d107      	bne.n	8004bf4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004bec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 fa96 	bl	8005120 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	691b      	ldr	r3, [r3, #16]
 8004bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c02:	d10e      	bne.n	8004c22 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	68db      	ldr	r3, [r3, #12]
 8004c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c0e:	2b80      	cmp	r3, #128	; 0x80
 8004c10:	d107      	bne.n	8004c22 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004c1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f000 fa89 	bl	8005134 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	691b      	ldr	r3, [r3, #16]
 8004c28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c2c:	2b40      	cmp	r3, #64	; 0x40
 8004c2e:	d10e      	bne.n	8004c4e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	68db      	ldr	r3, [r3, #12]
 8004c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c3a:	2b40      	cmp	r3, #64	; 0x40
 8004c3c:	d107      	bne.n	8004c4e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f000 f8f1 	bl	8004e30 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	691b      	ldr	r3, [r3, #16]
 8004c54:	f003 0320 	and.w	r3, r3, #32
 8004c58:	2b20      	cmp	r3, #32
 8004c5a:	d10e      	bne.n	8004c7a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	f003 0320 	and.w	r3, r3, #32
 8004c66:	2b20      	cmp	r3, #32
 8004c68:	d107      	bne.n	8004c7a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f06f 0220 	mvn.w	r2, #32
 8004c72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f000 fa49 	bl	800510c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c7a:	bf00      	nop
 8004c7c:	3708      	adds	r7, #8
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}

08004c82 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c82:	b580      	push	{r7, lr}
 8004c84:	b084      	sub	sp, #16
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	6078      	str	r0, [r7, #4]
 8004c8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d101      	bne.n	8004c9a <HAL_TIM_ConfigClockSource+0x18>
 8004c96:	2302      	movs	r3, #2
 8004c98:	e0a8      	b.n	8004dec <HAL_TIM_ConfigClockSource+0x16a>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2202      	movs	r2, #2
 8004ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cb8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004cbc:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004cc4:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	68fa      	ldr	r2, [r7, #12]
 8004ccc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	2b40      	cmp	r3, #64	; 0x40
 8004cd4:	d067      	beq.n	8004da6 <HAL_TIM_ConfigClockSource+0x124>
 8004cd6:	2b40      	cmp	r3, #64	; 0x40
 8004cd8:	d80b      	bhi.n	8004cf2 <HAL_TIM_ConfigClockSource+0x70>
 8004cda:	2b10      	cmp	r3, #16
 8004cdc:	d073      	beq.n	8004dc6 <HAL_TIM_ConfigClockSource+0x144>
 8004cde:	2b10      	cmp	r3, #16
 8004ce0:	d802      	bhi.n	8004ce8 <HAL_TIM_ConfigClockSource+0x66>
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d06f      	beq.n	8004dc6 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004ce6:	e078      	b.n	8004dda <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004ce8:	2b20      	cmp	r3, #32
 8004cea:	d06c      	beq.n	8004dc6 <HAL_TIM_ConfigClockSource+0x144>
 8004cec:	2b30      	cmp	r3, #48	; 0x30
 8004cee:	d06a      	beq.n	8004dc6 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8004cf0:	e073      	b.n	8004dda <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004cf2:	2b70      	cmp	r3, #112	; 0x70
 8004cf4:	d00d      	beq.n	8004d12 <HAL_TIM_ConfigClockSource+0x90>
 8004cf6:	2b70      	cmp	r3, #112	; 0x70
 8004cf8:	d804      	bhi.n	8004d04 <HAL_TIM_ConfigClockSource+0x82>
 8004cfa:	2b50      	cmp	r3, #80	; 0x50
 8004cfc:	d033      	beq.n	8004d66 <HAL_TIM_ConfigClockSource+0xe4>
 8004cfe:	2b60      	cmp	r3, #96	; 0x60
 8004d00:	d041      	beq.n	8004d86 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8004d02:	e06a      	b.n	8004dda <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004d04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d08:	d066      	beq.n	8004dd8 <HAL_TIM_ConfigClockSource+0x156>
 8004d0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d0e:	d017      	beq.n	8004d40 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8004d10:	e063      	b.n	8004dda <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6818      	ldr	r0, [r3, #0]
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	6899      	ldr	r1, [r3, #8]
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	685a      	ldr	r2, [r3, #4]
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	f000 f96d 	bl	8005000 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004d34:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	68fa      	ldr	r2, [r7, #12]
 8004d3c:	609a      	str	r2, [r3, #8]
      break;
 8004d3e:	e04c      	b.n	8004dda <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6818      	ldr	r0, [r3, #0]
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	6899      	ldr	r1, [r3, #8]
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	685a      	ldr	r2, [r3, #4]
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	f000 f956 	bl	8005000 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	689a      	ldr	r2, [r3, #8]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d62:	609a      	str	r2, [r3, #8]
      break;
 8004d64:	e039      	b.n	8004dda <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6818      	ldr	r0, [r3, #0]
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	6859      	ldr	r1, [r3, #4]
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	68db      	ldr	r3, [r3, #12]
 8004d72:	461a      	mov	r2, r3
 8004d74:	f000 f8ca 	bl	8004f0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	2150      	movs	r1, #80	; 0x50
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f000 f923 	bl	8004fca <TIM_ITRx_SetConfig>
      break;
 8004d84:	e029      	b.n	8004dda <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6818      	ldr	r0, [r3, #0]
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	6859      	ldr	r1, [r3, #4]
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	68db      	ldr	r3, [r3, #12]
 8004d92:	461a      	mov	r2, r3
 8004d94:	f000 f8e9 	bl	8004f6a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	2160      	movs	r1, #96	; 0x60
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f000 f913 	bl	8004fca <TIM_ITRx_SetConfig>
      break;
 8004da4:	e019      	b.n	8004dda <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6818      	ldr	r0, [r3, #0]
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	6859      	ldr	r1, [r3, #4]
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	68db      	ldr	r3, [r3, #12]
 8004db2:	461a      	mov	r2, r3
 8004db4:	f000 f8aa 	bl	8004f0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	2140      	movs	r1, #64	; 0x40
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f000 f903 	bl	8004fca <TIM_ITRx_SetConfig>
      break;
 8004dc4:	e009      	b.n	8004dda <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4619      	mov	r1, r3
 8004dd0:	4610      	mov	r0, r2
 8004dd2:	f000 f8fa 	bl	8004fca <TIM_ITRx_SetConfig>
      break;
 8004dd6:	e000      	b.n	8004dda <HAL_TIM_ConfigClockSource+0x158>
      break;
 8004dd8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2201      	movs	r2, #1
 8004dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004dea:	2300      	movs	r3, #0
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3710      	adds	r7, #16
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}

08004df4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004dfc:	bf00      	nop
 8004dfe:	370c      	adds	r7, #12
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr

08004e08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b083      	sub	sp, #12
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e10:	bf00      	nop
 8004e12:	370c      	adds	r7, #12
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr

08004e1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b083      	sub	sp, #12
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e24:	bf00      	nop
 8004e26:	370c      	adds	r7, #12
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr

08004e30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b083      	sub	sp, #12
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e38:	bf00      	nop
 8004e3a:	370c      	adds	r7, #12
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr

08004e44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b085      	sub	sp, #20
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	4a2a      	ldr	r2, [pc, #168]	; (8004f00 <TIM_Base_SetConfig+0xbc>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d003      	beq.n	8004e64 <TIM_Base_SetConfig+0x20>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e62:	d108      	bne.n	8004e76 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	68fa      	ldr	r2, [r7, #12]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	4a21      	ldr	r2, [pc, #132]	; (8004f00 <TIM_Base_SetConfig+0xbc>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d00b      	beq.n	8004e96 <TIM_Base_SetConfig+0x52>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e84:	d007      	beq.n	8004e96 <TIM_Base_SetConfig+0x52>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	4a1e      	ldr	r2, [pc, #120]	; (8004f04 <TIM_Base_SetConfig+0xc0>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d003      	beq.n	8004e96 <TIM_Base_SetConfig+0x52>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4a1d      	ldr	r2, [pc, #116]	; (8004f08 <TIM_Base_SetConfig+0xc4>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d108      	bne.n	8004ea8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	68db      	ldr	r3, [r3, #12]
 8004ea2:	68fa      	ldr	r2, [r7, #12]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	695b      	ldr	r3, [r3, #20]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	68fa      	ldr	r2, [r7, #12]
 8004eba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	689a      	ldr	r2, [r3, #8]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4a0c      	ldr	r2, [pc, #48]	; (8004f00 <TIM_Base_SetConfig+0xbc>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d007      	beq.n	8004ee4 <TIM_Base_SetConfig+0xa0>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	4a0b      	ldr	r2, [pc, #44]	; (8004f04 <TIM_Base_SetConfig+0xc0>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d003      	beq.n	8004ee4 <TIM_Base_SetConfig+0xa0>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	4a0a      	ldr	r2, [pc, #40]	; (8004f08 <TIM_Base_SetConfig+0xc4>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d103      	bne.n	8004eec <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	691a      	ldr	r2, [r3, #16]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	615a      	str	r2, [r3, #20]
}
 8004ef2:	bf00      	nop
 8004ef4:	3714      	adds	r7, #20
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr
 8004efe:	bf00      	nop
 8004f00:	40012c00 	.word	0x40012c00
 8004f04:	40014000 	.word	0x40014000
 8004f08:	40014400 	.word	0x40014400

08004f0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b087      	sub	sp, #28
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	60f8      	str	r0, [r7, #12]
 8004f14:	60b9      	str	r1, [r7, #8]
 8004f16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	6a1b      	ldr	r3, [r3, #32]
 8004f1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	6a1b      	ldr	r3, [r3, #32]
 8004f22:	f023 0201 	bic.w	r2, r3, #1
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	699b      	ldr	r3, [r3, #24]
 8004f2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	011b      	lsls	r3, r3, #4
 8004f3c:	693a      	ldr	r2, [r7, #16]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	f023 030a 	bic.w	r3, r3, #10
 8004f48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f4a:	697a      	ldr	r2, [r7, #20]
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	693a      	ldr	r2, [r7, #16]
 8004f56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	697a      	ldr	r2, [r7, #20]
 8004f5c:	621a      	str	r2, [r3, #32]
}
 8004f5e:	bf00      	nop
 8004f60:	371c      	adds	r7, #28
 8004f62:	46bd      	mov	sp, r7
 8004f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f68:	4770      	bx	lr

08004f6a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f6a:	b480      	push	{r7}
 8004f6c:	b087      	sub	sp, #28
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	60f8      	str	r0, [r7, #12]
 8004f72:	60b9      	str	r1, [r7, #8]
 8004f74:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	6a1b      	ldr	r3, [r3, #32]
 8004f7a:	f023 0210 	bic.w	r2, r3, #16
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	699b      	ldr	r3, [r3, #24]
 8004f86:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6a1b      	ldr	r3, [r3, #32]
 8004f8c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f94:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	031b      	lsls	r3, r3, #12
 8004f9a:	697a      	ldr	r2, [r7, #20]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004fa6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	011b      	lsls	r3, r3, #4
 8004fac:	693a      	ldr	r2, [r7, #16]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	697a      	ldr	r2, [r7, #20]
 8004fb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	693a      	ldr	r2, [r7, #16]
 8004fbc:	621a      	str	r2, [r3, #32]
}
 8004fbe:	bf00      	nop
 8004fc0:	371c      	adds	r7, #28
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr

08004fca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004fca:	b480      	push	{r7}
 8004fcc:	b085      	sub	sp, #20
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	6078      	str	r0, [r7, #4]
 8004fd2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fe0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004fe2:	683a      	ldr	r2, [r7, #0]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	f043 0307 	orr.w	r3, r3, #7
 8004fec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	68fa      	ldr	r2, [r7, #12]
 8004ff2:	609a      	str	r2, [r3, #8]
}
 8004ff4:	bf00      	nop
 8004ff6:	3714      	adds	r7, #20
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr

08005000 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005000:	b480      	push	{r7}
 8005002:	b087      	sub	sp, #28
 8005004:	af00      	add	r7, sp, #0
 8005006:	60f8      	str	r0, [r7, #12]
 8005008:	60b9      	str	r1, [r7, #8]
 800500a:	607a      	str	r2, [r7, #4]
 800500c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800501a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	021a      	lsls	r2, r3, #8
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	431a      	orrs	r2, r3
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	4313      	orrs	r3, r2
 8005028:	697a      	ldr	r2, [r7, #20]
 800502a:	4313      	orrs	r3, r2
 800502c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	697a      	ldr	r2, [r7, #20]
 8005032:	609a      	str	r2, [r3, #8]
}
 8005034:	bf00      	nop
 8005036:	371c      	adds	r7, #28
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr

08005040 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005040:	b480      	push	{r7}
 8005042:	b085      	sub	sp, #20
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005050:	2b01      	cmp	r3, #1
 8005052:	d101      	bne.n	8005058 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005054:	2302      	movs	r3, #2
 8005056:	e04f      	b.n	80050f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2201      	movs	r2, #1
 800505c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2202      	movs	r2, #2
 8005064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a21      	ldr	r2, [pc, #132]	; (8005104 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d108      	bne.n	8005094 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005088:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	68fa      	ldr	r2, [r7, #12]
 8005090:	4313      	orrs	r3, r2
 8005092:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800509a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	68fa      	ldr	r2, [r7, #12]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	68fa      	ldr	r2, [r7, #12]
 80050ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a14      	ldr	r2, [pc, #80]	; (8005104 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d009      	beq.n	80050cc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050c0:	d004      	beq.n	80050cc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a10      	ldr	r2, [pc, #64]	; (8005108 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d10c      	bne.n	80050e6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050d2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	68ba      	ldr	r2, [r7, #8]
 80050da:	4313      	orrs	r3, r2
 80050dc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	68ba      	ldr	r2, [r7, #8]
 80050e4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2201      	movs	r2, #1
 80050ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050f6:	2300      	movs	r3, #0
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3714      	adds	r7, #20
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr
 8005104:	40012c00 	.word	0x40012c00
 8005108:	40014000 	.word	0x40014000

0800510c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800510c:	b480      	push	{r7}
 800510e:	b083      	sub	sp, #12
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005114:	bf00      	nop
 8005116:	370c      	adds	r7, #12
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr

08005120 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005120:	b480      	push	{r7}
 8005122:	b083      	sub	sp, #12
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005128:	bf00      	nop
 800512a:	370c      	adds	r7, #12
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr

08005134 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005134:	b480      	push	{r7}
 8005136:	b083      	sub	sp, #12
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800513c:	bf00      	nop
 800513e:	370c      	adds	r7, #12
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr

08005148 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b082      	sub	sp, #8
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d101      	bne.n	800515a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	e040      	b.n	80051dc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800515e:	2b00      	cmp	r3, #0
 8005160:	d106      	bne.n	8005170 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2200      	movs	r2, #0
 8005166:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f7fd f9e2 	bl	8002534 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2224      	movs	r2, #36	; 0x24
 8005174:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f022 0201 	bic.w	r2, r2, #1
 8005184:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 f82c 	bl	80051e4 <UART_SetConfig>
 800518c:	4603      	mov	r3, r0
 800518e:	2b01      	cmp	r3, #1
 8005190:	d101      	bne.n	8005196 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e022      	b.n	80051dc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519a:	2b00      	cmp	r3, #0
 800519c:	d002      	beq.n	80051a4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f000 fb06 	bl	80057b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	685a      	ldr	r2, [r3, #4]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80051b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	689a      	ldr	r2, [r3, #8]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80051c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f042 0201 	orr.w	r2, r2, #1
 80051d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f000 fb8d 	bl	80058f4 <UART_CheckIdleState>
 80051da:	4603      	mov	r3, r0
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3708      	adds	r7, #8
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051e4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80051e8:	b08a      	sub	sp, #40	; 0x28
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80051ee:	2300      	movs	r3, #0
 80051f0:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 80051f2:	2300      	movs	r3, #0
 80051f4:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80051f6:	2300      	movs	r3, #0
 80051f8:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	689a      	ldr	r2, [r3, #8]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	691b      	ldr	r3, [r3, #16]
 8005202:	431a      	orrs	r2, r3
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	695b      	ldr	r3, [r3, #20]
 8005208:	431a      	orrs	r2, r3
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	69db      	ldr	r3, [r3, #28]
 800520e:	4313      	orrs	r3, r2
 8005210:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	4bb3      	ldr	r3, [pc, #716]	; (80054e8 <UART_SetConfig+0x304>)
 800521a:	4013      	ands	r3, r2
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	6812      	ldr	r2, [r2, #0]
 8005220:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005222:	430b      	orrs	r3, r1
 8005224:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	68da      	ldr	r2, [r3, #12]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	430a      	orrs	r2, r1
 800523a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	699b      	ldr	r3, [r3, #24]
 8005240:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4aa9      	ldr	r2, [pc, #676]	; (80054ec <UART_SetConfig+0x308>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d004      	beq.n	8005256 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6a1b      	ldr	r3, [r3, #32]
 8005250:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005252:	4313      	orrs	r3, r2
 8005254:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005266:	430a      	orrs	r2, r1
 8005268:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4aa0      	ldr	r2, [pc, #640]	; (80054f0 <UART_SetConfig+0x30c>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d126      	bne.n	80052c2 <UART_SetConfig+0xde>
 8005274:	4b9f      	ldr	r3, [pc, #636]	; (80054f4 <UART_SetConfig+0x310>)
 8005276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800527a:	f003 0303 	and.w	r3, r3, #3
 800527e:	2b03      	cmp	r3, #3
 8005280:	d81a      	bhi.n	80052b8 <UART_SetConfig+0xd4>
 8005282:	a201      	add	r2, pc, #4	; (adr r2, 8005288 <UART_SetConfig+0xa4>)
 8005284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005288:	08005299 	.word	0x08005299
 800528c:	080052a9 	.word	0x080052a9
 8005290:	080052a1 	.word	0x080052a1
 8005294:	080052b1 	.word	0x080052b1
 8005298:	2301      	movs	r3, #1
 800529a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800529e:	e080      	b.n	80053a2 <UART_SetConfig+0x1be>
 80052a0:	2302      	movs	r3, #2
 80052a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052a6:	e07c      	b.n	80053a2 <UART_SetConfig+0x1be>
 80052a8:	2304      	movs	r3, #4
 80052aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052ae:	e078      	b.n	80053a2 <UART_SetConfig+0x1be>
 80052b0:	2308      	movs	r3, #8
 80052b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052b6:	e074      	b.n	80053a2 <UART_SetConfig+0x1be>
 80052b8:	2310      	movs	r3, #16
 80052ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052be:	bf00      	nop
 80052c0:	e06f      	b.n	80053a2 <UART_SetConfig+0x1be>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a8c      	ldr	r2, [pc, #560]	; (80054f8 <UART_SetConfig+0x314>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d138      	bne.n	800533e <UART_SetConfig+0x15a>
 80052cc:	4b89      	ldr	r3, [pc, #548]	; (80054f4 <UART_SetConfig+0x310>)
 80052ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052d2:	f003 030c 	and.w	r3, r3, #12
 80052d6:	2b0c      	cmp	r3, #12
 80052d8:	d82c      	bhi.n	8005334 <UART_SetConfig+0x150>
 80052da:	a201      	add	r2, pc, #4	; (adr r2, 80052e0 <UART_SetConfig+0xfc>)
 80052dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052e0:	08005315 	.word	0x08005315
 80052e4:	08005335 	.word	0x08005335
 80052e8:	08005335 	.word	0x08005335
 80052ec:	08005335 	.word	0x08005335
 80052f0:	08005325 	.word	0x08005325
 80052f4:	08005335 	.word	0x08005335
 80052f8:	08005335 	.word	0x08005335
 80052fc:	08005335 	.word	0x08005335
 8005300:	0800531d 	.word	0x0800531d
 8005304:	08005335 	.word	0x08005335
 8005308:	08005335 	.word	0x08005335
 800530c:	08005335 	.word	0x08005335
 8005310:	0800532d 	.word	0x0800532d
 8005314:	2300      	movs	r3, #0
 8005316:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800531a:	e042      	b.n	80053a2 <UART_SetConfig+0x1be>
 800531c:	2302      	movs	r3, #2
 800531e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005322:	e03e      	b.n	80053a2 <UART_SetConfig+0x1be>
 8005324:	2304      	movs	r3, #4
 8005326:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800532a:	e03a      	b.n	80053a2 <UART_SetConfig+0x1be>
 800532c:	2308      	movs	r3, #8
 800532e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005332:	e036      	b.n	80053a2 <UART_SetConfig+0x1be>
 8005334:	2310      	movs	r3, #16
 8005336:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800533a:	bf00      	nop
 800533c:	e031      	b.n	80053a2 <UART_SetConfig+0x1be>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a6a      	ldr	r2, [pc, #424]	; (80054ec <UART_SetConfig+0x308>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d129      	bne.n	800539c <UART_SetConfig+0x1b8>
 8005348:	4b6a      	ldr	r3, [pc, #424]	; (80054f4 <UART_SetConfig+0x310>)
 800534a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800534e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005352:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005356:	d014      	beq.n	8005382 <UART_SetConfig+0x19e>
 8005358:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800535c:	d802      	bhi.n	8005364 <UART_SetConfig+0x180>
 800535e:	2b00      	cmp	r3, #0
 8005360:	d007      	beq.n	8005372 <UART_SetConfig+0x18e>
 8005362:	e016      	b.n	8005392 <UART_SetConfig+0x1ae>
 8005364:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005368:	d007      	beq.n	800537a <UART_SetConfig+0x196>
 800536a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800536e:	d00c      	beq.n	800538a <UART_SetConfig+0x1a6>
 8005370:	e00f      	b.n	8005392 <UART_SetConfig+0x1ae>
 8005372:	2300      	movs	r3, #0
 8005374:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005378:	e013      	b.n	80053a2 <UART_SetConfig+0x1be>
 800537a:	2302      	movs	r3, #2
 800537c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005380:	e00f      	b.n	80053a2 <UART_SetConfig+0x1be>
 8005382:	2304      	movs	r3, #4
 8005384:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005388:	e00b      	b.n	80053a2 <UART_SetConfig+0x1be>
 800538a:	2308      	movs	r3, #8
 800538c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005390:	e007      	b.n	80053a2 <UART_SetConfig+0x1be>
 8005392:	2310      	movs	r3, #16
 8005394:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005398:	bf00      	nop
 800539a:	e002      	b.n	80053a2 <UART_SetConfig+0x1be>
 800539c:	2310      	movs	r3, #16
 800539e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a51      	ldr	r2, [pc, #324]	; (80054ec <UART_SetConfig+0x308>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	f040 80fa 	bne.w	80055a2 <UART_SetConfig+0x3be>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80053ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80053b2:	2b08      	cmp	r3, #8
 80053b4:	d823      	bhi.n	80053fe <UART_SetConfig+0x21a>
 80053b6:	a201      	add	r2, pc, #4	; (adr r2, 80053bc <UART_SetConfig+0x1d8>)
 80053b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053bc:	080053e1 	.word	0x080053e1
 80053c0:	080053ff 	.word	0x080053ff
 80053c4:	080053e9 	.word	0x080053e9
 80053c8:	080053ff 	.word	0x080053ff
 80053cc:	080053ef 	.word	0x080053ef
 80053d0:	080053ff 	.word	0x080053ff
 80053d4:	080053ff 	.word	0x080053ff
 80053d8:	080053ff 	.word	0x080053ff
 80053dc:	080053f7 	.word	0x080053f7
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80053e0:	f7fe ff32 	bl	8004248 <HAL_RCC_GetPCLK1Freq>
 80053e4:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80053e6:	e00d      	b.n	8005404 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80053e8:	4b44      	ldr	r3, [pc, #272]	; (80054fc <UART_SetConfig+0x318>)
 80053ea:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80053ec:	e00a      	b.n	8005404 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80053ee:	f7fe fe95 	bl	800411c <HAL_RCC_GetSysClockFreq>
 80053f2:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80053f4:	e006      	b.n	8005404 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80053f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053fa:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80053fc:	e002      	b.n	8005404 <UART_SetConfig+0x220>
      default:
        ret = HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	76fb      	strb	r3, [r7, #27]
        break;
 8005402:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	2b00      	cmp	r3, #0
 8005408:	f000 81c6 	beq.w	8005798 <UART_SetConfig+0x5b4>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	685a      	ldr	r2, [r3, #4]
 8005410:	4613      	mov	r3, r2
 8005412:	005b      	lsls	r3, r3, #1
 8005414:	4413      	add	r3, r2
 8005416:	697a      	ldr	r2, [r7, #20]
 8005418:	429a      	cmp	r2, r3
 800541a:	d305      	bcc.n	8005428 <UART_SetConfig+0x244>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005422:	697a      	ldr	r2, [r7, #20]
 8005424:	429a      	cmp	r2, r3
 8005426:	d902      	bls.n	800542e <UART_SetConfig+0x24a>
      {
        ret = HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	76fb      	strb	r3, [r7, #27]
 800542c:	e1b4      	b.n	8005798 <UART_SetConfig+0x5b4>
      }
      else
      {
        switch (clocksource)
 800542e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005432:	2b08      	cmp	r3, #8
 8005434:	f200 80a2 	bhi.w	800557c <UART_SetConfig+0x398>
 8005438:	a201      	add	r2, pc, #4	; (adr r2, 8005440 <UART_SetConfig+0x25c>)
 800543a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800543e:	bf00      	nop
 8005440:	08005465 	.word	0x08005465
 8005444:	0800557d 	.word	0x0800557d
 8005448:	080054b3 	.word	0x080054b3
 800544c:	0800557d 	.word	0x0800557d
 8005450:	08005505 	.word	0x08005505
 8005454:	0800557d 	.word	0x0800557d
 8005458:	0800557d 	.word	0x0800557d
 800545c:	0800557d 	.word	0x0800557d
 8005460:	08005553 	.word	0x08005553
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8005464:	f7fe fef0 	bl	8004248 <HAL_RCC_GetPCLK1Freq>
 8005468:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	4619      	mov	r1, r3
 800546e:	f04f 0200 	mov.w	r2, #0
 8005472:	f04f 0300 	mov.w	r3, #0
 8005476:	f04f 0400 	mov.w	r4, #0
 800547a:	0214      	lsls	r4, r2, #8
 800547c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005480:	020b      	lsls	r3, r1, #8
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	6852      	ldr	r2, [r2, #4]
 8005486:	0852      	lsrs	r2, r2, #1
 8005488:	4611      	mov	r1, r2
 800548a:	f04f 0200 	mov.w	r2, #0
 800548e:	eb13 0b01 	adds.w	fp, r3, r1
 8005492:	eb44 0c02 	adc.w	ip, r4, r2
 8005496:	4658      	mov	r0, fp
 8005498:	4661      	mov	r1, ip
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	f04f 0400 	mov.w	r4, #0
 80054a2:	461a      	mov	r2, r3
 80054a4:	4623      	mov	r3, r4
 80054a6:	f7fb fbef 	bl	8000c88 <__aeabi_uldivmod>
 80054aa:	4603      	mov	r3, r0
 80054ac:	460c      	mov	r4, r1
 80054ae:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80054b0:	e067      	b.n	8005582 <UART_SetConfig+0x39e>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	085b      	lsrs	r3, r3, #1
 80054b8:	f04f 0400 	mov.w	r4, #0
 80054bc:	4910      	ldr	r1, [pc, #64]	; (8005500 <UART_SetConfig+0x31c>)
 80054be:	f04f 0200 	mov.w	r2, #0
 80054c2:	eb13 0b01 	adds.w	fp, r3, r1
 80054c6:	eb44 0c02 	adc.w	ip, r4, r2
 80054ca:	4658      	mov	r0, fp
 80054cc:	4661      	mov	r1, ip
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	f04f 0400 	mov.w	r4, #0
 80054d6:	461a      	mov	r2, r3
 80054d8:	4623      	mov	r3, r4
 80054da:	f7fb fbd5 	bl	8000c88 <__aeabi_uldivmod>
 80054de:	4603      	mov	r3, r0
 80054e0:	460c      	mov	r4, r1
 80054e2:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80054e4:	e04d      	b.n	8005582 <UART_SetConfig+0x39e>
 80054e6:	bf00      	nop
 80054e8:	efff69f3 	.word	0xefff69f3
 80054ec:	40008000 	.word	0x40008000
 80054f0:	40013800 	.word	0x40013800
 80054f4:	40021000 	.word	0x40021000
 80054f8:	40004400 	.word	0x40004400
 80054fc:	00f42400 	.word	0x00f42400
 8005500:	f4240000 	.word	0xf4240000
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8005504:	f7fe fe0a 	bl	800411c <HAL_RCC_GetSysClockFreq>
 8005508:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	4619      	mov	r1, r3
 800550e:	f04f 0200 	mov.w	r2, #0
 8005512:	f04f 0300 	mov.w	r3, #0
 8005516:	f04f 0400 	mov.w	r4, #0
 800551a:	0214      	lsls	r4, r2, #8
 800551c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005520:	020b      	lsls	r3, r1, #8
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	6852      	ldr	r2, [r2, #4]
 8005526:	0852      	lsrs	r2, r2, #1
 8005528:	4611      	mov	r1, r2
 800552a:	f04f 0200 	mov.w	r2, #0
 800552e:	eb13 0b01 	adds.w	fp, r3, r1
 8005532:	eb44 0c02 	adc.w	ip, r4, r2
 8005536:	4658      	mov	r0, fp
 8005538:	4661      	mov	r1, ip
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	f04f 0400 	mov.w	r4, #0
 8005542:	461a      	mov	r2, r3
 8005544:	4623      	mov	r3, r4
 8005546:	f7fb fb9f 	bl	8000c88 <__aeabi_uldivmod>
 800554a:	4603      	mov	r3, r0
 800554c:	460c      	mov	r4, r1
 800554e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8005550:	e017      	b.n	8005582 <UART_SetConfig+0x39e>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	085b      	lsrs	r3, r3, #1
 8005558:	f04f 0400 	mov.w	r4, #0
 800555c:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8005560:	f144 0100 	adc.w	r1, r4, #0
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	f04f 0400 	mov.w	r4, #0
 800556c:	461a      	mov	r2, r3
 800556e:	4623      	mov	r3, r4
 8005570:	f7fb fb8a 	bl	8000c88 <__aeabi_uldivmod>
 8005574:	4603      	mov	r3, r0
 8005576:	460c      	mov	r4, r1
 8005578:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800557a:	e002      	b.n	8005582 <UART_SetConfig+0x39e>
          default:
            ret = HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	76fb      	strb	r3, [r7, #27]
            break;
 8005580:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005582:	69fb      	ldr	r3, [r7, #28]
 8005584:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005588:	d308      	bcc.n	800559c <UART_SetConfig+0x3b8>
 800558a:	69fb      	ldr	r3, [r7, #28]
 800558c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005590:	d204      	bcs.n	800559c <UART_SetConfig+0x3b8>
        {
          huart->Instance->BRR = usartdiv;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	69fa      	ldr	r2, [r7, #28]
 8005598:	60da      	str	r2, [r3, #12]
 800559a:	e0fd      	b.n	8005798 <UART_SetConfig+0x5b4>
        }
        else
        {
          ret = HAL_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	76fb      	strb	r3, [r7, #27]
 80055a0:	e0fa      	b.n	8005798 <UART_SetConfig+0x5b4>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	69db      	ldr	r3, [r3, #28]
 80055a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055aa:	f040 8083 	bne.w	80056b4 <UART_SetConfig+0x4d0>
  {
    switch (clocksource)
 80055ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80055b2:	2b08      	cmp	r3, #8
 80055b4:	d85e      	bhi.n	8005674 <UART_SetConfig+0x490>
 80055b6:	a201      	add	r2, pc, #4	; (adr r2, 80055bc <UART_SetConfig+0x3d8>)
 80055b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055bc:	080055e1 	.word	0x080055e1
 80055c0:	08005601 	.word	0x08005601
 80055c4:	08005621 	.word	0x08005621
 80055c8:	08005675 	.word	0x08005675
 80055cc:	0800563d 	.word	0x0800563d
 80055d0:	08005675 	.word	0x08005675
 80055d4:	08005675 	.word	0x08005675
 80055d8:	08005675 	.word	0x08005675
 80055dc:	0800565d 	.word	0x0800565d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055e0:	f7fe fe32 	bl	8004248 <HAL_RCC_GetPCLK1Freq>
 80055e4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	005a      	lsls	r2, r3, #1
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	085b      	lsrs	r3, r3, #1
 80055f0:	441a      	add	r2, r3
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80055fe:	e03c      	b.n	800567a <UART_SetConfig+0x496>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005600:	f7fe fe38 	bl	8004274 <HAL_RCC_GetPCLK2Freq>
 8005604:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	005a      	lsls	r2, r3, #1
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	085b      	lsrs	r3, r3, #1
 8005610:	441a      	add	r2, r3
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	fbb2 f3f3 	udiv	r3, r2, r3
 800561a:	b29b      	uxth	r3, r3
 800561c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800561e:	e02c      	b.n	800567a <UART_SetConfig+0x496>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	085b      	lsrs	r3, r3, #1
 8005626:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800562a:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	6852      	ldr	r2, [r2, #4]
 8005632:	fbb3 f3f2 	udiv	r3, r3, r2
 8005636:	b29b      	uxth	r3, r3
 8005638:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800563a:	e01e      	b.n	800567a <UART_SetConfig+0x496>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800563c:	f7fe fd6e 	bl	800411c <HAL_RCC_GetSysClockFreq>
 8005640:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	005a      	lsls	r2, r3, #1
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	085b      	lsrs	r3, r3, #1
 800564c:	441a      	add	r2, r3
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	fbb2 f3f3 	udiv	r3, r2, r3
 8005656:	b29b      	uxth	r3, r3
 8005658:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800565a:	e00e      	b.n	800567a <UART_SetConfig+0x496>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	085b      	lsrs	r3, r3, #1
 8005662:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	fbb2 f3f3 	udiv	r3, r2, r3
 800566e:	b29b      	uxth	r3, r3
 8005670:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005672:	e002      	b.n	800567a <UART_SetConfig+0x496>
      default:
        ret = HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	76fb      	strb	r3, [r7, #27]
        break;
 8005678:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800567a:	69fb      	ldr	r3, [r7, #28]
 800567c:	2b0f      	cmp	r3, #15
 800567e:	d916      	bls.n	80056ae <UART_SetConfig+0x4ca>
 8005680:	69fb      	ldr	r3, [r7, #28]
 8005682:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005686:	d212      	bcs.n	80056ae <UART_SetConfig+0x4ca>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005688:	69fb      	ldr	r3, [r7, #28]
 800568a:	b29b      	uxth	r3, r3
 800568c:	f023 030f 	bic.w	r3, r3, #15
 8005690:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005692:	69fb      	ldr	r3, [r7, #28]
 8005694:	085b      	lsrs	r3, r3, #1
 8005696:	b29b      	uxth	r3, r3
 8005698:	f003 0307 	and.w	r3, r3, #7
 800569c:	b29a      	uxth	r2, r3
 800569e:	89fb      	ldrh	r3, [r7, #14]
 80056a0:	4313      	orrs	r3, r2
 80056a2:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	89fa      	ldrh	r2, [r7, #14]
 80056aa:	60da      	str	r2, [r3, #12]
 80056ac:	e074      	b.n	8005798 <UART_SetConfig+0x5b4>
    }
    else
    {
      ret = HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	76fb      	strb	r3, [r7, #27]
 80056b2:	e071      	b.n	8005798 <UART_SetConfig+0x5b4>
    }
  }
  else
  {
    switch (clocksource)
 80056b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80056b8:	2b08      	cmp	r3, #8
 80056ba:	d85c      	bhi.n	8005776 <UART_SetConfig+0x592>
 80056bc:	a201      	add	r2, pc, #4	; (adr r2, 80056c4 <UART_SetConfig+0x4e0>)
 80056be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056c2:	bf00      	nop
 80056c4:	080056e9 	.word	0x080056e9
 80056c8:	08005707 	.word	0x08005707
 80056cc:	08005725 	.word	0x08005725
 80056d0:	08005777 	.word	0x08005777
 80056d4:	08005741 	.word	0x08005741
 80056d8:	08005777 	.word	0x08005777
 80056dc:	08005777 	.word	0x08005777
 80056e0:	08005777 	.word	0x08005777
 80056e4:	0800575f 	.word	0x0800575f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056e8:	f7fe fdae 	bl	8004248 <HAL_RCC_GetPCLK1Freq>
 80056ec:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	085a      	lsrs	r2, r3, #1
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	441a      	add	r2, r3
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005700:	b29b      	uxth	r3, r3
 8005702:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005704:	e03a      	b.n	800577c <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005706:	f7fe fdb5 	bl	8004274 <HAL_RCC_GetPCLK2Freq>
 800570a:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	085a      	lsrs	r2, r3, #1
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	441a      	add	r2, r3
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	fbb2 f3f3 	udiv	r3, r2, r3
 800571e:	b29b      	uxth	r3, r3
 8005720:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005722:	e02b      	b.n	800577c <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	085b      	lsrs	r3, r3, #1
 800572a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800572e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	6852      	ldr	r2, [r2, #4]
 8005736:	fbb3 f3f2 	udiv	r3, r3, r2
 800573a:	b29b      	uxth	r3, r3
 800573c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800573e:	e01d      	b.n	800577c <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005740:	f7fe fcec 	bl	800411c <HAL_RCC_GetSysClockFreq>
 8005744:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	085a      	lsrs	r2, r3, #1
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	441a      	add	r2, r3
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	fbb2 f3f3 	udiv	r3, r2, r3
 8005758:	b29b      	uxth	r3, r3
 800575a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800575c:	e00e      	b.n	800577c <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	085b      	lsrs	r3, r3, #1
 8005764:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005770:	b29b      	uxth	r3, r3
 8005772:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005774:	e002      	b.n	800577c <UART_SetConfig+0x598>
      default:
        ret = HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	76fb      	strb	r3, [r7, #27]
        break;
 800577a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800577c:	69fb      	ldr	r3, [r7, #28]
 800577e:	2b0f      	cmp	r3, #15
 8005780:	d908      	bls.n	8005794 <UART_SetConfig+0x5b0>
 8005782:	69fb      	ldr	r3, [r7, #28]
 8005784:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005788:	d204      	bcs.n	8005794 <UART_SetConfig+0x5b0>
    {
      huart->Instance->BRR = usartdiv;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	69fa      	ldr	r2, [r7, #28]
 8005790:	60da      	str	r2, [r3, #12]
 8005792:	e001      	b.n	8005798 <UART_SetConfig+0x5b4>
    }
    else
    {
      ret = HAL_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2200      	movs	r2, #0
 800579c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2200      	movs	r2, #0
 80057a2:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80057a4:	7efb      	ldrb	r3, [r7, #27]
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3728      	adds	r7, #40	; 0x28
 80057aa:	46bd      	mov	sp, r7
 80057ac:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

080057b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b083      	sub	sp, #12
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057bc:	f003 0301 	and.w	r3, r3, #1
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d00a      	beq.n	80057da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	430a      	orrs	r2, r1
 80057d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057de:	f003 0302 	and.w	r3, r3, #2
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d00a      	beq.n	80057fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	430a      	orrs	r2, r1
 80057fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005800:	f003 0304 	and.w	r3, r3, #4
 8005804:	2b00      	cmp	r3, #0
 8005806:	d00a      	beq.n	800581e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	430a      	orrs	r2, r1
 800581c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005822:	f003 0308 	and.w	r3, r3, #8
 8005826:	2b00      	cmp	r3, #0
 8005828:	d00a      	beq.n	8005840 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	430a      	orrs	r2, r1
 800583e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005844:	f003 0310 	and.w	r3, r3, #16
 8005848:	2b00      	cmp	r3, #0
 800584a:	d00a      	beq.n	8005862 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	430a      	orrs	r2, r1
 8005860:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005866:	f003 0320 	and.w	r3, r3, #32
 800586a:	2b00      	cmp	r3, #0
 800586c:	d00a      	beq.n	8005884 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	430a      	orrs	r2, r1
 8005882:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005888:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800588c:	2b00      	cmp	r3, #0
 800588e:	d01a      	beq.n	80058c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	430a      	orrs	r2, r1
 80058a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058ae:	d10a      	bne.n	80058c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	430a      	orrs	r2, r1
 80058c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d00a      	beq.n	80058e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	430a      	orrs	r2, r1
 80058e6:	605a      	str	r2, [r3, #4]
  }
}
 80058e8:	bf00      	nop
 80058ea:	370c      	adds	r7, #12
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr

080058f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b086      	sub	sp, #24
 80058f8:	af02      	add	r7, sp, #8
 80058fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2200      	movs	r2, #0
 8005900:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005902:	f7fc ffb3 	bl	800286c <HAL_GetTick>
 8005906:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f003 0308 	and.w	r3, r3, #8
 8005912:	2b08      	cmp	r3, #8
 8005914:	d10e      	bne.n	8005934 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005916:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800591a:	9300      	str	r3, [sp, #0]
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2200      	movs	r2, #0
 8005920:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f000 f82a 	bl	800597e <UART_WaitOnFlagUntilTimeout>
 800592a:	4603      	mov	r3, r0
 800592c:	2b00      	cmp	r3, #0
 800592e:	d001      	beq.n	8005934 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005930:	2303      	movs	r3, #3
 8005932:	e020      	b.n	8005976 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f003 0304 	and.w	r3, r3, #4
 800593e:	2b04      	cmp	r3, #4
 8005940:	d10e      	bne.n	8005960 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005942:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005946:	9300      	str	r3, [sp, #0]
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2200      	movs	r2, #0
 800594c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f000 f814 	bl	800597e <UART_WaitOnFlagUntilTimeout>
 8005956:	4603      	mov	r3, r0
 8005958:	2b00      	cmp	r3, #0
 800595a:	d001      	beq.n	8005960 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800595c:	2303      	movs	r3, #3
 800595e:	e00a      	b.n	8005976 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2220      	movs	r2, #32
 8005964:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2220      	movs	r2, #32
 800596a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2200      	movs	r2, #0
 8005970:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005974:	2300      	movs	r3, #0
}
 8005976:	4618      	mov	r0, r3
 8005978:	3710      	adds	r7, #16
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}

0800597e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800597e:	b580      	push	{r7, lr}
 8005980:	b084      	sub	sp, #16
 8005982:	af00      	add	r7, sp, #0
 8005984:	60f8      	str	r0, [r7, #12]
 8005986:	60b9      	str	r1, [r7, #8]
 8005988:	603b      	str	r3, [r7, #0]
 800598a:	4613      	mov	r3, r2
 800598c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800598e:	e05d      	b.n	8005a4c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005990:	69bb      	ldr	r3, [r7, #24]
 8005992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005996:	d059      	beq.n	8005a4c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005998:	f7fc ff68 	bl	800286c <HAL_GetTick>
 800599c:	4602      	mov	r2, r0
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	1ad3      	subs	r3, r2, r3
 80059a2:	69ba      	ldr	r2, [r7, #24]
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d302      	bcc.n	80059ae <UART_WaitOnFlagUntilTimeout+0x30>
 80059a8:	69bb      	ldr	r3, [r7, #24]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d11b      	bne.n	80059e6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80059bc:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	689a      	ldr	r2, [r3, #8]
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f022 0201 	bic.w	r2, r2, #1
 80059cc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2220      	movs	r2, #32
 80059d2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2220      	movs	r2, #32
 80059d8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2200      	movs	r2, #0
 80059de:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80059e2:	2303      	movs	r3, #3
 80059e4:	e042      	b.n	8005a6c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 0304 	and.w	r3, r3, #4
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d02b      	beq.n	8005a4c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	69db      	ldr	r3, [r3, #28]
 80059fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a02:	d123      	bne.n	8005a4c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a0c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005a1c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	689a      	ldr	r2, [r3, #8]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f022 0201 	bic.w	r2, r2, #1
 8005a2c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2220      	movs	r2, #32
 8005a32:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2220      	movs	r2, #32
 8005a38:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2220      	movs	r2, #32
 8005a3e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2200      	movs	r2, #0
 8005a44:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8005a48:	2303      	movs	r3, #3
 8005a4a:	e00f      	b.n	8005a6c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	69da      	ldr	r2, [r3, #28]
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	4013      	ands	r3, r2
 8005a56:	68ba      	ldr	r2, [r7, #8]
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	bf0c      	ite	eq
 8005a5c:	2301      	moveq	r3, #1
 8005a5e:	2300      	movne	r3, #0
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	461a      	mov	r2, r3
 8005a64:	79fb      	ldrb	r3, [r7, #7]
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d092      	beq.n	8005990 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a6a:	2300      	movs	r3, #0
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3710      	adds	r7, #16
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}

08005a74 <__errno>:
 8005a74:	4b01      	ldr	r3, [pc, #4]	; (8005a7c <__errno+0x8>)
 8005a76:	6818      	ldr	r0, [r3, #0]
 8005a78:	4770      	bx	lr
 8005a7a:	bf00      	nop
 8005a7c:	20000030 	.word	0x20000030

08005a80 <__libc_init_array>:
 8005a80:	b570      	push	{r4, r5, r6, lr}
 8005a82:	4e0d      	ldr	r6, [pc, #52]	; (8005ab8 <__libc_init_array+0x38>)
 8005a84:	4c0d      	ldr	r4, [pc, #52]	; (8005abc <__libc_init_array+0x3c>)
 8005a86:	1ba4      	subs	r4, r4, r6
 8005a88:	10a4      	asrs	r4, r4, #2
 8005a8a:	2500      	movs	r5, #0
 8005a8c:	42a5      	cmp	r5, r4
 8005a8e:	d109      	bne.n	8005aa4 <__libc_init_array+0x24>
 8005a90:	4e0b      	ldr	r6, [pc, #44]	; (8005ac0 <__libc_init_array+0x40>)
 8005a92:	4c0c      	ldr	r4, [pc, #48]	; (8005ac4 <__libc_init_array+0x44>)
 8005a94:	f003 fd8a 	bl	80095ac <_init>
 8005a98:	1ba4      	subs	r4, r4, r6
 8005a9a:	10a4      	asrs	r4, r4, #2
 8005a9c:	2500      	movs	r5, #0
 8005a9e:	42a5      	cmp	r5, r4
 8005aa0:	d105      	bne.n	8005aae <__libc_init_array+0x2e>
 8005aa2:	bd70      	pop	{r4, r5, r6, pc}
 8005aa4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005aa8:	4798      	blx	r3
 8005aaa:	3501      	adds	r5, #1
 8005aac:	e7ee      	b.n	8005a8c <__libc_init_array+0xc>
 8005aae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005ab2:	4798      	blx	r3
 8005ab4:	3501      	adds	r5, #1
 8005ab6:	e7f2      	b.n	8005a9e <__libc_init_array+0x1e>
 8005ab8:	080099e0 	.word	0x080099e0
 8005abc:	080099e0 	.word	0x080099e0
 8005ac0:	080099e0 	.word	0x080099e0
 8005ac4:	080099e4 	.word	0x080099e4

08005ac8 <memset>:
 8005ac8:	4402      	add	r2, r0
 8005aca:	4603      	mov	r3, r0
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d100      	bne.n	8005ad2 <memset+0xa>
 8005ad0:	4770      	bx	lr
 8005ad2:	f803 1b01 	strb.w	r1, [r3], #1
 8005ad6:	e7f9      	b.n	8005acc <memset+0x4>

08005ad8 <__cvt>:
 8005ad8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005adc:	ec55 4b10 	vmov	r4, r5, d0
 8005ae0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8005ae2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005ae6:	2d00      	cmp	r5, #0
 8005ae8:	460e      	mov	r6, r1
 8005aea:	4691      	mov	r9, r2
 8005aec:	4619      	mov	r1, r3
 8005aee:	bfb8      	it	lt
 8005af0:	4622      	movlt	r2, r4
 8005af2:	462b      	mov	r3, r5
 8005af4:	f027 0720 	bic.w	r7, r7, #32
 8005af8:	bfbb      	ittet	lt
 8005afa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005afe:	461d      	movlt	r5, r3
 8005b00:	2300      	movge	r3, #0
 8005b02:	232d      	movlt	r3, #45	; 0x2d
 8005b04:	bfb8      	it	lt
 8005b06:	4614      	movlt	r4, r2
 8005b08:	2f46      	cmp	r7, #70	; 0x46
 8005b0a:	700b      	strb	r3, [r1, #0]
 8005b0c:	d004      	beq.n	8005b18 <__cvt+0x40>
 8005b0e:	2f45      	cmp	r7, #69	; 0x45
 8005b10:	d100      	bne.n	8005b14 <__cvt+0x3c>
 8005b12:	3601      	adds	r6, #1
 8005b14:	2102      	movs	r1, #2
 8005b16:	e000      	b.n	8005b1a <__cvt+0x42>
 8005b18:	2103      	movs	r1, #3
 8005b1a:	ab03      	add	r3, sp, #12
 8005b1c:	9301      	str	r3, [sp, #4]
 8005b1e:	ab02      	add	r3, sp, #8
 8005b20:	9300      	str	r3, [sp, #0]
 8005b22:	4632      	mov	r2, r6
 8005b24:	4653      	mov	r3, sl
 8005b26:	ec45 4b10 	vmov	d0, r4, r5
 8005b2a:	f001 fda9 	bl	8007680 <_dtoa_r>
 8005b2e:	2f47      	cmp	r7, #71	; 0x47
 8005b30:	4680      	mov	r8, r0
 8005b32:	d102      	bne.n	8005b3a <__cvt+0x62>
 8005b34:	f019 0f01 	tst.w	r9, #1
 8005b38:	d026      	beq.n	8005b88 <__cvt+0xb0>
 8005b3a:	2f46      	cmp	r7, #70	; 0x46
 8005b3c:	eb08 0906 	add.w	r9, r8, r6
 8005b40:	d111      	bne.n	8005b66 <__cvt+0x8e>
 8005b42:	f898 3000 	ldrb.w	r3, [r8]
 8005b46:	2b30      	cmp	r3, #48	; 0x30
 8005b48:	d10a      	bne.n	8005b60 <__cvt+0x88>
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	4620      	mov	r0, r4
 8005b50:	4629      	mov	r1, r5
 8005b52:	f7fa ffb9 	bl	8000ac8 <__aeabi_dcmpeq>
 8005b56:	b918      	cbnz	r0, 8005b60 <__cvt+0x88>
 8005b58:	f1c6 0601 	rsb	r6, r6, #1
 8005b5c:	f8ca 6000 	str.w	r6, [sl]
 8005b60:	f8da 3000 	ldr.w	r3, [sl]
 8005b64:	4499      	add	r9, r3
 8005b66:	2200      	movs	r2, #0
 8005b68:	2300      	movs	r3, #0
 8005b6a:	4620      	mov	r0, r4
 8005b6c:	4629      	mov	r1, r5
 8005b6e:	f7fa ffab 	bl	8000ac8 <__aeabi_dcmpeq>
 8005b72:	b938      	cbnz	r0, 8005b84 <__cvt+0xac>
 8005b74:	2230      	movs	r2, #48	; 0x30
 8005b76:	9b03      	ldr	r3, [sp, #12]
 8005b78:	454b      	cmp	r3, r9
 8005b7a:	d205      	bcs.n	8005b88 <__cvt+0xb0>
 8005b7c:	1c59      	adds	r1, r3, #1
 8005b7e:	9103      	str	r1, [sp, #12]
 8005b80:	701a      	strb	r2, [r3, #0]
 8005b82:	e7f8      	b.n	8005b76 <__cvt+0x9e>
 8005b84:	f8cd 900c 	str.w	r9, [sp, #12]
 8005b88:	9b03      	ldr	r3, [sp, #12]
 8005b8a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005b8c:	eba3 0308 	sub.w	r3, r3, r8
 8005b90:	4640      	mov	r0, r8
 8005b92:	6013      	str	r3, [r2, #0]
 8005b94:	b004      	add	sp, #16
 8005b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005b9a <__exponent>:
 8005b9a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b9c:	2900      	cmp	r1, #0
 8005b9e:	4604      	mov	r4, r0
 8005ba0:	bfba      	itte	lt
 8005ba2:	4249      	neglt	r1, r1
 8005ba4:	232d      	movlt	r3, #45	; 0x2d
 8005ba6:	232b      	movge	r3, #43	; 0x2b
 8005ba8:	2909      	cmp	r1, #9
 8005baa:	f804 2b02 	strb.w	r2, [r4], #2
 8005bae:	7043      	strb	r3, [r0, #1]
 8005bb0:	dd20      	ble.n	8005bf4 <__exponent+0x5a>
 8005bb2:	f10d 0307 	add.w	r3, sp, #7
 8005bb6:	461f      	mov	r7, r3
 8005bb8:	260a      	movs	r6, #10
 8005bba:	fb91 f5f6 	sdiv	r5, r1, r6
 8005bbe:	fb06 1115 	mls	r1, r6, r5, r1
 8005bc2:	3130      	adds	r1, #48	; 0x30
 8005bc4:	2d09      	cmp	r5, #9
 8005bc6:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005bca:	f103 32ff 	add.w	r2, r3, #4294967295
 8005bce:	4629      	mov	r1, r5
 8005bd0:	dc09      	bgt.n	8005be6 <__exponent+0x4c>
 8005bd2:	3130      	adds	r1, #48	; 0x30
 8005bd4:	3b02      	subs	r3, #2
 8005bd6:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005bda:	42bb      	cmp	r3, r7
 8005bdc:	4622      	mov	r2, r4
 8005bde:	d304      	bcc.n	8005bea <__exponent+0x50>
 8005be0:	1a10      	subs	r0, r2, r0
 8005be2:	b003      	add	sp, #12
 8005be4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005be6:	4613      	mov	r3, r2
 8005be8:	e7e7      	b.n	8005bba <__exponent+0x20>
 8005bea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005bee:	f804 2b01 	strb.w	r2, [r4], #1
 8005bf2:	e7f2      	b.n	8005bda <__exponent+0x40>
 8005bf4:	2330      	movs	r3, #48	; 0x30
 8005bf6:	4419      	add	r1, r3
 8005bf8:	7083      	strb	r3, [r0, #2]
 8005bfa:	1d02      	adds	r2, r0, #4
 8005bfc:	70c1      	strb	r1, [r0, #3]
 8005bfe:	e7ef      	b.n	8005be0 <__exponent+0x46>

08005c00 <_printf_float>:
 8005c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c04:	b08d      	sub	sp, #52	; 0x34
 8005c06:	460c      	mov	r4, r1
 8005c08:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8005c0c:	4616      	mov	r6, r2
 8005c0e:	461f      	mov	r7, r3
 8005c10:	4605      	mov	r5, r0
 8005c12:	f002 fe19 	bl	8008848 <_localeconv_r>
 8005c16:	6803      	ldr	r3, [r0, #0]
 8005c18:	9304      	str	r3, [sp, #16]
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f7fa fad8 	bl	80001d0 <strlen>
 8005c20:	2300      	movs	r3, #0
 8005c22:	930a      	str	r3, [sp, #40]	; 0x28
 8005c24:	f8d8 3000 	ldr.w	r3, [r8]
 8005c28:	9005      	str	r0, [sp, #20]
 8005c2a:	3307      	adds	r3, #7
 8005c2c:	f023 0307 	bic.w	r3, r3, #7
 8005c30:	f103 0208 	add.w	r2, r3, #8
 8005c34:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005c38:	f8d4 b000 	ldr.w	fp, [r4]
 8005c3c:	f8c8 2000 	str.w	r2, [r8]
 8005c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c44:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005c48:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005c4c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005c50:	9307      	str	r3, [sp, #28]
 8005c52:	f8cd 8018 	str.w	r8, [sp, #24]
 8005c56:	f04f 32ff 	mov.w	r2, #4294967295
 8005c5a:	4ba7      	ldr	r3, [pc, #668]	; (8005ef8 <_printf_float+0x2f8>)
 8005c5c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c60:	f7fa ff64 	bl	8000b2c <__aeabi_dcmpun>
 8005c64:	bb70      	cbnz	r0, 8005cc4 <_printf_float+0xc4>
 8005c66:	f04f 32ff 	mov.w	r2, #4294967295
 8005c6a:	4ba3      	ldr	r3, [pc, #652]	; (8005ef8 <_printf_float+0x2f8>)
 8005c6c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c70:	f7fa ff3e 	bl	8000af0 <__aeabi_dcmple>
 8005c74:	bb30      	cbnz	r0, 8005cc4 <_printf_float+0xc4>
 8005c76:	2200      	movs	r2, #0
 8005c78:	2300      	movs	r3, #0
 8005c7a:	4640      	mov	r0, r8
 8005c7c:	4649      	mov	r1, r9
 8005c7e:	f7fa ff2d 	bl	8000adc <__aeabi_dcmplt>
 8005c82:	b110      	cbz	r0, 8005c8a <_printf_float+0x8a>
 8005c84:	232d      	movs	r3, #45	; 0x2d
 8005c86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c8a:	4a9c      	ldr	r2, [pc, #624]	; (8005efc <_printf_float+0x2fc>)
 8005c8c:	4b9c      	ldr	r3, [pc, #624]	; (8005f00 <_printf_float+0x300>)
 8005c8e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8005c92:	bf8c      	ite	hi
 8005c94:	4690      	movhi	r8, r2
 8005c96:	4698      	movls	r8, r3
 8005c98:	2303      	movs	r3, #3
 8005c9a:	f02b 0204 	bic.w	r2, fp, #4
 8005c9e:	6123      	str	r3, [r4, #16]
 8005ca0:	6022      	str	r2, [r4, #0]
 8005ca2:	f04f 0900 	mov.w	r9, #0
 8005ca6:	9700      	str	r7, [sp, #0]
 8005ca8:	4633      	mov	r3, r6
 8005caa:	aa0b      	add	r2, sp, #44	; 0x2c
 8005cac:	4621      	mov	r1, r4
 8005cae:	4628      	mov	r0, r5
 8005cb0:	f000 f9e6 	bl	8006080 <_printf_common>
 8005cb4:	3001      	adds	r0, #1
 8005cb6:	f040 808d 	bne.w	8005dd4 <_printf_float+0x1d4>
 8005cba:	f04f 30ff 	mov.w	r0, #4294967295
 8005cbe:	b00d      	add	sp, #52	; 0x34
 8005cc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cc4:	4642      	mov	r2, r8
 8005cc6:	464b      	mov	r3, r9
 8005cc8:	4640      	mov	r0, r8
 8005cca:	4649      	mov	r1, r9
 8005ccc:	f7fa ff2e 	bl	8000b2c <__aeabi_dcmpun>
 8005cd0:	b110      	cbz	r0, 8005cd8 <_printf_float+0xd8>
 8005cd2:	4a8c      	ldr	r2, [pc, #560]	; (8005f04 <_printf_float+0x304>)
 8005cd4:	4b8c      	ldr	r3, [pc, #560]	; (8005f08 <_printf_float+0x308>)
 8005cd6:	e7da      	b.n	8005c8e <_printf_float+0x8e>
 8005cd8:	6861      	ldr	r1, [r4, #4]
 8005cda:	1c4b      	adds	r3, r1, #1
 8005cdc:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8005ce0:	a80a      	add	r0, sp, #40	; 0x28
 8005ce2:	d13e      	bne.n	8005d62 <_printf_float+0x162>
 8005ce4:	2306      	movs	r3, #6
 8005ce6:	6063      	str	r3, [r4, #4]
 8005ce8:	2300      	movs	r3, #0
 8005cea:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8005cee:	ab09      	add	r3, sp, #36	; 0x24
 8005cf0:	9300      	str	r3, [sp, #0]
 8005cf2:	ec49 8b10 	vmov	d0, r8, r9
 8005cf6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005cfa:	6022      	str	r2, [r4, #0]
 8005cfc:	f8cd a004 	str.w	sl, [sp, #4]
 8005d00:	6861      	ldr	r1, [r4, #4]
 8005d02:	4628      	mov	r0, r5
 8005d04:	f7ff fee8 	bl	8005ad8 <__cvt>
 8005d08:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8005d0c:	2b47      	cmp	r3, #71	; 0x47
 8005d0e:	4680      	mov	r8, r0
 8005d10:	d109      	bne.n	8005d26 <_printf_float+0x126>
 8005d12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d14:	1cd8      	adds	r0, r3, #3
 8005d16:	db02      	blt.n	8005d1e <_printf_float+0x11e>
 8005d18:	6862      	ldr	r2, [r4, #4]
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	dd47      	ble.n	8005dae <_printf_float+0x1ae>
 8005d1e:	f1aa 0a02 	sub.w	sl, sl, #2
 8005d22:	fa5f fa8a 	uxtb.w	sl, sl
 8005d26:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8005d2a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005d2c:	d824      	bhi.n	8005d78 <_printf_float+0x178>
 8005d2e:	3901      	subs	r1, #1
 8005d30:	4652      	mov	r2, sl
 8005d32:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005d36:	9109      	str	r1, [sp, #36]	; 0x24
 8005d38:	f7ff ff2f 	bl	8005b9a <__exponent>
 8005d3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d3e:	1813      	adds	r3, r2, r0
 8005d40:	2a01      	cmp	r2, #1
 8005d42:	4681      	mov	r9, r0
 8005d44:	6123      	str	r3, [r4, #16]
 8005d46:	dc02      	bgt.n	8005d4e <_printf_float+0x14e>
 8005d48:	6822      	ldr	r2, [r4, #0]
 8005d4a:	07d1      	lsls	r1, r2, #31
 8005d4c:	d501      	bpl.n	8005d52 <_printf_float+0x152>
 8005d4e:	3301      	adds	r3, #1
 8005d50:	6123      	str	r3, [r4, #16]
 8005d52:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d0a5      	beq.n	8005ca6 <_printf_float+0xa6>
 8005d5a:	232d      	movs	r3, #45	; 0x2d
 8005d5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d60:	e7a1      	b.n	8005ca6 <_printf_float+0xa6>
 8005d62:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8005d66:	f000 8177 	beq.w	8006058 <_printf_float+0x458>
 8005d6a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8005d6e:	d1bb      	bne.n	8005ce8 <_printf_float+0xe8>
 8005d70:	2900      	cmp	r1, #0
 8005d72:	d1b9      	bne.n	8005ce8 <_printf_float+0xe8>
 8005d74:	2301      	movs	r3, #1
 8005d76:	e7b6      	b.n	8005ce6 <_printf_float+0xe6>
 8005d78:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8005d7c:	d119      	bne.n	8005db2 <_printf_float+0x1b2>
 8005d7e:	2900      	cmp	r1, #0
 8005d80:	6863      	ldr	r3, [r4, #4]
 8005d82:	dd0c      	ble.n	8005d9e <_printf_float+0x19e>
 8005d84:	6121      	str	r1, [r4, #16]
 8005d86:	b913      	cbnz	r3, 8005d8e <_printf_float+0x18e>
 8005d88:	6822      	ldr	r2, [r4, #0]
 8005d8a:	07d2      	lsls	r2, r2, #31
 8005d8c:	d502      	bpl.n	8005d94 <_printf_float+0x194>
 8005d8e:	3301      	adds	r3, #1
 8005d90:	440b      	add	r3, r1
 8005d92:	6123      	str	r3, [r4, #16]
 8005d94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d96:	65a3      	str	r3, [r4, #88]	; 0x58
 8005d98:	f04f 0900 	mov.w	r9, #0
 8005d9c:	e7d9      	b.n	8005d52 <_printf_float+0x152>
 8005d9e:	b913      	cbnz	r3, 8005da6 <_printf_float+0x1a6>
 8005da0:	6822      	ldr	r2, [r4, #0]
 8005da2:	07d0      	lsls	r0, r2, #31
 8005da4:	d501      	bpl.n	8005daa <_printf_float+0x1aa>
 8005da6:	3302      	adds	r3, #2
 8005da8:	e7f3      	b.n	8005d92 <_printf_float+0x192>
 8005daa:	2301      	movs	r3, #1
 8005dac:	e7f1      	b.n	8005d92 <_printf_float+0x192>
 8005dae:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8005db2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005db6:	4293      	cmp	r3, r2
 8005db8:	db05      	blt.n	8005dc6 <_printf_float+0x1c6>
 8005dba:	6822      	ldr	r2, [r4, #0]
 8005dbc:	6123      	str	r3, [r4, #16]
 8005dbe:	07d1      	lsls	r1, r2, #31
 8005dc0:	d5e8      	bpl.n	8005d94 <_printf_float+0x194>
 8005dc2:	3301      	adds	r3, #1
 8005dc4:	e7e5      	b.n	8005d92 <_printf_float+0x192>
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	bfd4      	ite	le
 8005dca:	f1c3 0302 	rsble	r3, r3, #2
 8005dce:	2301      	movgt	r3, #1
 8005dd0:	4413      	add	r3, r2
 8005dd2:	e7de      	b.n	8005d92 <_printf_float+0x192>
 8005dd4:	6823      	ldr	r3, [r4, #0]
 8005dd6:	055a      	lsls	r2, r3, #21
 8005dd8:	d407      	bmi.n	8005dea <_printf_float+0x1ea>
 8005dda:	6923      	ldr	r3, [r4, #16]
 8005ddc:	4642      	mov	r2, r8
 8005dde:	4631      	mov	r1, r6
 8005de0:	4628      	mov	r0, r5
 8005de2:	47b8      	blx	r7
 8005de4:	3001      	adds	r0, #1
 8005de6:	d12b      	bne.n	8005e40 <_printf_float+0x240>
 8005de8:	e767      	b.n	8005cba <_printf_float+0xba>
 8005dea:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8005dee:	f240 80dc 	bls.w	8005faa <_printf_float+0x3aa>
 8005df2:	2200      	movs	r2, #0
 8005df4:	2300      	movs	r3, #0
 8005df6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005dfa:	f7fa fe65 	bl	8000ac8 <__aeabi_dcmpeq>
 8005dfe:	2800      	cmp	r0, #0
 8005e00:	d033      	beq.n	8005e6a <_printf_float+0x26a>
 8005e02:	2301      	movs	r3, #1
 8005e04:	4a41      	ldr	r2, [pc, #260]	; (8005f0c <_printf_float+0x30c>)
 8005e06:	4631      	mov	r1, r6
 8005e08:	4628      	mov	r0, r5
 8005e0a:	47b8      	blx	r7
 8005e0c:	3001      	adds	r0, #1
 8005e0e:	f43f af54 	beq.w	8005cba <_printf_float+0xba>
 8005e12:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005e16:	429a      	cmp	r2, r3
 8005e18:	db02      	blt.n	8005e20 <_printf_float+0x220>
 8005e1a:	6823      	ldr	r3, [r4, #0]
 8005e1c:	07d8      	lsls	r0, r3, #31
 8005e1e:	d50f      	bpl.n	8005e40 <_printf_float+0x240>
 8005e20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e24:	4631      	mov	r1, r6
 8005e26:	4628      	mov	r0, r5
 8005e28:	47b8      	blx	r7
 8005e2a:	3001      	adds	r0, #1
 8005e2c:	f43f af45 	beq.w	8005cba <_printf_float+0xba>
 8005e30:	f04f 0800 	mov.w	r8, #0
 8005e34:	f104 091a 	add.w	r9, r4, #26
 8005e38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e3a:	3b01      	subs	r3, #1
 8005e3c:	4543      	cmp	r3, r8
 8005e3e:	dc09      	bgt.n	8005e54 <_printf_float+0x254>
 8005e40:	6823      	ldr	r3, [r4, #0]
 8005e42:	079b      	lsls	r3, r3, #30
 8005e44:	f100 8103 	bmi.w	800604e <_printf_float+0x44e>
 8005e48:	68e0      	ldr	r0, [r4, #12]
 8005e4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e4c:	4298      	cmp	r0, r3
 8005e4e:	bfb8      	it	lt
 8005e50:	4618      	movlt	r0, r3
 8005e52:	e734      	b.n	8005cbe <_printf_float+0xbe>
 8005e54:	2301      	movs	r3, #1
 8005e56:	464a      	mov	r2, r9
 8005e58:	4631      	mov	r1, r6
 8005e5a:	4628      	mov	r0, r5
 8005e5c:	47b8      	blx	r7
 8005e5e:	3001      	adds	r0, #1
 8005e60:	f43f af2b 	beq.w	8005cba <_printf_float+0xba>
 8005e64:	f108 0801 	add.w	r8, r8, #1
 8005e68:	e7e6      	b.n	8005e38 <_printf_float+0x238>
 8005e6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	dc2b      	bgt.n	8005ec8 <_printf_float+0x2c8>
 8005e70:	2301      	movs	r3, #1
 8005e72:	4a26      	ldr	r2, [pc, #152]	; (8005f0c <_printf_float+0x30c>)
 8005e74:	4631      	mov	r1, r6
 8005e76:	4628      	mov	r0, r5
 8005e78:	47b8      	blx	r7
 8005e7a:	3001      	adds	r0, #1
 8005e7c:	f43f af1d 	beq.w	8005cba <_printf_float+0xba>
 8005e80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e82:	b923      	cbnz	r3, 8005e8e <_printf_float+0x28e>
 8005e84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e86:	b913      	cbnz	r3, 8005e8e <_printf_float+0x28e>
 8005e88:	6823      	ldr	r3, [r4, #0]
 8005e8a:	07d9      	lsls	r1, r3, #31
 8005e8c:	d5d8      	bpl.n	8005e40 <_printf_float+0x240>
 8005e8e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e92:	4631      	mov	r1, r6
 8005e94:	4628      	mov	r0, r5
 8005e96:	47b8      	blx	r7
 8005e98:	3001      	adds	r0, #1
 8005e9a:	f43f af0e 	beq.w	8005cba <_printf_float+0xba>
 8005e9e:	f04f 0900 	mov.w	r9, #0
 8005ea2:	f104 0a1a 	add.w	sl, r4, #26
 8005ea6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ea8:	425b      	negs	r3, r3
 8005eaa:	454b      	cmp	r3, r9
 8005eac:	dc01      	bgt.n	8005eb2 <_printf_float+0x2b2>
 8005eae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005eb0:	e794      	b.n	8005ddc <_printf_float+0x1dc>
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	4652      	mov	r2, sl
 8005eb6:	4631      	mov	r1, r6
 8005eb8:	4628      	mov	r0, r5
 8005eba:	47b8      	blx	r7
 8005ebc:	3001      	adds	r0, #1
 8005ebe:	f43f aefc 	beq.w	8005cba <_printf_float+0xba>
 8005ec2:	f109 0901 	add.w	r9, r9, #1
 8005ec6:	e7ee      	b.n	8005ea6 <_printf_float+0x2a6>
 8005ec8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005eca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	bfa8      	it	ge
 8005ed0:	461a      	movge	r2, r3
 8005ed2:	2a00      	cmp	r2, #0
 8005ed4:	4691      	mov	r9, r2
 8005ed6:	dd07      	ble.n	8005ee8 <_printf_float+0x2e8>
 8005ed8:	4613      	mov	r3, r2
 8005eda:	4631      	mov	r1, r6
 8005edc:	4642      	mov	r2, r8
 8005ede:	4628      	mov	r0, r5
 8005ee0:	47b8      	blx	r7
 8005ee2:	3001      	adds	r0, #1
 8005ee4:	f43f aee9 	beq.w	8005cba <_printf_float+0xba>
 8005ee8:	f104 031a 	add.w	r3, r4, #26
 8005eec:	f04f 0b00 	mov.w	fp, #0
 8005ef0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005ef4:	9306      	str	r3, [sp, #24]
 8005ef6:	e015      	b.n	8005f24 <_printf_float+0x324>
 8005ef8:	7fefffff 	.word	0x7fefffff
 8005efc:	08009724 	.word	0x08009724
 8005f00:	08009720 	.word	0x08009720
 8005f04:	0800972c 	.word	0x0800972c
 8005f08:	08009728 	.word	0x08009728
 8005f0c:	08009730 	.word	0x08009730
 8005f10:	2301      	movs	r3, #1
 8005f12:	9a06      	ldr	r2, [sp, #24]
 8005f14:	4631      	mov	r1, r6
 8005f16:	4628      	mov	r0, r5
 8005f18:	47b8      	blx	r7
 8005f1a:	3001      	adds	r0, #1
 8005f1c:	f43f aecd 	beq.w	8005cba <_printf_float+0xba>
 8005f20:	f10b 0b01 	add.w	fp, fp, #1
 8005f24:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005f28:	ebaa 0309 	sub.w	r3, sl, r9
 8005f2c:	455b      	cmp	r3, fp
 8005f2e:	dcef      	bgt.n	8005f10 <_printf_float+0x310>
 8005f30:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f34:	429a      	cmp	r2, r3
 8005f36:	44d0      	add	r8, sl
 8005f38:	db15      	blt.n	8005f66 <_printf_float+0x366>
 8005f3a:	6823      	ldr	r3, [r4, #0]
 8005f3c:	07da      	lsls	r2, r3, #31
 8005f3e:	d412      	bmi.n	8005f66 <_printf_float+0x366>
 8005f40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f42:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005f44:	eba3 020a 	sub.w	r2, r3, sl
 8005f48:	eba3 0a01 	sub.w	sl, r3, r1
 8005f4c:	4592      	cmp	sl, r2
 8005f4e:	bfa8      	it	ge
 8005f50:	4692      	movge	sl, r2
 8005f52:	f1ba 0f00 	cmp.w	sl, #0
 8005f56:	dc0e      	bgt.n	8005f76 <_printf_float+0x376>
 8005f58:	f04f 0800 	mov.w	r8, #0
 8005f5c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005f60:	f104 091a 	add.w	r9, r4, #26
 8005f64:	e019      	b.n	8005f9a <_printf_float+0x39a>
 8005f66:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f6a:	4631      	mov	r1, r6
 8005f6c:	4628      	mov	r0, r5
 8005f6e:	47b8      	blx	r7
 8005f70:	3001      	adds	r0, #1
 8005f72:	d1e5      	bne.n	8005f40 <_printf_float+0x340>
 8005f74:	e6a1      	b.n	8005cba <_printf_float+0xba>
 8005f76:	4653      	mov	r3, sl
 8005f78:	4642      	mov	r2, r8
 8005f7a:	4631      	mov	r1, r6
 8005f7c:	4628      	mov	r0, r5
 8005f7e:	47b8      	blx	r7
 8005f80:	3001      	adds	r0, #1
 8005f82:	d1e9      	bne.n	8005f58 <_printf_float+0x358>
 8005f84:	e699      	b.n	8005cba <_printf_float+0xba>
 8005f86:	2301      	movs	r3, #1
 8005f88:	464a      	mov	r2, r9
 8005f8a:	4631      	mov	r1, r6
 8005f8c:	4628      	mov	r0, r5
 8005f8e:	47b8      	blx	r7
 8005f90:	3001      	adds	r0, #1
 8005f92:	f43f ae92 	beq.w	8005cba <_printf_float+0xba>
 8005f96:	f108 0801 	add.w	r8, r8, #1
 8005f9a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f9e:	1a9b      	subs	r3, r3, r2
 8005fa0:	eba3 030a 	sub.w	r3, r3, sl
 8005fa4:	4543      	cmp	r3, r8
 8005fa6:	dcee      	bgt.n	8005f86 <_printf_float+0x386>
 8005fa8:	e74a      	b.n	8005e40 <_printf_float+0x240>
 8005faa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005fac:	2a01      	cmp	r2, #1
 8005fae:	dc01      	bgt.n	8005fb4 <_printf_float+0x3b4>
 8005fb0:	07db      	lsls	r3, r3, #31
 8005fb2:	d53a      	bpl.n	800602a <_printf_float+0x42a>
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	4642      	mov	r2, r8
 8005fb8:	4631      	mov	r1, r6
 8005fba:	4628      	mov	r0, r5
 8005fbc:	47b8      	blx	r7
 8005fbe:	3001      	adds	r0, #1
 8005fc0:	f43f ae7b 	beq.w	8005cba <_printf_float+0xba>
 8005fc4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005fc8:	4631      	mov	r1, r6
 8005fca:	4628      	mov	r0, r5
 8005fcc:	47b8      	blx	r7
 8005fce:	3001      	adds	r0, #1
 8005fd0:	f108 0801 	add.w	r8, r8, #1
 8005fd4:	f43f ae71 	beq.w	8005cba <_printf_float+0xba>
 8005fd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fda:	2200      	movs	r2, #0
 8005fdc:	f103 3aff 	add.w	sl, r3, #4294967295
 8005fe0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	f7fa fd6f 	bl	8000ac8 <__aeabi_dcmpeq>
 8005fea:	b9c8      	cbnz	r0, 8006020 <_printf_float+0x420>
 8005fec:	4653      	mov	r3, sl
 8005fee:	4642      	mov	r2, r8
 8005ff0:	4631      	mov	r1, r6
 8005ff2:	4628      	mov	r0, r5
 8005ff4:	47b8      	blx	r7
 8005ff6:	3001      	adds	r0, #1
 8005ff8:	d10e      	bne.n	8006018 <_printf_float+0x418>
 8005ffa:	e65e      	b.n	8005cba <_printf_float+0xba>
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	4652      	mov	r2, sl
 8006000:	4631      	mov	r1, r6
 8006002:	4628      	mov	r0, r5
 8006004:	47b8      	blx	r7
 8006006:	3001      	adds	r0, #1
 8006008:	f43f ae57 	beq.w	8005cba <_printf_float+0xba>
 800600c:	f108 0801 	add.w	r8, r8, #1
 8006010:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006012:	3b01      	subs	r3, #1
 8006014:	4543      	cmp	r3, r8
 8006016:	dcf1      	bgt.n	8005ffc <_printf_float+0x3fc>
 8006018:	464b      	mov	r3, r9
 800601a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800601e:	e6de      	b.n	8005dde <_printf_float+0x1de>
 8006020:	f04f 0800 	mov.w	r8, #0
 8006024:	f104 0a1a 	add.w	sl, r4, #26
 8006028:	e7f2      	b.n	8006010 <_printf_float+0x410>
 800602a:	2301      	movs	r3, #1
 800602c:	e7df      	b.n	8005fee <_printf_float+0x3ee>
 800602e:	2301      	movs	r3, #1
 8006030:	464a      	mov	r2, r9
 8006032:	4631      	mov	r1, r6
 8006034:	4628      	mov	r0, r5
 8006036:	47b8      	blx	r7
 8006038:	3001      	adds	r0, #1
 800603a:	f43f ae3e 	beq.w	8005cba <_printf_float+0xba>
 800603e:	f108 0801 	add.w	r8, r8, #1
 8006042:	68e3      	ldr	r3, [r4, #12]
 8006044:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006046:	1a9b      	subs	r3, r3, r2
 8006048:	4543      	cmp	r3, r8
 800604a:	dcf0      	bgt.n	800602e <_printf_float+0x42e>
 800604c:	e6fc      	b.n	8005e48 <_printf_float+0x248>
 800604e:	f04f 0800 	mov.w	r8, #0
 8006052:	f104 0919 	add.w	r9, r4, #25
 8006056:	e7f4      	b.n	8006042 <_printf_float+0x442>
 8006058:	2900      	cmp	r1, #0
 800605a:	f43f ae8b 	beq.w	8005d74 <_printf_float+0x174>
 800605e:	2300      	movs	r3, #0
 8006060:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006064:	ab09      	add	r3, sp, #36	; 0x24
 8006066:	9300      	str	r3, [sp, #0]
 8006068:	ec49 8b10 	vmov	d0, r8, r9
 800606c:	6022      	str	r2, [r4, #0]
 800606e:	f8cd a004 	str.w	sl, [sp, #4]
 8006072:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006076:	4628      	mov	r0, r5
 8006078:	f7ff fd2e 	bl	8005ad8 <__cvt>
 800607c:	4680      	mov	r8, r0
 800607e:	e648      	b.n	8005d12 <_printf_float+0x112>

08006080 <_printf_common>:
 8006080:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006084:	4691      	mov	r9, r2
 8006086:	461f      	mov	r7, r3
 8006088:	688a      	ldr	r2, [r1, #8]
 800608a:	690b      	ldr	r3, [r1, #16]
 800608c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006090:	4293      	cmp	r3, r2
 8006092:	bfb8      	it	lt
 8006094:	4613      	movlt	r3, r2
 8006096:	f8c9 3000 	str.w	r3, [r9]
 800609a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800609e:	4606      	mov	r6, r0
 80060a0:	460c      	mov	r4, r1
 80060a2:	b112      	cbz	r2, 80060aa <_printf_common+0x2a>
 80060a4:	3301      	adds	r3, #1
 80060a6:	f8c9 3000 	str.w	r3, [r9]
 80060aa:	6823      	ldr	r3, [r4, #0]
 80060ac:	0699      	lsls	r1, r3, #26
 80060ae:	bf42      	ittt	mi
 80060b0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80060b4:	3302      	addmi	r3, #2
 80060b6:	f8c9 3000 	strmi.w	r3, [r9]
 80060ba:	6825      	ldr	r5, [r4, #0]
 80060bc:	f015 0506 	ands.w	r5, r5, #6
 80060c0:	d107      	bne.n	80060d2 <_printf_common+0x52>
 80060c2:	f104 0a19 	add.w	sl, r4, #25
 80060c6:	68e3      	ldr	r3, [r4, #12]
 80060c8:	f8d9 2000 	ldr.w	r2, [r9]
 80060cc:	1a9b      	subs	r3, r3, r2
 80060ce:	42ab      	cmp	r3, r5
 80060d0:	dc28      	bgt.n	8006124 <_printf_common+0xa4>
 80060d2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80060d6:	6822      	ldr	r2, [r4, #0]
 80060d8:	3300      	adds	r3, #0
 80060da:	bf18      	it	ne
 80060dc:	2301      	movne	r3, #1
 80060de:	0692      	lsls	r2, r2, #26
 80060e0:	d42d      	bmi.n	800613e <_printf_common+0xbe>
 80060e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80060e6:	4639      	mov	r1, r7
 80060e8:	4630      	mov	r0, r6
 80060ea:	47c0      	blx	r8
 80060ec:	3001      	adds	r0, #1
 80060ee:	d020      	beq.n	8006132 <_printf_common+0xb2>
 80060f0:	6823      	ldr	r3, [r4, #0]
 80060f2:	68e5      	ldr	r5, [r4, #12]
 80060f4:	f8d9 2000 	ldr.w	r2, [r9]
 80060f8:	f003 0306 	and.w	r3, r3, #6
 80060fc:	2b04      	cmp	r3, #4
 80060fe:	bf08      	it	eq
 8006100:	1aad      	subeq	r5, r5, r2
 8006102:	68a3      	ldr	r3, [r4, #8]
 8006104:	6922      	ldr	r2, [r4, #16]
 8006106:	bf0c      	ite	eq
 8006108:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800610c:	2500      	movne	r5, #0
 800610e:	4293      	cmp	r3, r2
 8006110:	bfc4      	itt	gt
 8006112:	1a9b      	subgt	r3, r3, r2
 8006114:	18ed      	addgt	r5, r5, r3
 8006116:	f04f 0900 	mov.w	r9, #0
 800611a:	341a      	adds	r4, #26
 800611c:	454d      	cmp	r5, r9
 800611e:	d11a      	bne.n	8006156 <_printf_common+0xd6>
 8006120:	2000      	movs	r0, #0
 8006122:	e008      	b.n	8006136 <_printf_common+0xb6>
 8006124:	2301      	movs	r3, #1
 8006126:	4652      	mov	r2, sl
 8006128:	4639      	mov	r1, r7
 800612a:	4630      	mov	r0, r6
 800612c:	47c0      	blx	r8
 800612e:	3001      	adds	r0, #1
 8006130:	d103      	bne.n	800613a <_printf_common+0xba>
 8006132:	f04f 30ff 	mov.w	r0, #4294967295
 8006136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800613a:	3501      	adds	r5, #1
 800613c:	e7c3      	b.n	80060c6 <_printf_common+0x46>
 800613e:	18e1      	adds	r1, r4, r3
 8006140:	1c5a      	adds	r2, r3, #1
 8006142:	2030      	movs	r0, #48	; 0x30
 8006144:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006148:	4422      	add	r2, r4
 800614a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800614e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006152:	3302      	adds	r3, #2
 8006154:	e7c5      	b.n	80060e2 <_printf_common+0x62>
 8006156:	2301      	movs	r3, #1
 8006158:	4622      	mov	r2, r4
 800615a:	4639      	mov	r1, r7
 800615c:	4630      	mov	r0, r6
 800615e:	47c0      	blx	r8
 8006160:	3001      	adds	r0, #1
 8006162:	d0e6      	beq.n	8006132 <_printf_common+0xb2>
 8006164:	f109 0901 	add.w	r9, r9, #1
 8006168:	e7d8      	b.n	800611c <_printf_common+0x9c>
	...

0800616c <_printf_i>:
 800616c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006170:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006174:	460c      	mov	r4, r1
 8006176:	7e09      	ldrb	r1, [r1, #24]
 8006178:	b085      	sub	sp, #20
 800617a:	296e      	cmp	r1, #110	; 0x6e
 800617c:	4617      	mov	r7, r2
 800617e:	4606      	mov	r6, r0
 8006180:	4698      	mov	r8, r3
 8006182:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006184:	f000 80b3 	beq.w	80062ee <_printf_i+0x182>
 8006188:	d822      	bhi.n	80061d0 <_printf_i+0x64>
 800618a:	2963      	cmp	r1, #99	; 0x63
 800618c:	d036      	beq.n	80061fc <_printf_i+0x90>
 800618e:	d80a      	bhi.n	80061a6 <_printf_i+0x3a>
 8006190:	2900      	cmp	r1, #0
 8006192:	f000 80b9 	beq.w	8006308 <_printf_i+0x19c>
 8006196:	2958      	cmp	r1, #88	; 0x58
 8006198:	f000 8083 	beq.w	80062a2 <_printf_i+0x136>
 800619c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061a0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80061a4:	e032      	b.n	800620c <_printf_i+0xa0>
 80061a6:	2964      	cmp	r1, #100	; 0x64
 80061a8:	d001      	beq.n	80061ae <_printf_i+0x42>
 80061aa:	2969      	cmp	r1, #105	; 0x69
 80061ac:	d1f6      	bne.n	800619c <_printf_i+0x30>
 80061ae:	6820      	ldr	r0, [r4, #0]
 80061b0:	6813      	ldr	r3, [r2, #0]
 80061b2:	0605      	lsls	r5, r0, #24
 80061b4:	f103 0104 	add.w	r1, r3, #4
 80061b8:	d52a      	bpl.n	8006210 <_printf_i+0xa4>
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	6011      	str	r1, [r2, #0]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	da03      	bge.n	80061ca <_printf_i+0x5e>
 80061c2:	222d      	movs	r2, #45	; 0x2d
 80061c4:	425b      	negs	r3, r3
 80061c6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80061ca:	486f      	ldr	r0, [pc, #444]	; (8006388 <_printf_i+0x21c>)
 80061cc:	220a      	movs	r2, #10
 80061ce:	e039      	b.n	8006244 <_printf_i+0xd8>
 80061d0:	2973      	cmp	r1, #115	; 0x73
 80061d2:	f000 809d 	beq.w	8006310 <_printf_i+0x1a4>
 80061d6:	d808      	bhi.n	80061ea <_printf_i+0x7e>
 80061d8:	296f      	cmp	r1, #111	; 0x6f
 80061da:	d020      	beq.n	800621e <_printf_i+0xb2>
 80061dc:	2970      	cmp	r1, #112	; 0x70
 80061de:	d1dd      	bne.n	800619c <_printf_i+0x30>
 80061e0:	6823      	ldr	r3, [r4, #0]
 80061e2:	f043 0320 	orr.w	r3, r3, #32
 80061e6:	6023      	str	r3, [r4, #0]
 80061e8:	e003      	b.n	80061f2 <_printf_i+0x86>
 80061ea:	2975      	cmp	r1, #117	; 0x75
 80061ec:	d017      	beq.n	800621e <_printf_i+0xb2>
 80061ee:	2978      	cmp	r1, #120	; 0x78
 80061f0:	d1d4      	bne.n	800619c <_printf_i+0x30>
 80061f2:	2378      	movs	r3, #120	; 0x78
 80061f4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80061f8:	4864      	ldr	r0, [pc, #400]	; (800638c <_printf_i+0x220>)
 80061fa:	e055      	b.n	80062a8 <_printf_i+0x13c>
 80061fc:	6813      	ldr	r3, [r2, #0]
 80061fe:	1d19      	adds	r1, r3, #4
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	6011      	str	r1, [r2, #0]
 8006204:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006208:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800620c:	2301      	movs	r3, #1
 800620e:	e08c      	b.n	800632a <_printf_i+0x1be>
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	6011      	str	r1, [r2, #0]
 8006214:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006218:	bf18      	it	ne
 800621a:	b21b      	sxthne	r3, r3
 800621c:	e7cf      	b.n	80061be <_printf_i+0x52>
 800621e:	6813      	ldr	r3, [r2, #0]
 8006220:	6825      	ldr	r5, [r4, #0]
 8006222:	1d18      	adds	r0, r3, #4
 8006224:	6010      	str	r0, [r2, #0]
 8006226:	0628      	lsls	r0, r5, #24
 8006228:	d501      	bpl.n	800622e <_printf_i+0xc2>
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	e002      	b.n	8006234 <_printf_i+0xc8>
 800622e:	0668      	lsls	r0, r5, #25
 8006230:	d5fb      	bpl.n	800622a <_printf_i+0xbe>
 8006232:	881b      	ldrh	r3, [r3, #0]
 8006234:	4854      	ldr	r0, [pc, #336]	; (8006388 <_printf_i+0x21c>)
 8006236:	296f      	cmp	r1, #111	; 0x6f
 8006238:	bf14      	ite	ne
 800623a:	220a      	movne	r2, #10
 800623c:	2208      	moveq	r2, #8
 800623e:	2100      	movs	r1, #0
 8006240:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006244:	6865      	ldr	r5, [r4, #4]
 8006246:	60a5      	str	r5, [r4, #8]
 8006248:	2d00      	cmp	r5, #0
 800624a:	f2c0 8095 	blt.w	8006378 <_printf_i+0x20c>
 800624e:	6821      	ldr	r1, [r4, #0]
 8006250:	f021 0104 	bic.w	r1, r1, #4
 8006254:	6021      	str	r1, [r4, #0]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d13d      	bne.n	80062d6 <_printf_i+0x16a>
 800625a:	2d00      	cmp	r5, #0
 800625c:	f040 808e 	bne.w	800637c <_printf_i+0x210>
 8006260:	4665      	mov	r5, ip
 8006262:	2a08      	cmp	r2, #8
 8006264:	d10b      	bne.n	800627e <_printf_i+0x112>
 8006266:	6823      	ldr	r3, [r4, #0]
 8006268:	07db      	lsls	r3, r3, #31
 800626a:	d508      	bpl.n	800627e <_printf_i+0x112>
 800626c:	6923      	ldr	r3, [r4, #16]
 800626e:	6862      	ldr	r2, [r4, #4]
 8006270:	429a      	cmp	r2, r3
 8006272:	bfde      	ittt	le
 8006274:	2330      	movle	r3, #48	; 0x30
 8006276:	f805 3c01 	strble.w	r3, [r5, #-1]
 800627a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800627e:	ebac 0305 	sub.w	r3, ip, r5
 8006282:	6123      	str	r3, [r4, #16]
 8006284:	f8cd 8000 	str.w	r8, [sp]
 8006288:	463b      	mov	r3, r7
 800628a:	aa03      	add	r2, sp, #12
 800628c:	4621      	mov	r1, r4
 800628e:	4630      	mov	r0, r6
 8006290:	f7ff fef6 	bl	8006080 <_printf_common>
 8006294:	3001      	adds	r0, #1
 8006296:	d14d      	bne.n	8006334 <_printf_i+0x1c8>
 8006298:	f04f 30ff 	mov.w	r0, #4294967295
 800629c:	b005      	add	sp, #20
 800629e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80062a2:	4839      	ldr	r0, [pc, #228]	; (8006388 <_printf_i+0x21c>)
 80062a4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80062a8:	6813      	ldr	r3, [r2, #0]
 80062aa:	6821      	ldr	r1, [r4, #0]
 80062ac:	1d1d      	adds	r5, r3, #4
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	6015      	str	r5, [r2, #0]
 80062b2:	060a      	lsls	r2, r1, #24
 80062b4:	d50b      	bpl.n	80062ce <_printf_i+0x162>
 80062b6:	07ca      	lsls	r2, r1, #31
 80062b8:	bf44      	itt	mi
 80062ba:	f041 0120 	orrmi.w	r1, r1, #32
 80062be:	6021      	strmi	r1, [r4, #0]
 80062c0:	b91b      	cbnz	r3, 80062ca <_printf_i+0x15e>
 80062c2:	6822      	ldr	r2, [r4, #0]
 80062c4:	f022 0220 	bic.w	r2, r2, #32
 80062c8:	6022      	str	r2, [r4, #0]
 80062ca:	2210      	movs	r2, #16
 80062cc:	e7b7      	b.n	800623e <_printf_i+0xd2>
 80062ce:	064d      	lsls	r5, r1, #25
 80062d0:	bf48      	it	mi
 80062d2:	b29b      	uxthmi	r3, r3
 80062d4:	e7ef      	b.n	80062b6 <_printf_i+0x14a>
 80062d6:	4665      	mov	r5, ip
 80062d8:	fbb3 f1f2 	udiv	r1, r3, r2
 80062dc:	fb02 3311 	mls	r3, r2, r1, r3
 80062e0:	5cc3      	ldrb	r3, [r0, r3]
 80062e2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80062e6:	460b      	mov	r3, r1
 80062e8:	2900      	cmp	r1, #0
 80062ea:	d1f5      	bne.n	80062d8 <_printf_i+0x16c>
 80062ec:	e7b9      	b.n	8006262 <_printf_i+0xf6>
 80062ee:	6813      	ldr	r3, [r2, #0]
 80062f0:	6825      	ldr	r5, [r4, #0]
 80062f2:	6961      	ldr	r1, [r4, #20]
 80062f4:	1d18      	adds	r0, r3, #4
 80062f6:	6010      	str	r0, [r2, #0]
 80062f8:	0628      	lsls	r0, r5, #24
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	d501      	bpl.n	8006302 <_printf_i+0x196>
 80062fe:	6019      	str	r1, [r3, #0]
 8006300:	e002      	b.n	8006308 <_printf_i+0x19c>
 8006302:	066a      	lsls	r2, r5, #25
 8006304:	d5fb      	bpl.n	80062fe <_printf_i+0x192>
 8006306:	8019      	strh	r1, [r3, #0]
 8006308:	2300      	movs	r3, #0
 800630a:	6123      	str	r3, [r4, #16]
 800630c:	4665      	mov	r5, ip
 800630e:	e7b9      	b.n	8006284 <_printf_i+0x118>
 8006310:	6813      	ldr	r3, [r2, #0]
 8006312:	1d19      	adds	r1, r3, #4
 8006314:	6011      	str	r1, [r2, #0]
 8006316:	681d      	ldr	r5, [r3, #0]
 8006318:	6862      	ldr	r2, [r4, #4]
 800631a:	2100      	movs	r1, #0
 800631c:	4628      	mov	r0, r5
 800631e:	f7f9 ff5f 	bl	80001e0 <memchr>
 8006322:	b108      	cbz	r0, 8006328 <_printf_i+0x1bc>
 8006324:	1b40      	subs	r0, r0, r5
 8006326:	6060      	str	r0, [r4, #4]
 8006328:	6863      	ldr	r3, [r4, #4]
 800632a:	6123      	str	r3, [r4, #16]
 800632c:	2300      	movs	r3, #0
 800632e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006332:	e7a7      	b.n	8006284 <_printf_i+0x118>
 8006334:	6923      	ldr	r3, [r4, #16]
 8006336:	462a      	mov	r2, r5
 8006338:	4639      	mov	r1, r7
 800633a:	4630      	mov	r0, r6
 800633c:	47c0      	blx	r8
 800633e:	3001      	adds	r0, #1
 8006340:	d0aa      	beq.n	8006298 <_printf_i+0x12c>
 8006342:	6823      	ldr	r3, [r4, #0]
 8006344:	079b      	lsls	r3, r3, #30
 8006346:	d413      	bmi.n	8006370 <_printf_i+0x204>
 8006348:	68e0      	ldr	r0, [r4, #12]
 800634a:	9b03      	ldr	r3, [sp, #12]
 800634c:	4298      	cmp	r0, r3
 800634e:	bfb8      	it	lt
 8006350:	4618      	movlt	r0, r3
 8006352:	e7a3      	b.n	800629c <_printf_i+0x130>
 8006354:	2301      	movs	r3, #1
 8006356:	464a      	mov	r2, r9
 8006358:	4639      	mov	r1, r7
 800635a:	4630      	mov	r0, r6
 800635c:	47c0      	blx	r8
 800635e:	3001      	adds	r0, #1
 8006360:	d09a      	beq.n	8006298 <_printf_i+0x12c>
 8006362:	3501      	adds	r5, #1
 8006364:	68e3      	ldr	r3, [r4, #12]
 8006366:	9a03      	ldr	r2, [sp, #12]
 8006368:	1a9b      	subs	r3, r3, r2
 800636a:	42ab      	cmp	r3, r5
 800636c:	dcf2      	bgt.n	8006354 <_printf_i+0x1e8>
 800636e:	e7eb      	b.n	8006348 <_printf_i+0x1dc>
 8006370:	2500      	movs	r5, #0
 8006372:	f104 0919 	add.w	r9, r4, #25
 8006376:	e7f5      	b.n	8006364 <_printf_i+0x1f8>
 8006378:	2b00      	cmp	r3, #0
 800637a:	d1ac      	bne.n	80062d6 <_printf_i+0x16a>
 800637c:	7803      	ldrb	r3, [r0, #0]
 800637e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006382:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006386:	e76c      	b.n	8006262 <_printf_i+0xf6>
 8006388:	08009732 	.word	0x08009732
 800638c:	08009743 	.word	0x08009743

08006390 <_scanf_float>:
 8006390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006394:	469a      	mov	sl, r3
 8006396:	688b      	ldr	r3, [r1, #8]
 8006398:	4616      	mov	r6, r2
 800639a:	1e5a      	subs	r2, r3, #1
 800639c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80063a0:	b087      	sub	sp, #28
 80063a2:	bf83      	ittte	hi
 80063a4:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 80063a8:	189b      	addhi	r3, r3, r2
 80063aa:	9301      	strhi	r3, [sp, #4]
 80063ac:	2300      	movls	r3, #0
 80063ae:	bf86      	itte	hi
 80063b0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80063b4:	608b      	strhi	r3, [r1, #8]
 80063b6:	9301      	strls	r3, [sp, #4]
 80063b8:	680b      	ldr	r3, [r1, #0]
 80063ba:	4688      	mov	r8, r1
 80063bc:	f04f 0b00 	mov.w	fp, #0
 80063c0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80063c4:	f848 3b1c 	str.w	r3, [r8], #28
 80063c8:	e9cd bb03 	strd	fp, fp, [sp, #12]
 80063cc:	4607      	mov	r7, r0
 80063ce:	460c      	mov	r4, r1
 80063d0:	4645      	mov	r5, r8
 80063d2:	465a      	mov	r2, fp
 80063d4:	46d9      	mov	r9, fp
 80063d6:	f8cd b008 	str.w	fp, [sp, #8]
 80063da:	68a1      	ldr	r1, [r4, #8]
 80063dc:	b181      	cbz	r1, 8006400 <_scanf_float+0x70>
 80063de:	6833      	ldr	r3, [r6, #0]
 80063e0:	781b      	ldrb	r3, [r3, #0]
 80063e2:	2b49      	cmp	r3, #73	; 0x49
 80063e4:	d071      	beq.n	80064ca <_scanf_float+0x13a>
 80063e6:	d84d      	bhi.n	8006484 <_scanf_float+0xf4>
 80063e8:	2b39      	cmp	r3, #57	; 0x39
 80063ea:	d840      	bhi.n	800646e <_scanf_float+0xde>
 80063ec:	2b31      	cmp	r3, #49	; 0x31
 80063ee:	f080 8088 	bcs.w	8006502 <_scanf_float+0x172>
 80063f2:	2b2d      	cmp	r3, #45	; 0x2d
 80063f4:	f000 8090 	beq.w	8006518 <_scanf_float+0x188>
 80063f8:	d815      	bhi.n	8006426 <_scanf_float+0x96>
 80063fa:	2b2b      	cmp	r3, #43	; 0x2b
 80063fc:	f000 808c 	beq.w	8006518 <_scanf_float+0x188>
 8006400:	f1b9 0f00 	cmp.w	r9, #0
 8006404:	d003      	beq.n	800640e <_scanf_float+0x7e>
 8006406:	6823      	ldr	r3, [r4, #0]
 8006408:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800640c:	6023      	str	r3, [r4, #0]
 800640e:	3a01      	subs	r2, #1
 8006410:	2a01      	cmp	r2, #1
 8006412:	f200 80ea 	bhi.w	80065ea <_scanf_float+0x25a>
 8006416:	4545      	cmp	r5, r8
 8006418:	f200 80dc 	bhi.w	80065d4 <_scanf_float+0x244>
 800641c:	2601      	movs	r6, #1
 800641e:	4630      	mov	r0, r6
 8006420:	b007      	add	sp, #28
 8006422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006426:	2b2e      	cmp	r3, #46	; 0x2e
 8006428:	f000 809f 	beq.w	800656a <_scanf_float+0x1da>
 800642c:	2b30      	cmp	r3, #48	; 0x30
 800642e:	d1e7      	bne.n	8006400 <_scanf_float+0x70>
 8006430:	6820      	ldr	r0, [r4, #0]
 8006432:	f410 7f80 	tst.w	r0, #256	; 0x100
 8006436:	d064      	beq.n	8006502 <_scanf_float+0x172>
 8006438:	9b01      	ldr	r3, [sp, #4]
 800643a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800643e:	6020      	str	r0, [r4, #0]
 8006440:	f109 0901 	add.w	r9, r9, #1
 8006444:	b11b      	cbz	r3, 800644e <_scanf_float+0xbe>
 8006446:	3b01      	subs	r3, #1
 8006448:	3101      	adds	r1, #1
 800644a:	9301      	str	r3, [sp, #4]
 800644c:	60a1      	str	r1, [r4, #8]
 800644e:	68a3      	ldr	r3, [r4, #8]
 8006450:	3b01      	subs	r3, #1
 8006452:	60a3      	str	r3, [r4, #8]
 8006454:	6923      	ldr	r3, [r4, #16]
 8006456:	3301      	adds	r3, #1
 8006458:	6123      	str	r3, [r4, #16]
 800645a:	6873      	ldr	r3, [r6, #4]
 800645c:	3b01      	subs	r3, #1
 800645e:	2b00      	cmp	r3, #0
 8006460:	6073      	str	r3, [r6, #4]
 8006462:	f340 80ac 	ble.w	80065be <_scanf_float+0x22e>
 8006466:	6833      	ldr	r3, [r6, #0]
 8006468:	3301      	adds	r3, #1
 800646a:	6033      	str	r3, [r6, #0]
 800646c:	e7b5      	b.n	80063da <_scanf_float+0x4a>
 800646e:	2b45      	cmp	r3, #69	; 0x45
 8006470:	f000 8085 	beq.w	800657e <_scanf_float+0x1ee>
 8006474:	2b46      	cmp	r3, #70	; 0x46
 8006476:	d06a      	beq.n	800654e <_scanf_float+0x1be>
 8006478:	2b41      	cmp	r3, #65	; 0x41
 800647a:	d1c1      	bne.n	8006400 <_scanf_float+0x70>
 800647c:	2a01      	cmp	r2, #1
 800647e:	d1bf      	bne.n	8006400 <_scanf_float+0x70>
 8006480:	2202      	movs	r2, #2
 8006482:	e046      	b.n	8006512 <_scanf_float+0x182>
 8006484:	2b65      	cmp	r3, #101	; 0x65
 8006486:	d07a      	beq.n	800657e <_scanf_float+0x1ee>
 8006488:	d818      	bhi.n	80064bc <_scanf_float+0x12c>
 800648a:	2b54      	cmp	r3, #84	; 0x54
 800648c:	d066      	beq.n	800655c <_scanf_float+0x1cc>
 800648e:	d811      	bhi.n	80064b4 <_scanf_float+0x124>
 8006490:	2b4e      	cmp	r3, #78	; 0x4e
 8006492:	d1b5      	bne.n	8006400 <_scanf_float+0x70>
 8006494:	2a00      	cmp	r2, #0
 8006496:	d146      	bne.n	8006526 <_scanf_float+0x196>
 8006498:	f1b9 0f00 	cmp.w	r9, #0
 800649c:	d145      	bne.n	800652a <_scanf_float+0x19a>
 800649e:	6821      	ldr	r1, [r4, #0]
 80064a0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80064a4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80064a8:	d13f      	bne.n	800652a <_scanf_float+0x19a>
 80064aa:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80064ae:	6021      	str	r1, [r4, #0]
 80064b0:	2201      	movs	r2, #1
 80064b2:	e02e      	b.n	8006512 <_scanf_float+0x182>
 80064b4:	2b59      	cmp	r3, #89	; 0x59
 80064b6:	d01e      	beq.n	80064f6 <_scanf_float+0x166>
 80064b8:	2b61      	cmp	r3, #97	; 0x61
 80064ba:	e7de      	b.n	800647a <_scanf_float+0xea>
 80064bc:	2b6e      	cmp	r3, #110	; 0x6e
 80064be:	d0e9      	beq.n	8006494 <_scanf_float+0x104>
 80064c0:	d815      	bhi.n	80064ee <_scanf_float+0x15e>
 80064c2:	2b66      	cmp	r3, #102	; 0x66
 80064c4:	d043      	beq.n	800654e <_scanf_float+0x1be>
 80064c6:	2b69      	cmp	r3, #105	; 0x69
 80064c8:	d19a      	bne.n	8006400 <_scanf_float+0x70>
 80064ca:	f1bb 0f00 	cmp.w	fp, #0
 80064ce:	d138      	bne.n	8006542 <_scanf_float+0x1b2>
 80064d0:	f1b9 0f00 	cmp.w	r9, #0
 80064d4:	d197      	bne.n	8006406 <_scanf_float+0x76>
 80064d6:	6821      	ldr	r1, [r4, #0]
 80064d8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80064dc:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80064e0:	d195      	bne.n	800640e <_scanf_float+0x7e>
 80064e2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80064e6:	6021      	str	r1, [r4, #0]
 80064e8:	f04f 0b01 	mov.w	fp, #1
 80064ec:	e011      	b.n	8006512 <_scanf_float+0x182>
 80064ee:	2b74      	cmp	r3, #116	; 0x74
 80064f0:	d034      	beq.n	800655c <_scanf_float+0x1cc>
 80064f2:	2b79      	cmp	r3, #121	; 0x79
 80064f4:	d184      	bne.n	8006400 <_scanf_float+0x70>
 80064f6:	f1bb 0f07 	cmp.w	fp, #7
 80064fa:	d181      	bne.n	8006400 <_scanf_float+0x70>
 80064fc:	f04f 0b08 	mov.w	fp, #8
 8006500:	e007      	b.n	8006512 <_scanf_float+0x182>
 8006502:	eb12 0f0b 	cmn.w	r2, fp
 8006506:	f47f af7b 	bne.w	8006400 <_scanf_float+0x70>
 800650a:	6821      	ldr	r1, [r4, #0]
 800650c:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8006510:	6021      	str	r1, [r4, #0]
 8006512:	702b      	strb	r3, [r5, #0]
 8006514:	3501      	adds	r5, #1
 8006516:	e79a      	b.n	800644e <_scanf_float+0xbe>
 8006518:	6821      	ldr	r1, [r4, #0]
 800651a:	0608      	lsls	r0, r1, #24
 800651c:	f57f af70 	bpl.w	8006400 <_scanf_float+0x70>
 8006520:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006524:	e7f4      	b.n	8006510 <_scanf_float+0x180>
 8006526:	2a02      	cmp	r2, #2
 8006528:	d047      	beq.n	80065ba <_scanf_float+0x22a>
 800652a:	f1bb 0f01 	cmp.w	fp, #1
 800652e:	d003      	beq.n	8006538 <_scanf_float+0x1a8>
 8006530:	f1bb 0f04 	cmp.w	fp, #4
 8006534:	f47f af64 	bne.w	8006400 <_scanf_float+0x70>
 8006538:	f10b 0b01 	add.w	fp, fp, #1
 800653c:	fa5f fb8b 	uxtb.w	fp, fp
 8006540:	e7e7      	b.n	8006512 <_scanf_float+0x182>
 8006542:	f1bb 0f03 	cmp.w	fp, #3
 8006546:	d0f7      	beq.n	8006538 <_scanf_float+0x1a8>
 8006548:	f1bb 0f05 	cmp.w	fp, #5
 800654c:	e7f2      	b.n	8006534 <_scanf_float+0x1a4>
 800654e:	f1bb 0f02 	cmp.w	fp, #2
 8006552:	f47f af55 	bne.w	8006400 <_scanf_float+0x70>
 8006556:	f04f 0b03 	mov.w	fp, #3
 800655a:	e7da      	b.n	8006512 <_scanf_float+0x182>
 800655c:	f1bb 0f06 	cmp.w	fp, #6
 8006560:	f47f af4e 	bne.w	8006400 <_scanf_float+0x70>
 8006564:	f04f 0b07 	mov.w	fp, #7
 8006568:	e7d3      	b.n	8006512 <_scanf_float+0x182>
 800656a:	6821      	ldr	r1, [r4, #0]
 800656c:	0588      	lsls	r0, r1, #22
 800656e:	f57f af47 	bpl.w	8006400 <_scanf_float+0x70>
 8006572:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8006576:	6021      	str	r1, [r4, #0]
 8006578:	f8cd 9008 	str.w	r9, [sp, #8]
 800657c:	e7c9      	b.n	8006512 <_scanf_float+0x182>
 800657e:	6821      	ldr	r1, [r4, #0]
 8006580:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8006584:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8006588:	d006      	beq.n	8006598 <_scanf_float+0x208>
 800658a:	0548      	lsls	r0, r1, #21
 800658c:	f57f af38 	bpl.w	8006400 <_scanf_float+0x70>
 8006590:	f1b9 0f00 	cmp.w	r9, #0
 8006594:	f43f af3b 	beq.w	800640e <_scanf_float+0x7e>
 8006598:	0588      	lsls	r0, r1, #22
 800659a:	bf58      	it	pl
 800659c:	9802      	ldrpl	r0, [sp, #8]
 800659e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80065a2:	bf58      	it	pl
 80065a4:	eba9 0000 	subpl.w	r0, r9, r0
 80065a8:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 80065ac:	bf58      	it	pl
 80065ae:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 80065b2:	6021      	str	r1, [r4, #0]
 80065b4:	f04f 0900 	mov.w	r9, #0
 80065b8:	e7ab      	b.n	8006512 <_scanf_float+0x182>
 80065ba:	2203      	movs	r2, #3
 80065bc:	e7a9      	b.n	8006512 <_scanf_float+0x182>
 80065be:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80065c2:	9205      	str	r2, [sp, #20]
 80065c4:	4631      	mov	r1, r6
 80065c6:	4638      	mov	r0, r7
 80065c8:	4798      	blx	r3
 80065ca:	9a05      	ldr	r2, [sp, #20]
 80065cc:	2800      	cmp	r0, #0
 80065ce:	f43f af04 	beq.w	80063da <_scanf_float+0x4a>
 80065d2:	e715      	b.n	8006400 <_scanf_float+0x70>
 80065d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80065d8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80065dc:	4632      	mov	r2, r6
 80065de:	4638      	mov	r0, r7
 80065e0:	4798      	blx	r3
 80065e2:	6923      	ldr	r3, [r4, #16]
 80065e4:	3b01      	subs	r3, #1
 80065e6:	6123      	str	r3, [r4, #16]
 80065e8:	e715      	b.n	8006416 <_scanf_float+0x86>
 80065ea:	f10b 33ff 	add.w	r3, fp, #4294967295
 80065ee:	2b06      	cmp	r3, #6
 80065f0:	d80a      	bhi.n	8006608 <_scanf_float+0x278>
 80065f2:	f1bb 0f02 	cmp.w	fp, #2
 80065f6:	d968      	bls.n	80066ca <_scanf_float+0x33a>
 80065f8:	f1ab 0b03 	sub.w	fp, fp, #3
 80065fc:	fa5f fb8b 	uxtb.w	fp, fp
 8006600:	eba5 0b0b 	sub.w	fp, r5, fp
 8006604:	455d      	cmp	r5, fp
 8006606:	d14b      	bne.n	80066a0 <_scanf_float+0x310>
 8006608:	6823      	ldr	r3, [r4, #0]
 800660a:	05da      	lsls	r2, r3, #23
 800660c:	d51f      	bpl.n	800664e <_scanf_float+0x2be>
 800660e:	055b      	lsls	r3, r3, #21
 8006610:	d468      	bmi.n	80066e4 <_scanf_float+0x354>
 8006612:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8006616:	6923      	ldr	r3, [r4, #16]
 8006618:	2965      	cmp	r1, #101	; 0x65
 800661a:	f103 33ff 	add.w	r3, r3, #4294967295
 800661e:	f105 3bff 	add.w	fp, r5, #4294967295
 8006622:	6123      	str	r3, [r4, #16]
 8006624:	d00d      	beq.n	8006642 <_scanf_float+0x2b2>
 8006626:	2945      	cmp	r1, #69	; 0x45
 8006628:	d00b      	beq.n	8006642 <_scanf_float+0x2b2>
 800662a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800662e:	4632      	mov	r2, r6
 8006630:	4638      	mov	r0, r7
 8006632:	4798      	blx	r3
 8006634:	6923      	ldr	r3, [r4, #16]
 8006636:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800663a:	3b01      	subs	r3, #1
 800663c:	f1a5 0b02 	sub.w	fp, r5, #2
 8006640:	6123      	str	r3, [r4, #16]
 8006642:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006646:	4632      	mov	r2, r6
 8006648:	4638      	mov	r0, r7
 800664a:	4798      	blx	r3
 800664c:	465d      	mov	r5, fp
 800664e:	6826      	ldr	r6, [r4, #0]
 8006650:	f016 0610 	ands.w	r6, r6, #16
 8006654:	d17a      	bne.n	800674c <_scanf_float+0x3bc>
 8006656:	702e      	strb	r6, [r5, #0]
 8006658:	6823      	ldr	r3, [r4, #0]
 800665a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800665e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006662:	d142      	bne.n	80066ea <_scanf_float+0x35a>
 8006664:	9b02      	ldr	r3, [sp, #8]
 8006666:	eba9 0303 	sub.w	r3, r9, r3
 800666a:	425a      	negs	r2, r3
 800666c:	2b00      	cmp	r3, #0
 800666e:	d149      	bne.n	8006704 <_scanf_float+0x374>
 8006670:	2200      	movs	r2, #0
 8006672:	4641      	mov	r1, r8
 8006674:	4638      	mov	r0, r7
 8006676:	f000 fed7 	bl	8007428 <_strtod_r>
 800667a:	6825      	ldr	r5, [r4, #0]
 800667c:	f8da 3000 	ldr.w	r3, [sl]
 8006680:	f015 0f02 	tst.w	r5, #2
 8006684:	f103 0204 	add.w	r2, r3, #4
 8006688:	ec59 8b10 	vmov	r8, r9, d0
 800668c:	f8ca 2000 	str.w	r2, [sl]
 8006690:	d043      	beq.n	800671a <_scanf_float+0x38a>
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	e9c3 8900 	strd	r8, r9, [r3]
 8006698:	68e3      	ldr	r3, [r4, #12]
 800669a:	3301      	adds	r3, #1
 800669c:	60e3      	str	r3, [r4, #12]
 800669e:	e6be      	b.n	800641e <_scanf_float+0x8e>
 80066a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80066a4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80066a8:	4632      	mov	r2, r6
 80066aa:	4638      	mov	r0, r7
 80066ac:	4798      	blx	r3
 80066ae:	6923      	ldr	r3, [r4, #16]
 80066b0:	3b01      	subs	r3, #1
 80066b2:	6123      	str	r3, [r4, #16]
 80066b4:	e7a6      	b.n	8006604 <_scanf_float+0x274>
 80066b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80066ba:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80066be:	4632      	mov	r2, r6
 80066c0:	4638      	mov	r0, r7
 80066c2:	4798      	blx	r3
 80066c4:	6923      	ldr	r3, [r4, #16]
 80066c6:	3b01      	subs	r3, #1
 80066c8:	6123      	str	r3, [r4, #16]
 80066ca:	4545      	cmp	r5, r8
 80066cc:	d8f3      	bhi.n	80066b6 <_scanf_float+0x326>
 80066ce:	e6a5      	b.n	800641c <_scanf_float+0x8c>
 80066d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80066d4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80066d8:	4632      	mov	r2, r6
 80066da:	4638      	mov	r0, r7
 80066dc:	4798      	blx	r3
 80066de:	6923      	ldr	r3, [r4, #16]
 80066e0:	3b01      	subs	r3, #1
 80066e2:	6123      	str	r3, [r4, #16]
 80066e4:	4545      	cmp	r5, r8
 80066e6:	d8f3      	bhi.n	80066d0 <_scanf_float+0x340>
 80066e8:	e698      	b.n	800641c <_scanf_float+0x8c>
 80066ea:	9b03      	ldr	r3, [sp, #12]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d0bf      	beq.n	8006670 <_scanf_float+0x2e0>
 80066f0:	9904      	ldr	r1, [sp, #16]
 80066f2:	230a      	movs	r3, #10
 80066f4:	4632      	mov	r2, r6
 80066f6:	3101      	adds	r1, #1
 80066f8:	4638      	mov	r0, r7
 80066fa:	f000 ff21 	bl	8007540 <_strtol_r>
 80066fe:	9b03      	ldr	r3, [sp, #12]
 8006700:	9d04      	ldr	r5, [sp, #16]
 8006702:	1ac2      	subs	r2, r0, r3
 8006704:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006708:	429d      	cmp	r5, r3
 800670a:	bf28      	it	cs
 800670c:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8006710:	490f      	ldr	r1, [pc, #60]	; (8006750 <_scanf_float+0x3c0>)
 8006712:	4628      	mov	r0, r5
 8006714:	f000 f858 	bl	80067c8 <siprintf>
 8006718:	e7aa      	b.n	8006670 <_scanf_float+0x2e0>
 800671a:	f015 0504 	ands.w	r5, r5, #4
 800671e:	d1b8      	bne.n	8006692 <_scanf_float+0x302>
 8006720:	681f      	ldr	r7, [r3, #0]
 8006722:	ee10 2a10 	vmov	r2, s0
 8006726:	464b      	mov	r3, r9
 8006728:	ee10 0a10 	vmov	r0, s0
 800672c:	4649      	mov	r1, r9
 800672e:	f7fa f9fd 	bl	8000b2c <__aeabi_dcmpun>
 8006732:	b128      	cbz	r0, 8006740 <_scanf_float+0x3b0>
 8006734:	4628      	mov	r0, r5
 8006736:	f000 f80d 	bl	8006754 <nanf>
 800673a:	ed87 0a00 	vstr	s0, [r7]
 800673e:	e7ab      	b.n	8006698 <_scanf_float+0x308>
 8006740:	4640      	mov	r0, r8
 8006742:	4649      	mov	r1, r9
 8006744:	f7fa fa50 	bl	8000be8 <__aeabi_d2f>
 8006748:	6038      	str	r0, [r7, #0]
 800674a:	e7a5      	b.n	8006698 <_scanf_float+0x308>
 800674c:	2600      	movs	r6, #0
 800674e:	e666      	b.n	800641e <_scanf_float+0x8e>
 8006750:	08009754 	.word	0x08009754

08006754 <nanf>:
 8006754:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800675c <nanf+0x8>
 8006758:	4770      	bx	lr
 800675a:	bf00      	nop
 800675c:	7fc00000 	.word	0x7fc00000

08006760 <sniprintf>:
 8006760:	b40c      	push	{r2, r3}
 8006762:	b530      	push	{r4, r5, lr}
 8006764:	4b17      	ldr	r3, [pc, #92]	; (80067c4 <sniprintf+0x64>)
 8006766:	1e0c      	subs	r4, r1, #0
 8006768:	b09d      	sub	sp, #116	; 0x74
 800676a:	681d      	ldr	r5, [r3, #0]
 800676c:	da08      	bge.n	8006780 <sniprintf+0x20>
 800676e:	238b      	movs	r3, #139	; 0x8b
 8006770:	602b      	str	r3, [r5, #0]
 8006772:	f04f 30ff 	mov.w	r0, #4294967295
 8006776:	b01d      	add	sp, #116	; 0x74
 8006778:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800677c:	b002      	add	sp, #8
 800677e:	4770      	bx	lr
 8006780:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006784:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006788:	bf14      	ite	ne
 800678a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800678e:	4623      	moveq	r3, r4
 8006790:	9304      	str	r3, [sp, #16]
 8006792:	9307      	str	r3, [sp, #28]
 8006794:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006798:	9002      	str	r0, [sp, #8]
 800679a:	9006      	str	r0, [sp, #24]
 800679c:	f8ad 3016 	strh.w	r3, [sp, #22]
 80067a0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80067a2:	ab21      	add	r3, sp, #132	; 0x84
 80067a4:	a902      	add	r1, sp, #8
 80067a6:	4628      	mov	r0, r5
 80067a8:	9301      	str	r3, [sp, #4]
 80067aa:	f002 fd8f 	bl	80092cc <_svfiprintf_r>
 80067ae:	1c43      	adds	r3, r0, #1
 80067b0:	bfbc      	itt	lt
 80067b2:	238b      	movlt	r3, #139	; 0x8b
 80067b4:	602b      	strlt	r3, [r5, #0]
 80067b6:	2c00      	cmp	r4, #0
 80067b8:	d0dd      	beq.n	8006776 <sniprintf+0x16>
 80067ba:	9b02      	ldr	r3, [sp, #8]
 80067bc:	2200      	movs	r2, #0
 80067be:	701a      	strb	r2, [r3, #0]
 80067c0:	e7d9      	b.n	8006776 <sniprintf+0x16>
 80067c2:	bf00      	nop
 80067c4:	20000030 	.word	0x20000030

080067c8 <siprintf>:
 80067c8:	b40e      	push	{r1, r2, r3}
 80067ca:	b500      	push	{lr}
 80067cc:	b09c      	sub	sp, #112	; 0x70
 80067ce:	ab1d      	add	r3, sp, #116	; 0x74
 80067d0:	9002      	str	r0, [sp, #8]
 80067d2:	9006      	str	r0, [sp, #24]
 80067d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80067d8:	4809      	ldr	r0, [pc, #36]	; (8006800 <siprintf+0x38>)
 80067da:	9107      	str	r1, [sp, #28]
 80067dc:	9104      	str	r1, [sp, #16]
 80067de:	4909      	ldr	r1, [pc, #36]	; (8006804 <siprintf+0x3c>)
 80067e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80067e4:	9105      	str	r1, [sp, #20]
 80067e6:	6800      	ldr	r0, [r0, #0]
 80067e8:	9301      	str	r3, [sp, #4]
 80067ea:	a902      	add	r1, sp, #8
 80067ec:	f002 fd6e 	bl	80092cc <_svfiprintf_r>
 80067f0:	9b02      	ldr	r3, [sp, #8]
 80067f2:	2200      	movs	r2, #0
 80067f4:	701a      	strb	r2, [r3, #0]
 80067f6:	b01c      	add	sp, #112	; 0x70
 80067f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80067fc:	b003      	add	sp, #12
 80067fe:	4770      	bx	lr
 8006800:	20000030 	.word	0x20000030
 8006804:	ffff0208 	.word	0xffff0208

08006808 <sulp>:
 8006808:	b570      	push	{r4, r5, r6, lr}
 800680a:	4604      	mov	r4, r0
 800680c:	460d      	mov	r5, r1
 800680e:	ec45 4b10 	vmov	d0, r4, r5
 8006812:	4616      	mov	r6, r2
 8006814:	f002 fb16 	bl	8008e44 <__ulp>
 8006818:	ec51 0b10 	vmov	r0, r1, d0
 800681c:	b17e      	cbz	r6, 800683e <sulp+0x36>
 800681e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006822:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006826:	2b00      	cmp	r3, #0
 8006828:	dd09      	ble.n	800683e <sulp+0x36>
 800682a:	051b      	lsls	r3, r3, #20
 800682c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006830:	2400      	movs	r4, #0
 8006832:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006836:	4622      	mov	r2, r4
 8006838:	462b      	mov	r3, r5
 800683a:	f7f9 fedd 	bl	80005f8 <__aeabi_dmul>
 800683e:	bd70      	pop	{r4, r5, r6, pc}

08006840 <_strtod_l>:
 8006840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006844:	461f      	mov	r7, r3
 8006846:	b0a1      	sub	sp, #132	; 0x84
 8006848:	2300      	movs	r3, #0
 800684a:	4681      	mov	r9, r0
 800684c:	4638      	mov	r0, r7
 800684e:	460e      	mov	r6, r1
 8006850:	9217      	str	r2, [sp, #92]	; 0x5c
 8006852:	931c      	str	r3, [sp, #112]	; 0x70
 8006854:	f001 fff5 	bl	8008842 <__localeconv_l>
 8006858:	4680      	mov	r8, r0
 800685a:	6800      	ldr	r0, [r0, #0]
 800685c:	f7f9 fcb8 	bl	80001d0 <strlen>
 8006860:	f04f 0a00 	mov.w	sl, #0
 8006864:	4604      	mov	r4, r0
 8006866:	f04f 0b00 	mov.w	fp, #0
 800686a:	961b      	str	r6, [sp, #108]	; 0x6c
 800686c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800686e:	781a      	ldrb	r2, [r3, #0]
 8006870:	2a0d      	cmp	r2, #13
 8006872:	d832      	bhi.n	80068da <_strtod_l+0x9a>
 8006874:	2a09      	cmp	r2, #9
 8006876:	d236      	bcs.n	80068e6 <_strtod_l+0xa6>
 8006878:	2a00      	cmp	r2, #0
 800687a:	d03e      	beq.n	80068fa <_strtod_l+0xba>
 800687c:	2300      	movs	r3, #0
 800687e:	930d      	str	r3, [sp, #52]	; 0x34
 8006880:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8006882:	782b      	ldrb	r3, [r5, #0]
 8006884:	2b30      	cmp	r3, #48	; 0x30
 8006886:	f040 80ac 	bne.w	80069e2 <_strtod_l+0x1a2>
 800688a:	786b      	ldrb	r3, [r5, #1]
 800688c:	2b58      	cmp	r3, #88	; 0x58
 800688e:	d001      	beq.n	8006894 <_strtod_l+0x54>
 8006890:	2b78      	cmp	r3, #120	; 0x78
 8006892:	d167      	bne.n	8006964 <_strtod_l+0x124>
 8006894:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006896:	9301      	str	r3, [sp, #4]
 8006898:	ab1c      	add	r3, sp, #112	; 0x70
 800689a:	9300      	str	r3, [sp, #0]
 800689c:	9702      	str	r7, [sp, #8]
 800689e:	ab1d      	add	r3, sp, #116	; 0x74
 80068a0:	4a88      	ldr	r2, [pc, #544]	; (8006ac4 <_strtod_l+0x284>)
 80068a2:	a91b      	add	r1, sp, #108	; 0x6c
 80068a4:	4648      	mov	r0, r9
 80068a6:	f001 fcf2 	bl	800828e <__gethex>
 80068aa:	f010 0407 	ands.w	r4, r0, #7
 80068ae:	4606      	mov	r6, r0
 80068b0:	d005      	beq.n	80068be <_strtod_l+0x7e>
 80068b2:	2c06      	cmp	r4, #6
 80068b4:	d12b      	bne.n	800690e <_strtod_l+0xce>
 80068b6:	3501      	adds	r5, #1
 80068b8:	2300      	movs	r3, #0
 80068ba:	951b      	str	r5, [sp, #108]	; 0x6c
 80068bc:	930d      	str	r3, [sp, #52]	; 0x34
 80068be:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	f040 859a 	bne.w	80073fa <_strtod_l+0xbba>
 80068c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80068c8:	b1e3      	cbz	r3, 8006904 <_strtod_l+0xc4>
 80068ca:	4652      	mov	r2, sl
 80068cc:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80068d0:	ec43 2b10 	vmov	d0, r2, r3
 80068d4:	b021      	add	sp, #132	; 0x84
 80068d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068da:	2a2b      	cmp	r2, #43	; 0x2b
 80068dc:	d015      	beq.n	800690a <_strtod_l+0xca>
 80068de:	2a2d      	cmp	r2, #45	; 0x2d
 80068e0:	d004      	beq.n	80068ec <_strtod_l+0xac>
 80068e2:	2a20      	cmp	r2, #32
 80068e4:	d1ca      	bne.n	800687c <_strtod_l+0x3c>
 80068e6:	3301      	adds	r3, #1
 80068e8:	931b      	str	r3, [sp, #108]	; 0x6c
 80068ea:	e7bf      	b.n	800686c <_strtod_l+0x2c>
 80068ec:	2201      	movs	r2, #1
 80068ee:	920d      	str	r2, [sp, #52]	; 0x34
 80068f0:	1c5a      	adds	r2, r3, #1
 80068f2:	921b      	str	r2, [sp, #108]	; 0x6c
 80068f4:	785b      	ldrb	r3, [r3, #1]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d1c2      	bne.n	8006880 <_strtod_l+0x40>
 80068fa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80068fc:	961b      	str	r6, [sp, #108]	; 0x6c
 80068fe:	2b00      	cmp	r3, #0
 8006900:	f040 8579 	bne.w	80073f6 <_strtod_l+0xbb6>
 8006904:	4652      	mov	r2, sl
 8006906:	465b      	mov	r3, fp
 8006908:	e7e2      	b.n	80068d0 <_strtod_l+0x90>
 800690a:	2200      	movs	r2, #0
 800690c:	e7ef      	b.n	80068ee <_strtod_l+0xae>
 800690e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006910:	b13a      	cbz	r2, 8006922 <_strtod_l+0xe2>
 8006912:	2135      	movs	r1, #53	; 0x35
 8006914:	a81e      	add	r0, sp, #120	; 0x78
 8006916:	f002 fb8d 	bl	8009034 <__copybits>
 800691a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800691c:	4648      	mov	r0, r9
 800691e:	f001 fffa 	bl	8008916 <_Bfree>
 8006922:	3c01      	subs	r4, #1
 8006924:	2c04      	cmp	r4, #4
 8006926:	d806      	bhi.n	8006936 <_strtod_l+0xf6>
 8006928:	e8df f004 	tbb	[pc, r4]
 800692c:	1714030a 	.word	0x1714030a
 8006930:	0a          	.byte	0x0a
 8006931:	00          	.byte	0x00
 8006932:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8006936:	0730      	lsls	r0, r6, #28
 8006938:	d5c1      	bpl.n	80068be <_strtod_l+0x7e>
 800693a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800693e:	e7be      	b.n	80068be <_strtod_l+0x7e>
 8006940:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8006944:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8006946:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800694a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800694e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006952:	e7f0      	b.n	8006936 <_strtod_l+0xf6>
 8006954:	f8df b170 	ldr.w	fp, [pc, #368]	; 8006ac8 <_strtod_l+0x288>
 8006958:	e7ed      	b.n	8006936 <_strtod_l+0xf6>
 800695a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800695e:	f04f 3aff 	mov.w	sl, #4294967295
 8006962:	e7e8      	b.n	8006936 <_strtod_l+0xf6>
 8006964:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006966:	1c5a      	adds	r2, r3, #1
 8006968:	921b      	str	r2, [sp, #108]	; 0x6c
 800696a:	785b      	ldrb	r3, [r3, #1]
 800696c:	2b30      	cmp	r3, #48	; 0x30
 800696e:	d0f9      	beq.n	8006964 <_strtod_l+0x124>
 8006970:	2b00      	cmp	r3, #0
 8006972:	d0a4      	beq.n	80068be <_strtod_l+0x7e>
 8006974:	2301      	movs	r3, #1
 8006976:	2500      	movs	r5, #0
 8006978:	9306      	str	r3, [sp, #24]
 800697a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800697c:	9308      	str	r3, [sp, #32]
 800697e:	9507      	str	r5, [sp, #28]
 8006980:	9505      	str	r5, [sp, #20]
 8006982:	220a      	movs	r2, #10
 8006984:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8006986:	7807      	ldrb	r7, [r0, #0]
 8006988:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800698c:	b2d9      	uxtb	r1, r3
 800698e:	2909      	cmp	r1, #9
 8006990:	d929      	bls.n	80069e6 <_strtod_l+0x1a6>
 8006992:	4622      	mov	r2, r4
 8006994:	f8d8 1000 	ldr.w	r1, [r8]
 8006998:	f002 fda0 	bl	80094dc <strncmp>
 800699c:	2800      	cmp	r0, #0
 800699e:	d031      	beq.n	8006a04 <_strtod_l+0x1c4>
 80069a0:	2000      	movs	r0, #0
 80069a2:	9c05      	ldr	r4, [sp, #20]
 80069a4:	9004      	str	r0, [sp, #16]
 80069a6:	463b      	mov	r3, r7
 80069a8:	4602      	mov	r2, r0
 80069aa:	2b65      	cmp	r3, #101	; 0x65
 80069ac:	d001      	beq.n	80069b2 <_strtod_l+0x172>
 80069ae:	2b45      	cmp	r3, #69	; 0x45
 80069b0:	d114      	bne.n	80069dc <_strtod_l+0x19c>
 80069b2:	b924      	cbnz	r4, 80069be <_strtod_l+0x17e>
 80069b4:	b910      	cbnz	r0, 80069bc <_strtod_l+0x17c>
 80069b6:	9b06      	ldr	r3, [sp, #24]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d09e      	beq.n	80068fa <_strtod_l+0xba>
 80069bc:	2400      	movs	r4, #0
 80069be:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80069c0:	1c73      	adds	r3, r6, #1
 80069c2:	931b      	str	r3, [sp, #108]	; 0x6c
 80069c4:	7873      	ldrb	r3, [r6, #1]
 80069c6:	2b2b      	cmp	r3, #43	; 0x2b
 80069c8:	d078      	beq.n	8006abc <_strtod_l+0x27c>
 80069ca:	2b2d      	cmp	r3, #45	; 0x2d
 80069cc:	d070      	beq.n	8006ab0 <_strtod_l+0x270>
 80069ce:	f04f 0c00 	mov.w	ip, #0
 80069d2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80069d6:	2f09      	cmp	r7, #9
 80069d8:	d97c      	bls.n	8006ad4 <_strtod_l+0x294>
 80069da:	961b      	str	r6, [sp, #108]	; 0x6c
 80069dc:	f04f 0e00 	mov.w	lr, #0
 80069e0:	e09a      	b.n	8006b18 <_strtod_l+0x2d8>
 80069e2:	2300      	movs	r3, #0
 80069e4:	e7c7      	b.n	8006976 <_strtod_l+0x136>
 80069e6:	9905      	ldr	r1, [sp, #20]
 80069e8:	2908      	cmp	r1, #8
 80069ea:	bfdd      	ittte	le
 80069ec:	9907      	ldrle	r1, [sp, #28]
 80069ee:	fb02 3301 	mlale	r3, r2, r1, r3
 80069f2:	9307      	strle	r3, [sp, #28]
 80069f4:	fb02 3505 	mlagt	r5, r2, r5, r3
 80069f8:	9b05      	ldr	r3, [sp, #20]
 80069fa:	3001      	adds	r0, #1
 80069fc:	3301      	adds	r3, #1
 80069fe:	9305      	str	r3, [sp, #20]
 8006a00:	901b      	str	r0, [sp, #108]	; 0x6c
 8006a02:	e7bf      	b.n	8006984 <_strtod_l+0x144>
 8006a04:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006a06:	191a      	adds	r2, r3, r4
 8006a08:	921b      	str	r2, [sp, #108]	; 0x6c
 8006a0a:	9a05      	ldr	r2, [sp, #20]
 8006a0c:	5d1b      	ldrb	r3, [r3, r4]
 8006a0e:	2a00      	cmp	r2, #0
 8006a10:	d037      	beq.n	8006a82 <_strtod_l+0x242>
 8006a12:	9c05      	ldr	r4, [sp, #20]
 8006a14:	4602      	mov	r2, r0
 8006a16:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8006a1a:	2909      	cmp	r1, #9
 8006a1c:	d913      	bls.n	8006a46 <_strtod_l+0x206>
 8006a1e:	2101      	movs	r1, #1
 8006a20:	9104      	str	r1, [sp, #16]
 8006a22:	e7c2      	b.n	80069aa <_strtod_l+0x16a>
 8006a24:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006a26:	1c5a      	adds	r2, r3, #1
 8006a28:	921b      	str	r2, [sp, #108]	; 0x6c
 8006a2a:	785b      	ldrb	r3, [r3, #1]
 8006a2c:	3001      	adds	r0, #1
 8006a2e:	2b30      	cmp	r3, #48	; 0x30
 8006a30:	d0f8      	beq.n	8006a24 <_strtod_l+0x1e4>
 8006a32:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8006a36:	2a08      	cmp	r2, #8
 8006a38:	f200 84e4 	bhi.w	8007404 <_strtod_l+0xbc4>
 8006a3c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006a3e:	9208      	str	r2, [sp, #32]
 8006a40:	4602      	mov	r2, r0
 8006a42:	2000      	movs	r0, #0
 8006a44:	4604      	mov	r4, r0
 8006a46:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8006a4a:	f100 0101 	add.w	r1, r0, #1
 8006a4e:	d012      	beq.n	8006a76 <_strtod_l+0x236>
 8006a50:	440a      	add	r2, r1
 8006a52:	eb00 0c04 	add.w	ip, r0, r4
 8006a56:	4621      	mov	r1, r4
 8006a58:	270a      	movs	r7, #10
 8006a5a:	458c      	cmp	ip, r1
 8006a5c:	d113      	bne.n	8006a86 <_strtod_l+0x246>
 8006a5e:	1821      	adds	r1, r4, r0
 8006a60:	2908      	cmp	r1, #8
 8006a62:	f104 0401 	add.w	r4, r4, #1
 8006a66:	4404      	add	r4, r0
 8006a68:	dc19      	bgt.n	8006a9e <_strtod_l+0x25e>
 8006a6a:	9b07      	ldr	r3, [sp, #28]
 8006a6c:	210a      	movs	r1, #10
 8006a6e:	fb01 e303 	mla	r3, r1, r3, lr
 8006a72:	9307      	str	r3, [sp, #28]
 8006a74:	2100      	movs	r1, #0
 8006a76:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006a78:	1c58      	adds	r0, r3, #1
 8006a7a:	901b      	str	r0, [sp, #108]	; 0x6c
 8006a7c:	785b      	ldrb	r3, [r3, #1]
 8006a7e:	4608      	mov	r0, r1
 8006a80:	e7c9      	b.n	8006a16 <_strtod_l+0x1d6>
 8006a82:	9805      	ldr	r0, [sp, #20]
 8006a84:	e7d3      	b.n	8006a2e <_strtod_l+0x1ee>
 8006a86:	2908      	cmp	r1, #8
 8006a88:	f101 0101 	add.w	r1, r1, #1
 8006a8c:	dc03      	bgt.n	8006a96 <_strtod_l+0x256>
 8006a8e:	9b07      	ldr	r3, [sp, #28]
 8006a90:	437b      	muls	r3, r7
 8006a92:	9307      	str	r3, [sp, #28]
 8006a94:	e7e1      	b.n	8006a5a <_strtod_l+0x21a>
 8006a96:	2910      	cmp	r1, #16
 8006a98:	bfd8      	it	le
 8006a9a:	437d      	mulle	r5, r7
 8006a9c:	e7dd      	b.n	8006a5a <_strtod_l+0x21a>
 8006a9e:	2c10      	cmp	r4, #16
 8006aa0:	bfdc      	itt	le
 8006aa2:	210a      	movle	r1, #10
 8006aa4:	fb01 e505 	mlale	r5, r1, r5, lr
 8006aa8:	e7e4      	b.n	8006a74 <_strtod_l+0x234>
 8006aaa:	2301      	movs	r3, #1
 8006aac:	9304      	str	r3, [sp, #16]
 8006aae:	e781      	b.n	80069b4 <_strtod_l+0x174>
 8006ab0:	f04f 0c01 	mov.w	ip, #1
 8006ab4:	1cb3      	adds	r3, r6, #2
 8006ab6:	931b      	str	r3, [sp, #108]	; 0x6c
 8006ab8:	78b3      	ldrb	r3, [r6, #2]
 8006aba:	e78a      	b.n	80069d2 <_strtod_l+0x192>
 8006abc:	f04f 0c00 	mov.w	ip, #0
 8006ac0:	e7f8      	b.n	8006ab4 <_strtod_l+0x274>
 8006ac2:	bf00      	nop
 8006ac4:	0800975c 	.word	0x0800975c
 8006ac8:	7ff00000 	.word	0x7ff00000
 8006acc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006ace:	1c5f      	adds	r7, r3, #1
 8006ad0:	971b      	str	r7, [sp, #108]	; 0x6c
 8006ad2:	785b      	ldrb	r3, [r3, #1]
 8006ad4:	2b30      	cmp	r3, #48	; 0x30
 8006ad6:	d0f9      	beq.n	8006acc <_strtod_l+0x28c>
 8006ad8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8006adc:	2f08      	cmp	r7, #8
 8006ade:	f63f af7d 	bhi.w	80069dc <_strtod_l+0x19c>
 8006ae2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8006ae6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006ae8:	930a      	str	r3, [sp, #40]	; 0x28
 8006aea:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006aec:	1c5f      	adds	r7, r3, #1
 8006aee:	971b      	str	r7, [sp, #108]	; 0x6c
 8006af0:	785b      	ldrb	r3, [r3, #1]
 8006af2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8006af6:	f1b8 0f09 	cmp.w	r8, #9
 8006afa:	d937      	bls.n	8006b6c <_strtod_l+0x32c>
 8006afc:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006afe:	1a7f      	subs	r7, r7, r1
 8006b00:	2f08      	cmp	r7, #8
 8006b02:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8006b06:	dc37      	bgt.n	8006b78 <_strtod_l+0x338>
 8006b08:	45be      	cmp	lr, r7
 8006b0a:	bfa8      	it	ge
 8006b0c:	46be      	movge	lr, r7
 8006b0e:	f1bc 0f00 	cmp.w	ip, #0
 8006b12:	d001      	beq.n	8006b18 <_strtod_l+0x2d8>
 8006b14:	f1ce 0e00 	rsb	lr, lr, #0
 8006b18:	2c00      	cmp	r4, #0
 8006b1a:	d151      	bne.n	8006bc0 <_strtod_l+0x380>
 8006b1c:	2800      	cmp	r0, #0
 8006b1e:	f47f aece 	bne.w	80068be <_strtod_l+0x7e>
 8006b22:	9a06      	ldr	r2, [sp, #24]
 8006b24:	2a00      	cmp	r2, #0
 8006b26:	f47f aeca 	bne.w	80068be <_strtod_l+0x7e>
 8006b2a:	9a04      	ldr	r2, [sp, #16]
 8006b2c:	2a00      	cmp	r2, #0
 8006b2e:	f47f aee4 	bne.w	80068fa <_strtod_l+0xba>
 8006b32:	2b4e      	cmp	r3, #78	; 0x4e
 8006b34:	d027      	beq.n	8006b86 <_strtod_l+0x346>
 8006b36:	dc21      	bgt.n	8006b7c <_strtod_l+0x33c>
 8006b38:	2b49      	cmp	r3, #73	; 0x49
 8006b3a:	f47f aede 	bne.w	80068fa <_strtod_l+0xba>
 8006b3e:	49a0      	ldr	r1, [pc, #640]	; (8006dc0 <_strtod_l+0x580>)
 8006b40:	a81b      	add	r0, sp, #108	; 0x6c
 8006b42:	f001 fdd7 	bl	80086f4 <__match>
 8006b46:	2800      	cmp	r0, #0
 8006b48:	f43f aed7 	beq.w	80068fa <_strtod_l+0xba>
 8006b4c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006b4e:	499d      	ldr	r1, [pc, #628]	; (8006dc4 <_strtod_l+0x584>)
 8006b50:	3b01      	subs	r3, #1
 8006b52:	a81b      	add	r0, sp, #108	; 0x6c
 8006b54:	931b      	str	r3, [sp, #108]	; 0x6c
 8006b56:	f001 fdcd 	bl	80086f4 <__match>
 8006b5a:	b910      	cbnz	r0, 8006b62 <_strtod_l+0x322>
 8006b5c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006b5e:	3301      	adds	r3, #1
 8006b60:	931b      	str	r3, [sp, #108]	; 0x6c
 8006b62:	f8df b274 	ldr.w	fp, [pc, #628]	; 8006dd8 <_strtod_l+0x598>
 8006b66:	f04f 0a00 	mov.w	sl, #0
 8006b6a:	e6a8      	b.n	80068be <_strtod_l+0x7e>
 8006b6c:	210a      	movs	r1, #10
 8006b6e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8006b72:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8006b76:	e7b8      	b.n	8006aea <_strtod_l+0x2aa>
 8006b78:	46be      	mov	lr, r7
 8006b7a:	e7c8      	b.n	8006b0e <_strtod_l+0x2ce>
 8006b7c:	2b69      	cmp	r3, #105	; 0x69
 8006b7e:	d0de      	beq.n	8006b3e <_strtod_l+0x2fe>
 8006b80:	2b6e      	cmp	r3, #110	; 0x6e
 8006b82:	f47f aeba 	bne.w	80068fa <_strtod_l+0xba>
 8006b86:	4990      	ldr	r1, [pc, #576]	; (8006dc8 <_strtod_l+0x588>)
 8006b88:	a81b      	add	r0, sp, #108	; 0x6c
 8006b8a:	f001 fdb3 	bl	80086f4 <__match>
 8006b8e:	2800      	cmp	r0, #0
 8006b90:	f43f aeb3 	beq.w	80068fa <_strtod_l+0xba>
 8006b94:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006b96:	781b      	ldrb	r3, [r3, #0]
 8006b98:	2b28      	cmp	r3, #40	; 0x28
 8006b9a:	d10e      	bne.n	8006bba <_strtod_l+0x37a>
 8006b9c:	aa1e      	add	r2, sp, #120	; 0x78
 8006b9e:	498b      	ldr	r1, [pc, #556]	; (8006dcc <_strtod_l+0x58c>)
 8006ba0:	a81b      	add	r0, sp, #108	; 0x6c
 8006ba2:	f001 fdbb 	bl	800871c <__hexnan>
 8006ba6:	2805      	cmp	r0, #5
 8006ba8:	d107      	bne.n	8006bba <_strtod_l+0x37a>
 8006baa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006bac:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8006bb0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8006bb4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8006bb8:	e681      	b.n	80068be <_strtod_l+0x7e>
 8006bba:	f8df b224 	ldr.w	fp, [pc, #548]	; 8006de0 <_strtod_l+0x5a0>
 8006bbe:	e7d2      	b.n	8006b66 <_strtod_l+0x326>
 8006bc0:	ebae 0302 	sub.w	r3, lr, r2
 8006bc4:	9306      	str	r3, [sp, #24]
 8006bc6:	9b05      	ldr	r3, [sp, #20]
 8006bc8:	9807      	ldr	r0, [sp, #28]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	bf08      	it	eq
 8006bce:	4623      	moveq	r3, r4
 8006bd0:	2c10      	cmp	r4, #16
 8006bd2:	9305      	str	r3, [sp, #20]
 8006bd4:	46a0      	mov	r8, r4
 8006bd6:	bfa8      	it	ge
 8006bd8:	f04f 0810 	movge.w	r8, #16
 8006bdc:	f7f9 fc92 	bl	8000504 <__aeabi_ui2d>
 8006be0:	2c09      	cmp	r4, #9
 8006be2:	4682      	mov	sl, r0
 8006be4:	468b      	mov	fp, r1
 8006be6:	dc13      	bgt.n	8006c10 <_strtod_l+0x3d0>
 8006be8:	9b06      	ldr	r3, [sp, #24]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	f43f ae67 	beq.w	80068be <_strtod_l+0x7e>
 8006bf0:	9b06      	ldr	r3, [sp, #24]
 8006bf2:	dd7a      	ble.n	8006cea <_strtod_l+0x4aa>
 8006bf4:	2b16      	cmp	r3, #22
 8006bf6:	dc61      	bgt.n	8006cbc <_strtod_l+0x47c>
 8006bf8:	4a75      	ldr	r2, [pc, #468]	; (8006dd0 <_strtod_l+0x590>)
 8006bfa:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8006bfe:	e9de 0100 	ldrd	r0, r1, [lr]
 8006c02:	4652      	mov	r2, sl
 8006c04:	465b      	mov	r3, fp
 8006c06:	f7f9 fcf7 	bl	80005f8 <__aeabi_dmul>
 8006c0a:	4682      	mov	sl, r0
 8006c0c:	468b      	mov	fp, r1
 8006c0e:	e656      	b.n	80068be <_strtod_l+0x7e>
 8006c10:	4b6f      	ldr	r3, [pc, #444]	; (8006dd0 <_strtod_l+0x590>)
 8006c12:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006c16:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006c1a:	f7f9 fced 	bl	80005f8 <__aeabi_dmul>
 8006c1e:	4606      	mov	r6, r0
 8006c20:	4628      	mov	r0, r5
 8006c22:	460f      	mov	r7, r1
 8006c24:	f7f9 fc6e 	bl	8000504 <__aeabi_ui2d>
 8006c28:	4602      	mov	r2, r0
 8006c2a:	460b      	mov	r3, r1
 8006c2c:	4630      	mov	r0, r6
 8006c2e:	4639      	mov	r1, r7
 8006c30:	f7f9 fb2c 	bl	800028c <__adddf3>
 8006c34:	2c0f      	cmp	r4, #15
 8006c36:	4682      	mov	sl, r0
 8006c38:	468b      	mov	fp, r1
 8006c3a:	ddd5      	ble.n	8006be8 <_strtod_l+0x3a8>
 8006c3c:	9b06      	ldr	r3, [sp, #24]
 8006c3e:	eba4 0808 	sub.w	r8, r4, r8
 8006c42:	4498      	add	r8, r3
 8006c44:	f1b8 0f00 	cmp.w	r8, #0
 8006c48:	f340 8096 	ble.w	8006d78 <_strtod_l+0x538>
 8006c4c:	f018 030f 	ands.w	r3, r8, #15
 8006c50:	d00a      	beq.n	8006c68 <_strtod_l+0x428>
 8006c52:	495f      	ldr	r1, [pc, #380]	; (8006dd0 <_strtod_l+0x590>)
 8006c54:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006c58:	4652      	mov	r2, sl
 8006c5a:	465b      	mov	r3, fp
 8006c5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c60:	f7f9 fcca 	bl	80005f8 <__aeabi_dmul>
 8006c64:	4682      	mov	sl, r0
 8006c66:	468b      	mov	fp, r1
 8006c68:	f038 080f 	bics.w	r8, r8, #15
 8006c6c:	d073      	beq.n	8006d56 <_strtod_l+0x516>
 8006c6e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8006c72:	dd47      	ble.n	8006d04 <_strtod_l+0x4c4>
 8006c74:	2400      	movs	r4, #0
 8006c76:	46a0      	mov	r8, r4
 8006c78:	9407      	str	r4, [sp, #28]
 8006c7a:	9405      	str	r4, [sp, #20]
 8006c7c:	2322      	movs	r3, #34	; 0x22
 8006c7e:	f8df b158 	ldr.w	fp, [pc, #344]	; 8006dd8 <_strtod_l+0x598>
 8006c82:	f8c9 3000 	str.w	r3, [r9]
 8006c86:	f04f 0a00 	mov.w	sl, #0
 8006c8a:	9b07      	ldr	r3, [sp, #28]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	f43f ae16 	beq.w	80068be <_strtod_l+0x7e>
 8006c92:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006c94:	4648      	mov	r0, r9
 8006c96:	f001 fe3e 	bl	8008916 <_Bfree>
 8006c9a:	9905      	ldr	r1, [sp, #20]
 8006c9c:	4648      	mov	r0, r9
 8006c9e:	f001 fe3a 	bl	8008916 <_Bfree>
 8006ca2:	4641      	mov	r1, r8
 8006ca4:	4648      	mov	r0, r9
 8006ca6:	f001 fe36 	bl	8008916 <_Bfree>
 8006caa:	9907      	ldr	r1, [sp, #28]
 8006cac:	4648      	mov	r0, r9
 8006cae:	f001 fe32 	bl	8008916 <_Bfree>
 8006cb2:	4621      	mov	r1, r4
 8006cb4:	4648      	mov	r0, r9
 8006cb6:	f001 fe2e 	bl	8008916 <_Bfree>
 8006cba:	e600      	b.n	80068be <_strtod_l+0x7e>
 8006cbc:	9a06      	ldr	r2, [sp, #24]
 8006cbe:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	dbba      	blt.n	8006c3c <_strtod_l+0x3fc>
 8006cc6:	4d42      	ldr	r5, [pc, #264]	; (8006dd0 <_strtod_l+0x590>)
 8006cc8:	f1c4 040f 	rsb	r4, r4, #15
 8006ccc:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8006cd0:	4652      	mov	r2, sl
 8006cd2:	465b      	mov	r3, fp
 8006cd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006cd8:	f7f9 fc8e 	bl	80005f8 <__aeabi_dmul>
 8006cdc:	9b06      	ldr	r3, [sp, #24]
 8006cde:	1b1c      	subs	r4, r3, r4
 8006ce0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8006ce4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006ce8:	e78d      	b.n	8006c06 <_strtod_l+0x3c6>
 8006cea:	f113 0f16 	cmn.w	r3, #22
 8006cee:	dba5      	blt.n	8006c3c <_strtod_l+0x3fc>
 8006cf0:	4a37      	ldr	r2, [pc, #220]	; (8006dd0 <_strtod_l+0x590>)
 8006cf2:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8006cf6:	e9d2 2300 	ldrd	r2, r3, [r2]
 8006cfa:	4650      	mov	r0, sl
 8006cfc:	4659      	mov	r1, fp
 8006cfe:	f7f9 fda5 	bl	800084c <__aeabi_ddiv>
 8006d02:	e782      	b.n	8006c0a <_strtod_l+0x3ca>
 8006d04:	2300      	movs	r3, #0
 8006d06:	4e33      	ldr	r6, [pc, #204]	; (8006dd4 <_strtod_l+0x594>)
 8006d08:	ea4f 1828 	mov.w	r8, r8, asr #4
 8006d0c:	4650      	mov	r0, sl
 8006d0e:	4659      	mov	r1, fp
 8006d10:	461d      	mov	r5, r3
 8006d12:	f1b8 0f01 	cmp.w	r8, #1
 8006d16:	dc21      	bgt.n	8006d5c <_strtod_l+0x51c>
 8006d18:	b10b      	cbz	r3, 8006d1e <_strtod_l+0x4de>
 8006d1a:	4682      	mov	sl, r0
 8006d1c:	468b      	mov	fp, r1
 8006d1e:	4b2d      	ldr	r3, [pc, #180]	; (8006dd4 <_strtod_l+0x594>)
 8006d20:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8006d24:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8006d28:	4652      	mov	r2, sl
 8006d2a:	465b      	mov	r3, fp
 8006d2c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8006d30:	f7f9 fc62 	bl	80005f8 <__aeabi_dmul>
 8006d34:	4b28      	ldr	r3, [pc, #160]	; (8006dd8 <_strtod_l+0x598>)
 8006d36:	460a      	mov	r2, r1
 8006d38:	400b      	ands	r3, r1
 8006d3a:	4928      	ldr	r1, [pc, #160]	; (8006ddc <_strtod_l+0x59c>)
 8006d3c:	428b      	cmp	r3, r1
 8006d3e:	4682      	mov	sl, r0
 8006d40:	d898      	bhi.n	8006c74 <_strtod_l+0x434>
 8006d42:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006d46:	428b      	cmp	r3, r1
 8006d48:	bf86      	itte	hi
 8006d4a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8006de4 <_strtod_l+0x5a4>
 8006d4e:	f04f 3aff 	movhi.w	sl, #4294967295
 8006d52:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8006d56:	2300      	movs	r3, #0
 8006d58:	9304      	str	r3, [sp, #16]
 8006d5a:	e077      	b.n	8006e4c <_strtod_l+0x60c>
 8006d5c:	f018 0f01 	tst.w	r8, #1
 8006d60:	d006      	beq.n	8006d70 <_strtod_l+0x530>
 8006d62:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8006d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d6a:	f7f9 fc45 	bl	80005f8 <__aeabi_dmul>
 8006d6e:	2301      	movs	r3, #1
 8006d70:	3501      	adds	r5, #1
 8006d72:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006d76:	e7cc      	b.n	8006d12 <_strtod_l+0x4d2>
 8006d78:	d0ed      	beq.n	8006d56 <_strtod_l+0x516>
 8006d7a:	f1c8 0800 	rsb	r8, r8, #0
 8006d7e:	f018 020f 	ands.w	r2, r8, #15
 8006d82:	d00a      	beq.n	8006d9a <_strtod_l+0x55a>
 8006d84:	4b12      	ldr	r3, [pc, #72]	; (8006dd0 <_strtod_l+0x590>)
 8006d86:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d8a:	4650      	mov	r0, sl
 8006d8c:	4659      	mov	r1, fp
 8006d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d92:	f7f9 fd5b 	bl	800084c <__aeabi_ddiv>
 8006d96:	4682      	mov	sl, r0
 8006d98:	468b      	mov	fp, r1
 8006d9a:	ea5f 1828 	movs.w	r8, r8, asr #4
 8006d9e:	d0da      	beq.n	8006d56 <_strtod_l+0x516>
 8006da0:	f1b8 0f1f 	cmp.w	r8, #31
 8006da4:	dd20      	ble.n	8006de8 <_strtod_l+0x5a8>
 8006da6:	2400      	movs	r4, #0
 8006da8:	46a0      	mov	r8, r4
 8006daa:	9407      	str	r4, [sp, #28]
 8006dac:	9405      	str	r4, [sp, #20]
 8006dae:	2322      	movs	r3, #34	; 0x22
 8006db0:	f04f 0a00 	mov.w	sl, #0
 8006db4:	f04f 0b00 	mov.w	fp, #0
 8006db8:	f8c9 3000 	str.w	r3, [r9]
 8006dbc:	e765      	b.n	8006c8a <_strtod_l+0x44a>
 8006dbe:	bf00      	nop
 8006dc0:	08009725 	.word	0x08009725
 8006dc4:	080097b3 	.word	0x080097b3
 8006dc8:	0800972d 	.word	0x0800972d
 8006dcc:	08009770 	.word	0x08009770
 8006dd0:	080097f0 	.word	0x080097f0
 8006dd4:	080097c8 	.word	0x080097c8
 8006dd8:	7ff00000 	.word	0x7ff00000
 8006ddc:	7ca00000 	.word	0x7ca00000
 8006de0:	fff80000 	.word	0xfff80000
 8006de4:	7fefffff 	.word	0x7fefffff
 8006de8:	f018 0310 	ands.w	r3, r8, #16
 8006dec:	bf18      	it	ne
 8006dee:	236a      	movne	r3, #106	; 0x6a
 8006df0:	4da0      	ldr	r5, [pc, #640]	; (8007074 <_strtod_l+0x834>)
 8006df2:	9304      	str	r3, [sp, #16]
 8006df4:	4650      	mov	r0, sl
 8006df6:	4659      	mov	r1, fp
 8006df8:	2300      	movs	r3, #0
 8006dfa:	f1b8 0f00 	cmp.w	r8, #0
 8006dfe:	f300 810a 	bgt.w	8007016 <_strtod_l+0x7d6>
 8006e02:	b10b      	cbz	r3, 8006e08 <_strtod_l+0x5c8>
 8006e04:	4682      	mov	sl, r0
 8006e06:	468b      	mov	fp, r1
 8006e08:	9b04      	ldr	r3, [sp, #16]
 8006e0a:	b1bb      	cbz	r3, 8006e3c <_strtod_l+0x5fc>
 8006e0c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8006e10:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	4659      	mov	r1, fp
 8006e18:	dd10      	ble.n	8006e3c <_strtod_l+0x5fc>
 8006e1a:	2b1f      	cmp	r3, #31
 8006e1c:	f340 8107 	ble.w	800702e <_strtod_l+0x7ee>
 8006e20:	2b34      	cmp	r3, #52	; 0x34
 8006e22:	bfde      	ittt	le
 8006e24:	3b20      	suble	r3, #32
 8006e26:	f04f 32ff 	movle.w	r2, #4294967295
 8006e2a:	fa02 f303 	lslle.w	r3, r2, r3
 8006e2e:	f04f 0a00 	mov.w	sl, #0
 8006e32:	bfcc      	ite	gt
 8006e34:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8006e38:	ea03 0b01 	andle.w	fp, r3, r1
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	2300      	movs	r3, #0
 8006e40:	4650      	mov	r0, sl
 8006e42:	4659      	mov	r1, fp
 8006e44:	f7f9 fe40 	bl	8000ac8 <__aeabi_dcmpeq>
 8006e48:	2800      	cmp	r0, #0
 8006e4a:	d1ac      	bne.n	8006da6 <_strtod_l+0x566>
 8006e4c:	9b07      	ldr	r3, [sp, #28]
 8006e4e:	9300      	str	r3, [sp, #0]
 8006e50:	9a05      	ldr	r2, [sp, #20]
 8006e52:	9908      	ldr	r1, [sp, #32]
 8006e54:	4623      	mov	r3, r4
 8006e56:	4648      	mov	r0, r9
 8006e58:	f001 fdaf 	bl	80089ba <__s2b>
 8006e5c:	9007      	str	r0, [sp, #28]
 8006e5e:	2800      	cmp	r0, #0
 8006e60:	f43f af08 	beq.w	8006c74 <_strtod_l+0x434>
 8006e64:	9a06      	ldr	r2, [sp, #24]
 8006e66:	9b06      	ldr	r3, [sp, #24]
 8006e68:	2a00      	cmp	r2, #0
 8006e6a:	f1c3 0300 	rsb	r3, r3, #0
 8006e6e:	bfa8      	it	ge
 8006e70:	2300      	movge	r3, #0
 8006e72:	930e      	str	r3, [sp, #56]	; 0x38
 8006e74:	2400      	movs	r4, #0
 8006e76:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006e7a:	9316      	str	r3, [sp, #88]	; 0x58
 8006e7c:	46a0      	mov	r8, r4
 8006e7e:	9b07      	ldr	r3, [sp, #28]
 8006e80:	4648      	mov	r0, r9
 8006e82:	6859      	ldr	r1, [r3, #4]
 8006e84:	f001 fd13 	bl	80088ae <_Balloc>
 8006e88:	9005      	str	r0, [sp, #20]
 8006e8a:	2800      	cmp	r0, #0
 8006e8c:	f43f aef6 	beq.w	8006c7c <_strtod_l+0x43c>
 8006e90:	9b07      	ldr	r3, [sp, #28]
 8006e92:	691a      	ldr	r2, [r3, #16]
 8006e94:	3202      	adds	r2, #2
 8006e96:	f103 010c 	add.w	r1, r3, #12
 8006e9a:	0092      	lsls	r2, r2, #2
 8006e9c:	300c      	adds	r0, #12
 8006e9e:	f001 fcfb 	bl	8008898 <memcpy>
 8006ea2:	aa1e      	add	r2, sp, #120	; 0x78
 8006ea4:	a91d      	add	r1, sp, #116	; 0x74
 8006ea6:	ec4b ab10 	vmov	d0, sl, fp
 8006eaa:	4648      	mov	r0, r9
 8006eac:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8006eb0:	f002 f83e 	bl	8008f30 <__d2b>
 8006eb4:	901c      	str	r0, [sp, #112]	; 0x70
 8006eb6:	2800      	cmp	r0, #0
 8006eb8:	f43f aee0 	beq.w	8006c7c <_strtod_l+0x43c>
 8006ebc:	2101      	movs	r1, #1
 8006ebe:	4648      	mov	r0, r9
 8006ec0:	f001 fe07 	bl	8008ad2 <__i2b>
 8006ec4:	4680      	mov	r8, r0
 8006ec6:	2800      	cmp	r0, #0
 8006ec8:	f43f aed8 	beq.w	8006c7c <_strtod_l+0x43c>
 8006ecc:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8006ece:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006ed0:	2e00      	cmp	r6, #0
 8006ed2:	bfab      	itete	ge
 8006ed4:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8006ed6:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8006ed8:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8006eda:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8006edc:	bfac      	ite	ge
 8006ede:	18f7      	addge	r7, r6, r3
 8006ee0:	1b9d      	sublt	r5, r3, r6
 8006ee2:	9b04      	ldr	r3, [sp, #16]
 8006ee4:	1af6      	subs	r6, r6, r3
 8006ee6:	4416      	add	r6, r2
 8006ee8:	4b63      	ldr	r3, [pc, #396]	; (8007078 <_strtod_l+0x838>)
 8006eea:	3e01      	subs	r6, #1
 8006eec:	429e      	cmp	r6, r3
 8006eee:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006ef2:	f280 80af 	bge.w	8007054 <_strtod_l+0x814>
 8006ef6:	1b9b      	subs	r3, r3, r6
 8006ef8:	2b1f      	cmp	r3, #31
 8006efa:	eba2 0203 	sub.w	r2, r2, r3
 8006efe:	f04f 0101 	mov.w	r1, #1
 8006f02:	f300 809b 	bgt.w	800703c <_strtod_l+0x7fc>
 8006f06:	fa01 f303 	lsl.w	r3, r1, r3
 8006f0a:	930f      	str	r3, [sp, #60]	; 0x3c
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	930a      	str	r3, [sp, #40]	; 0x28
 8006f10:	18be      	adds	r6, r7, r2
 8006f12:	9b04      	ldr	r3, [sp, #16]
 8006f14:	42b7      	cmp	r7, r6
 8006f16:	4415      	add	r5, r2
 8006f18:	441d      	add	r5, r3
 8006f1a:	463b      	mov	r3, r7
 8006f1c:	bfa8      	it	ge
 8006f1e:	4633      	movge	r3, r6
 8006f20:	42ab      	cmp	r3, r5
 8006f22:	bfa8      	it	ge
 8006f24:	462b      	movge	r3, r5
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	bfc2      	ittt	gt
 8006f2a:	1af6      	subgt	r6, r6, r3
 8006f2c:	1aed      	subgt	r5, r5, r3
 8006f2e:	1aff      	subgt	r7, r7, r3
 8006f30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006f32:	b1bb      	cbz	r3, 8006f64 <_strtod_l+0x724>
 8006f34:	4641      	mov	r1, r8
 8006f36:	461a      	mov	r2, r3
 8006f38:	4648      	mov	r0, r9
 8006f3a:	f001 fe69 	bl	8008c10 <__pow5mult>
 8006f3e:	4680      	mov	r8, r0
 8006f40:	2800      	cmp	r0, #0
 8006f42:	f43f ae9b 	beq.w	8006c7c <_strtod_l+0x43c>
 8006f46:	4601      	mov	r1, r0
 8006f48:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006f4a:	4648      	mov	r0, r9
 8006f4c:	f001 fdca 	bl	8008ae4 <__multiply>
 8006f50:	900c      	str	r0, [sp, #48]	; 0x30
 8006f52:	2800      	cmp	r0, #0
 8006f54:	f43f ae92 	beq.w	8006c7c <_strtod_l+0x43c>
 8006f58:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006f5a:	4648      	mov	r0, r9
 8006f5c:	f001 fcdb 	bl	8008916 <_Bfree>
 8006f60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006f62:	931c      	str	r3, [sp, #112]	; 0x70
 8006f64:	2e00      	cmp	r6, #0
 8006f66:	dc7a      	bgt.n	800705e <_strtod_l+0x81e>
 8006f68:	9b06      	ldr	r3, [sp, #24]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	dd08      	ble.n	8006f80 <_strtod_l+0x740>
 8006f6e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006f70:	9905      	ldr	r1, [sp, #20]
 8006f72:	4648      	mov	r0, r9
 8006f74:	f001 fe4c 	bl	8008c10 <__pow5mult>
 8006f78:	9005      	str	r0, [sp, #20]
 8006f7a:	2800      	cmp	r0, #0
 8006f7c:	f43f ae7e 	beq.w	8006c7c <_strtod_l+0x43c>
 8006f80:	2d00      	cmp	r5, #0
 8006f82:	dd08      	ble.n	8006f96 <_strtod_l+0x756>
 8006f84:	462a      	mov	r2, r5
 8006f86:	9905      	ldr	r1, [sp, #20]
 8006f88:	4648      	mov	r0, r9
 8006f8a:	f001 fe8f 	bl	8008cac <__lshift>
 8006f8e:	9005      	str	r0, [sp, #20]
 8006f90:	2800      	cmp	r0, #0
 8006f92:	f43f ae73 	beq.w	8006c7c <_strtod_l+0x43c>
 8006f96:	2f00      	cmp	r7, #0
 8006f98:	dd08      	ble.n	8006fac <_strtod_l+0x76c>
 8006f9a:	4641      	mov	r1, r8
 8006f9c:	463a      	mov	r2, r7
 8006f9e:	4648      	mov	r0, r9
 8006fa0:	f001 fe84 	bl	8008cac <__lshift>
 8006fa4:	4680      	mov	r8, r0
 8006fa6:	2800      	cmp	r0, #0
 8006fa8:	f43f ae68 	beq.w	8006c7c <_strtod_l+0x43c>
 8006fac:	9a05      	ldr	r2, [sp, #20]
 8006fae:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006fb0:	4648      	mov	r0, r9
 8006fb2:	f001 fee9 	bl	8008d88 <__mdiff>
 8006fb6:	4604      	mov	r4, r0
 8006fb8:	2800      	cmp	r0, #0
 8006fba:	f43f ae5f 	beq.w	8006c7c <_strtod_l+0x43c>
 8006fbe:	68c3      	ldr	r3, [r0, #12]
 8006fc0:	930c      	str	r3, [sp, #48]	; 0x30
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	60c3      	str	r3, [r0, #12]
 8006fc6:	4641      	mov	r1, r8
 8006fc8:	f001 fec4 	bl	8008d54 <__mcmp>
 8006fcc:	2800      	cmp	r0, #0
 8006fce:	da55      	bge.n	800707c <_strtod_l+0x83c>
 8006fd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006fd2:	b9e3      	cbnz	r3, 800700e <_strtod_l+0x7ce>
 8006fd4:	f1ba 0f00 	cmp.w	sl, #0
 8006fd8:	d119      	bne.n	800700e <_strtod_l+0x7ce>
 8006fda:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006fde:	b9b3      	cbnz	r3, 800700e <_strtod_l+0x7ce>
 8006fe0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006fe4:	0d1b      	lsrs	r3, r3, #20
 8006fe6:	051b      	lsls	r3, r3, #20
 8006fe8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006fec:	d90f      	bls.n	800700e <_strtod_l+0x7ce>
 8006fee:	6963      	ldr	r3, [r4, #20]
 8006ff0:	b913      	cbnz	r3, 8006ff8 <_strtod_l+0x7b8>
 8006ff2:	6923      	ldr	r3, [r4, #16]
 8006ff4:	2b01      	cmp	r3, #1
 8006ff6:	dd0a      	ble.n	800700e <_strtod_l+0x7ce>
 8006ff8:	4621      	mov	r1, r4
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	4648      	mov	r0, r9
 8006ffe:	f001 fe55 	bl	8008cac <__lshift>
 8007002:	4641      	mov	r1, r8
 8007004:	4604      	mov	r4, r0
 8007006:	f001 fea5 	bl	8008d54 <__mcmp>
 800700a:	2800      	cmp	r0, #0
 800700c:	dc67      	bgt.n	80070de <_strtod_l+0x89e>
 800700e:	9b04      	ldr	r3, [sp, #16]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d171      	bne.n	80070f8 <_strtod_l+0x8b8>
 8007014:	e63d      	b.n	8006c92 <_strtod_l+0x452>
 8007016:	f018 0f01 	tst.w	r8, #1
 800701a:	d004      	beq.n	8007026 <_strtod_l+0x7e6>
 800701c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007020:	f7f9 faea 	bl	80005f8 <__aeabi_dmul>
 8007024:	2301      	movs	r3, #1
 8007026:	ea4f 0868 	mov.w	r8, r8, asr #1
 800702a:	3508      	adds	r5, #8
 800702c:	e6e5      	b.n	8006dfa <_strtod_l+0x5ba>
 800702e:	f04f 32ff 	mov.w	r2, #4294967295
 8007032:	fa02 f303 	lsl.w	r3, r2, r3
 8007036:	ea03 0a0a 	and.w	sl, r3, sl
 800703a:	e6ff      	b.n	8006e3c <_strtod_l+0x5fc>
 800703c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8007040:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8007044:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8007048:	36e2      	adds	r6, #226	; 0xe2
 800704a:	fa01 f306 	lsl.w	r3, r1, r6
 800704e:	930a      	str	r3, [sp, #40]	; 0x28
 8007050:	910f      	str	r1, [sp, #60]	; 0x3c
 8007052:	e75d      	b.n	8006f10 <_strtod_l+0x6d0>
 8007054:	2300      	movs	r3, #0
 8007056:	930a      	str	r3, [sp, #40]	; 0x28
 8007058:	2301      	movs	r3, #1
 800705a:	930f      	str	r3, [sp, #60]	; 0x3c
 800705c:	e758      	b.n	8006f10 <_strtod_l+0x6d0>
 800705e:	4632      	mov	r2, r6
 8007060:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007062:	4648      	mov	r0, r9
 8007064:	f001 fe22 	bl	8008cac <__lshift>
 8007068:	901c      	str	r0, [sp, #112]	; 0x70
 800706a:	2800      	cmp	r0, #0
 800706c:	f47f af7c 	bne.w	8006f68 <_strtod_l+0x728>
 8007070:	e604      	b.n	8006c7c <_strtod_l+0x43c>
 8007072:	bf00      	nop
 8007074:	08009788 	.word	0x08009788
 8007078:	fffffc02 	.word	0xfffffc02
 800707c:	465d      	mov	r5, fp
 800707e:	f040 8086 	bne.w	800718e <_strtod_l+0x94e>
 8007082:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007084:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007088:	b32a      	cbz	r2, 80070d6 <_strtod_l+0x896>
 800708a:	4aaf      	ldr	r2, [pc, #700]	; (8007348 <_strtod_l+0xb08>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d153      	bne.n	8007138 <_strtod_l+0x8f8>
 8007090:	9b04      	ldr	r3, [sp, #16]
 8007092:	4650      	mov	r0, sl
 8007094:	b1d3      	cbz	r3, 80070cc <_strtod_l+0x88c>
 8007096:	4aad      	ldr	r2, [pc, #692]	; (800734c <_strtod_l+0xb0c>)
 8007098:	402a      	ands	r2, r5
 800709a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800709e:	f04f 31ff 	mov.w	r1, #4294967295
 80070a2:	d816      	bhi.n	80070d2 <_strtod_l+0x892>
 80070a4:	0d12      	lsrs	r2, r2, #20
 80070a6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80070aa:	fa01 f303 	lsl.w	r3, r1, r3
 80070ae:	4298      	cmp	r0, r3
 80070b0:	d142      	bne.n	8007138 <_strtod_l+0x8f8>
 80070b2:	4ba7      	ldr	r3, [pc, #668]	; (8007350 <_strtod_l+0xb10>)
 80070b4:	429d      	cmp	r5, r3
 80070b6:	d102      	bne.n	80070be <_strtod_l+0x87e>
 80070b8:	3001      	adds	r0, #1
 80070ba:	f43f addf 	beq.w	8006c7c <_strtod_l+0x43c>
 80070be:	4ba3      	ldr	r3, [pc, #652]	; (800734c <_strtod_l+0xb0c>)
 80070c0:	402b      	ands	r3, r5
 80070c2:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80070c6:	f04f 0a00 	mov.w	sl, #0
 80070ca:	e7a0      	b.n	800700e <_strtod_l+0x7ce>
 80070cc:	f04f 33ff 	mov.w	r3, #4294967295
 80070d0:	e7ed      	b.n	80070ae <_strtod_l+0x86e>
 80070d2:	460b      	mov	r3, r1
 80070d4:	e7eb      	b.n	80070ae <_strtod_l+0x86e>
 80070d6:	bb7b      	cbnz	r3, 8007138 <_strtod_l+0x8f8>
 80070d8:	f1ba 0f00 	cmp.w	sl, #0
 80070dc:	d12c      	bne.n	8007138 <_strtod_l+0x8f8>
 80070de:	9904      	ldr	r1, [sp, #16]
 80070e0:	4a9a      	ldr	r2, [pc, #616]	; (800734c <_strtod_l+0xb0c>)
 80070e2:	465b      	mov	r3, fp
 80070e4:	b1f1      	cbz	r1, 8007124 <_strtod_l+0x8e4>
 80070e6:	ea02 010b 	and.w	r1, r2, fp
 80070ea:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80070ee:	dc19      	bgt.n	8007124 <_strtod_l+0x8e4>
 80070f0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80070f4:	f77f ae5b 	ble.w	8006dae <_strtod_l+0x56e>
 80070f8:	4a96      	ldr	r2, [pc, #600]	; (8007354 <_strtod_l+0xb14>)
 80070fa:	2300      	movs	r3, #0
 80070fc:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8007100:	4650      	mov	r0, sl
 8007102:	4659      	mov	r1, fp
 8007104:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007108:	f7f9 fa76 	bl	80005f8 <__aeabi_dmul>
 800710c:	4682      	mov	sl, r0
 800710e:	468b      	mov	fp, r1
 8007110:	2900      	cmp	r1, #0
 8007112:	f47f adbe 	bne.w	8006c92 <_strtod_l+0x452>
 8007116:	2800      	cmp	r0, #0
 8007118:	f47f adbb 	bne.w	8006c92 <_strtod_l+0x452>
 800711c:	2322      	movs	r3, #34	; 0x22
 800711e:	f8c9 3000 	str.w	r3, [r9]
 8007122:	e5b6      	b.n	8006c92 <_strtod_l+0x452>
 8007124:	4013      	ands	r3, r2
 8007126:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800712a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800712e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007132:	f04f 3aff 	mov.w	sl, #4294967295
 8007136:	e76a      	b.n	800700e <_strtod_l+0x7ce>
 8007138:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800713a:	b193      	cbz	r3, 8007162 <_strtod_l+0x922>
 800713c:	422b      	tst	r3, r5
 800713e:	f43f af66 	beq.w	800700e <_strtod_l+0x7ce>
 8007142:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007144:	9a04      	ldr	r2, [sp, #16]
 8007146:	4650      	mov	r0, sl
 8007148:	4659      	mov	r1, fp
 800714a:	b173      	cbz	r3, 800716a <_strtod_l+0x92a>
 800714c:	f7ff fb5c 	bl	8006808 <sulp>
 8007150:	4602      	mov	r2, r0
 8007152:	460b      	mov	r3, r1
 8007154:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007158:	f7f9 f898 	bl	800028c <__adddf3>
 800715c:	4682      	mov	sl, r0
 800715e:	468b      	mov	fp, r1
 8007160:	e755      	b.n	800700e <_strtod_l+0x7ce>
 8007162:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007164:	ea13 0f0a 	tst.w	r3, sl
 8007168:	e7e9      	b.n	800713e <_strtod_l+0x8fe>
 800716a:	f7ff fb4d 	bl	8006808 <sulp>
 800716e:	4602      	mov	r2, r0
 8007170:	460b      	mov	r3, r1
 8007172:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007176:	f7f9 f887 	bl	8000288 <__aeabi_dsub>
 800717a:	2200      	movs	r2, #0
 800717c:	2300      	movs	r3, #0
 800717e:	4682      	mov	sl, r0
 8007180:	468b      	mov	fp, r1
 8007182:	f7f9 fca1 	bl	8000ac8 <__aeabi_dcmpeq>
 8007186:	2800      	cmp	r0, #0
 8007188:	f47f ae11 	bne.w	8006dae <_strtod_l+0x56e>
 800718c:	e73f      	b.n	800700e <_strtod_l+0x7ce>
 800718e:	4641      	mov	r1, r8
 8007190:	4620      	mov	r0, r4
 8007192:	f001 ff1c 	bl	8008fce <__ratio>
 8007196:	ec57 6b10 	vmov	r6, r7, d0
 800719a:	2200      	movs	r2, #0
 800719c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80071a0:	ee10 0a10 	vmov	r0, s0
 80071a4:	4639      	mov	r1, r7
 80071a6:	f7f9 fca3 	bl	8000af0 <__aeabi_dcmple>
 80071aa:	2800      	cmp	r0, #0
 80071ac:	d077      	beq.n	800729e <_strtod_l+0xa5e>
 80071ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d04a      	beq.n	800724a <_strtod_l+0xa0a>
 80071b4:	4b68      	ldr	r3, [pc, #416]	; (8007358 <_strtod_l+0xb18>)
 80071b6:	2200      	movs	r2, #0
 80071b8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80071bc:	4f66      	ldr	r7, [pc, #408]	; (8007358 <_strtod_l+0xb18>)
 80071be:	2600      	movs	r6, #0
 80071c0:	4b62      	ldr	r3, [pc, #392]	; (800734c <_strtod_l+0xb0c>)
 80071c2:	402b      	ands	r3, r5
 80071c4:	930f      	str	r3, [sp, #60]	; 0x3c
 80071c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80071c8:	4b64      	ldr	r3, [pc, #400]	; (800735c <_strtod_l+0xb1c>)
 80071ca:	429a      	cmp	r2, r3
 80071cc:	f040 80ce 	bne.w	800736c <_strtod_l+0xb2c>
 80071d0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80071d4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80071d8:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 80071dc:	ec4b ab10 	vmov	d0, sl, fp
 80071e0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80071e4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80071e8:	f001 fe2c 	bl	8008e44 <__ulp>
 80071ec:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80071f0:	ec53 2b10 	vmov	r2, r3, d0
 80071f4:	f7f9 fa00 	bl	80005f8 <__aeabi_dmul>
 80071f8:	4652      	mov	r2, sl
 80071fa:	465b      	mov	r3, fp
 80071fc:	f7f9 f846 	bl	800028c <__adddf3>
 8007200:	460b      	mov	r3, r1
 8007202:	4952      	ldr	r1, [pc, #328]	; (800734c <_strtod_l+0xb0c>)
 8007204:	4a56      	ldr	r2, [pc, #344]	; (8007360 <_strtod_l+0xb20>)
 8007206:	4019      	ands	r1, r3
 8007208:	4291      	cmp	r1, r2
 800720a:	4682      	mov	sl, r0
 800720c:	d95b      	bls.n	80072c6 <_strtod_l+0xa86>
 800720e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007210:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007214:	4293      	cmp	r3, r2
 8007216:	d103      	bne.n	8007220 <_strtod_l+0x9e0>
 8007218:	9b08      	ldr	r3, [sp, #32]
 800721a:	3301      	adds	r3, #1
 800721c:	f43f ad2e 	beq.w	8006c7c <_strtod_l+0x43c>
 8007220:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8007350 <_strtod_l+0xb10>
 8007224:	f04f 3aff 	mov.w	sl, #4294967295
 8007228:	991c      	ldr	r1, [sp, #112]	; 0x70
 800722a:	4648      	mov	r0, r9
 800722c:	f001 fb73 	bl	8008916 <_Bfree>
 8007230:	9905      	ldr	r1, [sp, #20]
 8007232:	4648      	mov	r0, r9
 8007234:	f001 fb6f 	bl	8008916 <_Bfree>
 8007238:	4641      	mov	r1, r8
 800723a:	4648      	mov	r0, r9
 800723c:	f001 fb6b 	bl	8008916 <_Bfree>
 8007240:	4621      	mov	r1, r4
 8007242:	4648      	mov	r0, r9
 8007244:	f001 fb67 	bl	8008916 <_Bfree>
 8007248:	e619      	b.n	8006e7e <_strtod_l+0x63e>
 800724a:	f1ba 0f00 	cmp.w	sl, #0
 800724e:	d11a      	bne.n	8007286 <_strtod_l+0xa46>
 8007250:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007254:	b9eb      	cbnz	r3, 8007292 <_strtod_l+0xa52>
 8007256:	2200      	movs	r2, #0
 8007258:	4b3f      	ldr	r3, [pc, #252]	; (8007358 <_strtod_l+0xb18>)
 800725a:	4630      	mov	r0, r6
 800725c:	4639      	mov	r1, r7
 800725e:	f7f9 fc3d 	bl	8000adc <__aeabi_dcmplt>
 8007262:	b9c8      	cbnz	r0, 8007298 <_strtod_l+0xa58>
 8007264:	4630      	mov	r0, r6
 8007266:	4639      	mov	r1, r7
 8007268:	2200      	movs	r2, #0
 800726a:	4b3e      	ldr	r3, [pc, #248]	; (8007364 <_strtod_l+0xb24>)
 800726c:	f7f9 f9c4 	bl	80005f8 <__aeabi_dmul>
 8007270:	4606      	mov	r6, r0
 8007272:	460f      	mov	r7, r1
 8007274:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8007278:	9618      	str	r6, [sp, #96]	; 0x60
 800727a:	9319      	str	r3, [sp, #100]	; 0x64
 800727c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8007280:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007284:	e79c      	b.n	80071c0 <_strtod_l+0x980>
 8007286:	f1ba 0f01 	cmp.w	sl, #1
 800728a:	d102      	bne.n	8007292 <_strtod_l+0xa52>
 800728c:	2d00      	cmp	r5, #0
 800728e:	f43f ad8e 	beq.w	8006dae <_strtod_l+0x56e>
 8007292:	2200      	movs	r2, #0
 8007294:	4b34      	ldr	r3, [pc, #208]	; (8007368 <_strtod_l+0xb28>)
 8007296:	e78f      	b.n	80071b8 <_strtod_l+0x978>
 8007298:	2600      	movs	r6, #0
 800729a:	4f32      	ldr	r7, [pc, #200]	; (8007364 <_strtod_l+0xb24>)
 800729c:	e7ea      	b.n	8007274 <_strtod_l+0xa34>
 800729e:	4b31      	ldr	r3, [pc, #196]	; (8007364 <_strtod_l+0xb24>)
 80072a0:	4630      	mov	r0, r6
 80072a2:	4639      	mov	r1, r7
 80072a4:	2200      	movs	r2, #0
 80072a6:	f7f9 f9a7 	bl	80005f8 <__aeabi_dmul>
 80072aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80072ac:	4606      	mov	r6, r0
 80072ae:	460f      	mov	r7, r1
 80072b0:	b933      	cbnz	r3, 80072c0 <_strtod_l+0xa80>
 80072b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80072b6:	9010      	str	r0, [sp, #64]	; 0x40
 80072b8:	9311      	str	r3, [sp, #68]	; 0x44
 80072ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80072be:	e7df      	b.n	8007280 <_strtod_l+0xa40>
 80072c0:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80072c4:	e7f9      	b.n	80072ba <_strtod_l+0xa7a>
 80072c6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80072ca:	9b04      	ldr	r3, [sp, #16]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d1ab      	bne.n	8007228 <_strtod_l+0x9e8>
 80072d0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80072d4:	0d1b      	lsrs	r3, r3, #20
 80072d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80072d8:	051b      	lsls	r3, r3, #20
 80072da:	429a      	cmp	r2, r3
 80072dc:	465d      	mov	r5, fp
 80072de:	d1a3      	bne.n	8007228 <_strtod_l+0x9e8>
 80072e0:	4639      	mov	r1, r7
 80072e2:	4630      	mov	r0, r6
 80072e4:	f7f9 fc38 	bl	8000b58 <__aeabi_d2iz>
 80072e8:	f7f9 f91c 	bl	8000524 <__aeabi_i2d>
 80072ec:	460b      	mov	r3, r1
 80072ee:	4602      	mov	r2, r0
 80072f0:	4639      	mov	r1, r7
 80072f2:	4630      	mov	r0, r6
 80072f4:	f7f8 ffc8 	bl	8000288 <__aeabi_dsub>
 80072f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80072fa:	4606      	mov	r6, r0
 80072fc:	460f      	mov	r7, r1
 80072fe:	b933      	cbnz	r3, 800730e <_strtod_l+0xace>
 8007300:	f1ba 0f00 	cmp.w	sl, #0
 8007304:	d103      	bne.n	800730e <_strtod_l+0xace>
 8007306:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800730a:	2d00      	cmp	r5, #0
 800730c:	d06d      	beq.n	80073ea <_strtod_l+0xbaa>
 800730e:	a30a      	add	r3, pc, #40	; (adr r3, 8007338 <_strtod_l+0xaf8>)
 8007310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007314:	4630      	mov	r0, r6
 8007316:	4639      	mov	r1, r7
 8007318:	f7f9 fbe0 	bl	8000adc <__aeabi_dcmplt>
 800731c:	2800      	cmp	r0, #0
 800731e:	f47f acb8 	bne.w	8006c92 <_strtod_l+0x452>
 8007322:	a307      	add	r3, pc, #28	; (adr r3, 8007340 <_strtod_l+0xb00>)
 8007324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007328:	4630      	mov	r0, r6
 800732a:	4639      	mov	r1, r7
 800732c:	f7f9 fbf4 	bl	8000b18 <__aeabi_dcmpgt>
 8007330:	2800      	cmp	r0, #0
 8007332:	f43f af79 	beq.w	8007228 <_strtod_l+0x9e8>
 8007336:	e4ac      	b.n	8006c92 <_strtod_l+0x452>
 8007338:	94a03595 	.word	0x94a03595
 800733c:	3fdfffff 	.word	0x3fdfffff
 8007340:	35afe535 	.word	0x35afe535
 8007344:	3fe00000 	.word	0x3fe00000
 8007348:	000fffff 	.word	0x000fffff
 800734c:	7ff00000 	.word	0x7ff00000
 8007350:	7fefffff 	.word	0x7fefffff
 8007354:	39500000 	.word	0x39500000
 8007358:	3ff00000 	.word	0x3ff00000
 800735c:	7fe00000 	.word	0x7fe00000
 8007360:	7c9fffff 	.word	0x7c9fffff
 8007364:	3fe00000 	.word	0x3fe00000
 8007368:	bff00000 	.word	0xbff00000
 800736c:	9b04      	ldr	r3, [sp, #16]
 800736e:	b333      	cbz	r3, 80073be <_strtod_l+0xb7e>
 8007370:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007372:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007376:	d822      	bhi.n	80073be <_strtod_l+0xb7e>
 8007378:	a327      	add	r3, pc, #156	; (adr r3, 8007418 <_strtod_l+0xbd8>)
 800737a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800737e:	4630      	mov	r0, r6
 8007380:	4639      	mov	r1, r7
 8007382:	f7f9 fbb5 	bl	8000af0 <__aeabi_dcmple>
 8007386:	b1a0      	cbz	r0, 80073b2 <_strtod_l+0xb72>
 8007388:	4639      	mov	r1, r7
 800738a:	4630      	mov	r0, r6
 800738c:	f7f9 fc0c 	bl	8000ba8 <__aeabi_d2uiz>
 8007390:	2800      	cmp	r0, #0
 8007392:	bf08      	it	eq
 8007394:	2001      	moveq	r0, #1
 8007396:	f7f9 f8b5 	bl	8000504 <__aeabi_ui2d>
 800739a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800739c:	4606      	mov	r6, r0
 800739e:	460f      	mov	r7, r1
 80073a0:	bb03      	cbnz	r3, 80073e4 <_strtod_l+0xba4>
 80073a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80073a6:	9012      	str	r0, [sp, #72]	; 0x48
 80073a8:	9313      	str	r3, [sp, #76]	; 0x4c
 80073aa:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80073ae:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80073b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073b4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80073b6:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80073ba:	1a9b      	subs	r3, r3, r2
 80073bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80073be:	ed9d 0b08 	vldr	d0, [sp, #32]
 80073c2:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 80073c6:	f001 fd3d 	bl	8008e44 <__ulp>
 80073ca:	4650      	mov	r0, sl
 80073cc:	ec53 2b10 	vmov	r2, r3, d0
 80073d0:	4659      	mov	r1, fp
 80073d2:	f7f9 f911 	bl	80005f8 <__aeabi_dmul>
 80073d6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80073da:	f7f8 ff57 	bl	800028c <__adddf3>
 80073de:	4682      	mov	sl, r0
 80073e0:	468b      	mov	fp, r1
 80073e2:	e772      	b.n	80072ca <_strtod_l+0xa8a>
 80073e4:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 80073e8:	e7df      	b.n	80073aa <_strtod_l+0xb6a>
 80073ea:	a30d      	add	r3, pc, #52	; (adr r3, 8007420 <_strtod_l+0xbe0>)
 80073ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f0:	f7f9 fb74 	bl	8000adc <__aeabi_dcmplt>
 80073f4:	e79c      	b.n	8007330 <_strtod_l+0xaf0>
 80073f6:	2300      	movs	r3, #0
 80073f8:	930d      	str	r3, [sp, #52]	; 0x34
 80073fa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80073fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80073fe:	6013      	str	r3, [r2, #0]
 8007400:	f7ff ba61 	b.w	80068c6 <_strtod_l+0x86>
 8007404:	2b65      	cmp	r3, #101	; 0x65
 8007406:	f04f 0200 	mov.w	r2, #0
 800740a:	f43f ab4e 	beq.w	8006aaa <_strtod_l+0x26a>
 800740e:	2101      	movs	r1, #1
 8007410:	4614      	mov	r4, r2
 8007412:	9104      	str	r1, [sp, #16]
 8007414:	f7ff bacb 	b.w	80069ae <_strtod_l+0x16e>
 8007418:	ffc00000 	.word	0xffc00000
 800741c:	41dfffff 	.word	0x41dfffff
 8007420:	94a03595 	.word	0x94a03595
 8007424:	3fcfffff 	.word	0x3fcfffff

08007428 <_strtod_r>:
 8007428:	4b05      	ldr	r3, [pc, #20]	; (8007440 <_strtod_r+0x18>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	b410      	push	{r4}
 800742e:	6a1b      	ldr	r3, [r3, #32]
 8007430:	4c04      	ldr	r4, [pc, #16]	; (8007444 <_strtod_r+0x1c>)
 8007432:	2b00      	cmp	r3, #0
 8007434:	bf08      	it	eq
 8007436:	4623      	moveq	r3, r4
 8007438:	f85d 4b04 	ldr.w	r4, [sp], #4
 800743c:	f7ff ba00 	b.w	8006840 <_strtod_l>
 8007440:	20000030 	.word	0x20000030
 8007444:	20000094 	.word	0x20000094

08007448 <_strtol_l.isra.0>:
 8007448:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800744c:	4680      	mov	r8, r0
 800744e:	4689      	mov	r9, r1
 8007450:	4692      	mov	sl, r2
 8007452:	461e      	mov	r6, r3
 8007454:	460f      	mov	r7, r1
 8007456:	463d      	mov	r5, r7
 8007458:	9808      	ldr	r0, [sp, #32]
 800745a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800745e:	f001 f9ed 	bl	800883c <__locale_ctype_ptr_l>
 8007462:	4420      	add	r0, r4
 8007464:	7843      	ldrb	r3, [r0, #1]
 8007466:	f013 0308 	ands.w	r3, r3, #8
 800746a:	d132      	bne.n	80074d2 <_strtol_l.isra.0+0x8a>
 800746c:	2c2d      	cmp	r4, #45	; 0x2d
 800746e:	d132      	bne.n	80074d6 <_strtol_l.isra.0+0x8e>
 8007470:	787c      	ldrb	r4, [r7, #1]
 8007472:	1cbd      	adds	r5, r7, #2
 8007474:	2201      	movs	r2, #1
 8007476:	2e00      	cmp	r6, #0
 8007478:	d05d      	beq.n	8007536 <_strtol_l.isra.0+0xee>
 800747a:	2e10      	cmp	r6, #16
 800747c:	d109      	bne.n	8007492 <_strtol_l.isra.0+0x4a>
 800747e:	2c30      	cmp	r4, #48	; 0x30
 8007480:	d107      	bne.n	8007492 <_strtol_l.isra.0+0x4a>
 8007482:	782b      	ldrb	r3, [r5, #0]
 8007484:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007488:	2b58      	cmp	r3, #88	; 0x58
 800748a:	d14f      	bne.n	800752c <_strtol_l.isra.0+0xe4>
 800748c:	786c      	ldrb	r4, [r5, #1]
 800748e:	2610      	movs	r6, #16
 8007490:	3502      	adds	r5, #2
 8007492:	2a00      	cmp	r2, #0
 8007494:	bf14      	ite	ne
 8007496:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800749a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800749e:	2700      	movs	r7, #0
 80074a0:	fbb1 fcf6 	udiv	ip, r1, r6
 80074a4:	4638      	mov	r0, r7
 80074a6:	fb06 1e1c 	mls	lr, r6, ip, r1
 80074aa:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80074ae:	2b09      	cmp	r3, #9
 80074b0:	d817      	bhi.n	80074e2 <_strtol_l.isra.0+0x9a>
 80074b2:	461c      	mov	r4, r3
 80074b4:	42a6      	cmp	r6, r4
 80074b6:	dd23      	ble.n	8007500 <_strtol_l.isra.0+0xb8>
 80074b8:	1c7b      	adds	r3, r7, #1
 80074ba:	d007      	beq.n	80074cc <_strtol_l.isra.0+0x84>
 80074bc:	4584      	cmp	ip, r0
 80074be:	d31c      	bcc.n	80074fa <_strtol_l.isra.0+0xb2>
 80074c0:	d101      	bne.n	80074c6 <_strtol_l.isra.0+0x7e>
 80074c2:	45a6      	cmp	lr, r4
 80074c4:	db19      	blt.n	80074fa <_strtol_l.isra.0+0xb2>
 80074c6:	fb00 4006 	mla	r0, r0, r6, r4
 80074ca:	2701      	movs	r7, #1
 80074cc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80074d0:	e7eb      	b.n	80074aa <_strtol_l.isra.0+0x62>
 80074d2:	462f      	mov	r7, r5
 80074d4:	e7bf      	b.n	8007456 <_strtol_l.isra.0+0xe>
 80074d6:	2c2b      	cmp	r4, #43	; 0x2b
 80074d8:	bf04      	itt	eq
 80074da:	1cbd      	addeq	r5, r7, #2
 80074dc:	787c      	ldrbeq	r4, [r7, #1]
 80074de:	461a      	mov	r2, r3
 80074e0:	e7c9      	b.n	8007476 <_strtol_l.isra.0+0x2e>
 80074e2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80074e6:	2b19      	cmp	r3, #25
 80074e8:	d801      	bhi.n	80074ee <_strtol_l.isra.0+0xa6>
 80074ea:	3c37      	subs	r4, #55	; 0x37
 80074ec:	e7e2      	b.n	80074b4 <_strtol_l.isra.0+0x6c>
 80074ee:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80074f2:	2b19      	cmp	r3, #25
 80074f4:	d804      	bhi.n	8007500 <_strtol_l.isra.0+0xb8>
 80074f6:	3c57      	subs	r4, #87	; 0x57
 80074f8:	e7dc      	b.n	80074b4 <_strtol_l.isra.0+0x6c>
 80074fa:	f04f 37ff 	mov.w	r7, #4294967295
 80074fe:	e7e5      	b.n	80074cc <_strtol_l.isra.0+0x84>
 8007500:	1c7b      	adds	r3, r7, #1
 8007502:	d108      	bne.n	8007516 <_strtol_l.isra.0+0xce>
 8007504:	2322      	movs	r3, #34	; 0x22
 8007506:	f8c8 3000 	str.w	r3, [r8]
 800750a:	4608      	mov	r0, r1
 800750c:	f1ba 0f00 	cmp.w	sl, #0
 8007510:	d107      	bne.n	8007522 <_strtol_l.isra.0+0xda>
 8007512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007516:	b102      	cbz	r2, 800751a <_strtol_l.isra.0+0xd2>
 8007518:	4240      	negs	r0, r0
 800751a:	f1ba 0f00 	cmp.w	sl, #0
 800751e:	d0f8      	beq.n	8007512 <_strtol_l.isra.0+0xca>
 8007520:	b10f      	cbz	r7, 8007526 <_strtol_l.isra.0+0xde>
 8007522:	f105 39ff 	add.w	r9, r5, #4294967295
 8007526:	f8ca 9000 	str.w	r9, [sl]
 800752a:	e7f2      	b.n	8007512 <_strtol_l.isra.0+0xca>
 800752c:	2430      	movs	r4, #48	; 0x30
 800752e:	2e00      	cmp	r6, #0
 8007530:	d1af      	bne.n	8007492 <_strtol_l.isra.0+0x4a>
 8007532:	2608      	movs	r6, #8
 8007534:	e7ad      	b.n	8007492 <_strtol_l.isra.0+0x4a>
 8007536:	2c30      	cmp	r4, #48	; 0x30
 8007538:	d0a3      	beq.n	8007482 <_strtol_l.isra.0+0x3a>
 800753a:	260a      	movs	r6, #10
 800753c:	e7a9      	b.n	8007492 <_strtol_l.isra.0+0x4a>
	...

08007540 <_strtol_r>:
 8007540:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007542:	4c06      	ldr	r4, [pc, #24]	; (800755c <_strtol_r+0x1c>)
 8007544:	4d06      	ldr	r5, [pc, #24]	; (8007560 <_strtol_r+0x20>)
 8007546:	6824      	ldr	r4, [r4, #0]
 8007548:	6a24      	ldr	r4, [r4, #32]
 800754a:	2c00      	cmp	r4, #0
 800754c:	bf08      	it	eq
 800754e:	462c      	moveq	r4, r5
 8007550:	9400      	str	r4, [sp, #0]
 8007552:	f7ff ff79 	bl	8007448 <_strtol_l.isra.0>
 8007556:	b003      	add	sp, #12
 8007558:	bd30      	pop	{r4, r5, pc}
 800755a:	bf00      	nop
 800755c:	20000030 	.word	0x20000030
 8007560:	20000094 	.word	0x20000094

08007564 <quorem>:
 8007564:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007568:	6903      	ldr	r3, [r0, #16]
 800756a:	690c      	ldr	r4, [r1, #16]
 800756c:	42a3      	cmp	r3, r4
 800756e:	4680      	mov	r8, r0
 8007570:	f2c0 8082 	blt.w	8007678 <quorem+0x114>
 8007574:	3c01      	subs	r4, #1
 8007576:	f101 0714 	add.w	r7, r1, #20
 800757a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800757e:	f100 0614 	add.w	r6, r0, #20
 8007582:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8007586:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800758a:	eb06 030c 	add.w	r3, r6, ip
 800758e:	3501      	adds	r5, #1
 8007590:	eb07 090c 	add.w	r9, r7, ip
 8007594:	9301      	str	r3, [sp, #4]
 8007596:	fbb0 f5f5 	udiv	r5, r0, r5
 800759a:	b395      	cbz	r5, 8007602 <quorem+0x9e>
 800759c:	f04f 0a00 	mov.w	sl, #0
 80075a0:	4638      	mov	r0, r7
 80075a2:	46b6      	mov	lr, r6
 80075a4:	46d3      	mov	fp, sl
 80075a6:	f850 2b04 	ldr.w	r2, [r0], #4
 80075aa:	b293      	uxth	r3, r2
 80075ac:	fb05 a303 	mla	r3, r5, r3, sl
 80075b0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80075b4:	b29b      	uxth	r3, r3
 80075b6:	ebab 0303 	sub.w	r3, fp, r3
 80075ba:	0c12      	lsrs	r2, r2, #16
 80075bc:	f8de b000 	ldr.w	fp, [lr]
 80075c0:	fb05 a202 	mla	r2, r5, r2, sl
 80075c4:	fa13 f38b 	uxtah	r3, r3, fp
 80075c8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80075cc:	fa1f fb82 	uxth.w	fp, r2
 80075d0:	f8de 2000 	ldr.w	r2, [lr]
 80075d4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80075d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80075dc:	b29b      	uxth	r3, r3
 80075de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80075e2:	4581      	cmp	r9, r0
 80075e4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80075e8:	f84e 3b04 	str.w	r3, [lr], #4
 80075ec:	d2db      	bcs.n	80075a6 <quorem+0x42>
 80075ee:	f856 300c 	ldr.w	r3, [r6, ip]
 80075f2:	b933      	cbnz	r3, 8007602 <quorem+0x9e>
 80075f4:	9b01      	ldr	r3, [sp, #4]
 80075f6:	3b04      	subs	r3, #4
 80075f8:	429e      	cmp	r6, r3
 80075fa:	461a      	mov	r2, r3
 80075fc:	d330      	bcc.n	8007660 <quorem+0xfc>
 80075fe:	f8c8 4010 	str.w	r4, [r8, #16]
 8007602:	4640      	mov	r0, r8
 8007604:	f001 fba6 	bl	8008d54 <__mcmp>
 8007608:	2800      	cmp	r0, #0
 800760a:	db25      	blt.n	8007658 <quorem+0xf4>
 800760c:	3501      	adds	r5, #1
 800760e:	4630      	mov	r0, r6
 8007610:	f04f 0c00 	mov.w	ip, #0
 8007614:	f857 2b04 	ldr.w	r2, [r7], #4
 8007618:	f8d0 e000 	ldr.w	lr, [r0]
 800761c:	b293      	uxth	r3, r2
 800761e:	ebac 0303 	sub.w	r3, ip, r3
 8007622:	0c12      	lsrs	r2, r2, #16
 8007624:	fa13 f38e 	uxtah	r3, r3, lr
 8007628:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800762c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007630:	b29b      	uxth	r3, r3
 8007632:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007636:	45b9      	cmp	r9, r7
 8007638:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800763c:	f840 3b04 	str.w	r3, [r0], #4
 8007640:	d2e8      	bcs.n	8007614 <quorem+0xb0>
 8007642:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8007646:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800764a:	b92a      	cbnz	r2, 8007658 <quorem+0xf4>
 800764c:	3b04      	subs	r3, #4
 800764e:	429e      	cmp	r6, r3
 8007650:	461a      	mov	r2, r3
 8007652:	d30b      	bcc.n	800766c <quorem+0x108>
 8007654:	f8c8 4010 	str.w	r4, [r8, #16]
 8007658:	4628      	mov	r0, r5
 800765a:	b003      	add	sp, #12
 800765c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007660:	6812      	ldr	r2, [r2, #0]
 8007662:	3b04      	subs	r3, #4
 8007664:	2a00      	cmp	r2, #0
 8007666:	d1ca      	bne.n	80075fe <quorem+0x9a>
 8007668:	3c01      	subs	r4, #1
 800766a:	e7c5      	b.n	80075f8 <quorem+0x94>
 800766c:	6812      	ldr	r2, [r2, #0]
 800766e:	3b04      	subs	r3, #4
 8007670:	2a00      	cmp	r2, #0
 8007672:	d1ef      	bne.n	8007654 <quorem+0xf0>
 8007674:	3c01      	subs	r4, #1
 8007676:	e7ea      	b.n	800764e <quorem+0xea>
 8007678:	2000      	movs	r0, #0
 800767a:	e7ee      	b.n	800765a <quorem+0xf6>
 800767c:	0000      	movs	r0, r0
	...

08007680 <_dtoa_r>:
 8007680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007684:	ec57 6b10 	vmov	r6, r7, d0
 8007688:	b097      	sub	sp, #92	; 0x5c
 800768a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800768c:	9106      	str	r1, [sp, #24]
 800768e:	4604      	mov	r4, r0
 8007690:	920b      	str	r2, [sp, #44]	; 0x2c
 8007692:	9312      	str	r3, [sp, #72]	; 0x48
 8007694:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007698:	e9cd 6700 	strd	r6, r7, [sp]
 800769c:	b93d      	cbnz	r5, 80076ae <_dtoa_r+0x2e>
 800769e:	2010      	movs	r0, #16
 80076a0:	f001 f8e0 	bl	8008864 <malloc>
 80076a4:	6260      	str	r0, [r4, #36]	; 0x24
 80076a6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80076aa:	6005      	str	r5, [r0, #0]
 80076ac:	60c5      	str	r5, [r0, #12]
 80076ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80076b0:	6819      	ldr	r1, [r3, #0]
 80076b2:	b151      	cbz	r1, 80076ca <_dtoa_r+0x4a>
 80076b4:	685a      	ldr	r2, [r3, #4]
 80076b6:	604a      	str	r2, [r1, #4]
 80076b8:	2301      	movs	r3, #1
 80076ba:	4093      	lsls	r3, r2
 80076bc:	608b      	str	r3, [r1, #8]
 80076be:	4620      	mov	r0, r4
 80076c0:	f001 f929 	bl	8008916 <_Bfree>
 80076c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80076c6:	2200      	movs	r2, #0
 80076c8:	601a      	str	r2, [r3, #0]
 80076ca:	1e3b      	subs	r3, r7, #0
 80076cc:	bfbb      	ittet	lt
 80076ce:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80076d2:	9301      	strlt	r3, [sp, #4]
 80076d4:	2300      	movge	r3, #0
 80076d6:	2201      	movlt	r2, #1
 80076d8:	bfac      	ite	ge
 80076da:	f8c8 3000 	strge.w	r3, [r8]
 80076de:	f8c8 2000 	strlt.w	r2, [r8]
 80076e2:	4baf      	ldr	r3, [pc, #700]	; (80079a0 <_dtoa_r+0x320>)
 80076e4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80076e8:	ea33 0308 	bics.w	r3, r3, r8
 80076ec:	d114      	bne.n	8007718 <_dtoa_r+0x98>
 80076ee:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80076f0:	f242 730f 	movw	r3, #9999	; 0x270f
 80076f4:	6013      	str	r3, [r2, #0]
 80076f6:	9b00      	ldr	r3, [sp, #0]
 80076f8:	b923      	cbnz	r3, 8007704 <_dtoa_r+0x84>
 80076fa:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80076fe:	2800      	cmp	r0, #0
 8007700:	f000 8542 	beq.w	8008188 <_dtoa_r+0xb08>
 8007704:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007706:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80079b4 <_dtoa_r+0x334>
 800770a:	2b00      	cmp	r3, #0
 800770c:	f000 8544 	beq.w	8008198 <_dtoa_r+0xb18>
 8007710:	f10b 0303 	add.w	r3, fp, #3
 8007714:	f000 bd3e 	b.w	8008194 <_dtoa_r+0xb14>
 8007718:	e9dd 6700 	ldrd	r6, r7, [sp]
 800771c:	2200      	movs	r2, #0
 800771e:	2300      	movs	r3, #0
 8007720:	4630      	mov	r0, r6
 8007722:	4639      	mov	r1, r7
 8007724:	f7f9 f9d0 	bl	8000ac8 <__aeabi_dcmpeq>
 8007728:	4681      	mov	r9, r0
 800772a:	b168      	cbz	r0, 8007748 <_dtoa_r+0xc8>
 800772c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800772e:	2301      	movs	r3, #1
 8007730:	6013      	str	r3, [r2, #0]
 8007732:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007734:	2b00      	cmp	r3, #0
 8007736:	f000 8524 	beq.w	8008182 <_dtoa_r+0xb02>
 800773a:	4b9a      	ldr	r3, [pc, #616]	; (80079a4 <_dtoa_r+0x324>)
 800773c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800773e:	f103 3bff 	add.w	fp, r3, #4294967295
 8007742:	6013      	str	r3, [r2, #0]
 8007744:	f000 bd28 	b.w	8008198 <_dtoa_r+0xb18>
 8007748:	aa14      	add	r2, sp, #80	; 0x50
 800774a:	a915      	add	r1, sp, #84	; 0x54
 800774c:	ec47 6b10 	vmov	d0, r6, r7
 8007750:	4620      	mov	r0, r4
 8007752:	f001 fbed 	bl	8008f30 <__d2b>
 8007756:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800775a:	9004      	str	r0, [sp, #16]
 800775c:	2d00      	cmp	r5, #0
 800775e:	d07c      	beq.n	800785a <_dtoa_r+0x1da>
 8007760:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007764:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8007768:	46b2      	mov	sl, r6
 800776a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800776e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007772:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8007776:	2200      	movs	r2, #0
 8007778:	4b8b      	ldr	r3, [pc, #556]	; (80079a8 <_dtoa_r+0x328>)
 800777a:	4650      	mov	r0, sl
 800777c:	4659      	mov	r1, fp
 800777e:	f7f8 fd83 	bl	8000288 <__aeabi_dsub>
 8007782:	a381      	add	r3, pc, #516	; (adr r3, 8007988 <_dtoa_r+0x308>)
 8007784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007788:	f7f8 ff36 	bl	80005f8 <__aeabi_dmul>
 800778c:	a380      	add	r3, pc, #512	; (adr r3, 8007990 <_dtoa_r+0x310>)
 800778e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007792:	f7f8 fd7b 	bl	800028c <__adddf3>
 8007796:	4606      	mov	r6, r0
 8007798:	4628      	mov	r0, r5
 800779a:	460f      	mov	r7, r1
 800779c:	f7f8 fec2 	bl	8000524 <__aeabi_i2d>
 80077a0:	a37d      	add	r3, pc, #500	; (adr r3, 8007998 <_dtoa_r+0x318>)
 80077a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077a6:	f7f8 ff27 	bl	80005f8 <__aeabi_dmul>
 80077aa:	4602      	mov	r2, r0
 80077ac:	460b      	mov	r3, r1
 80077ae:	4630      	mov	r0, r6
 80077b0:	4639      	mov	r1, r7
 80077b2:	f7f8 fd6b 	bl	800028c <__adddf3>
 80077b6:	4606      	mov	r6, r0
 80077b8:	460f      	mov	r7, r1
 80077ba:	f7f9 f9cd 	bl	8000b58 <__aeabi_d2iz>
 80077be:	2200      	movs	r2, #0
 80077c0:	4682      	mov	sl, r0
 80077c2:	2300      	movs	r3, #0
 80077c4:	4630      	mov	r0, r6
 80077c6:	4639      	mov	r1, r7
 80077c8:	f7f9 f988 	bl	8000adc <__aeabi_dcmplt>
 80077cc:	b148      	cbz	r0, 80077e2 <_dtoa_r+0x162>
 80077ce:	4650      	mov	r0, sl
 80077d0:	f7f8 fea8 	bl	8000524 <__aeabi_i2d>
 80077d4:	4632      	mov	r2, r6
 80077d6:	463b      	mov	r3, r7
 80077d8:	f7f9 f976 	bl	8000ac8 <__aeabi_dcmpeq>
 80077dc:	b908      	cbnz	r0, 80077e2 <_dtoa_r+0x162>
 80077de:	f10a 3aff 	add.w	sl, sl, #4294967295
 80077e2:	f1ba 0f16 	cmp.w	sl, #22
 80077e6:	d859      	bhi.n	800789c <_dtoa_r+0x21c>
 80077e8:	4970      	ldr	r1, [pc, #448]	; (80079ac <_dtoa_r+0x32c>)
 80077ea:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80077ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 80077f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80077f6:	f7f9 f98f 	bl	8000b18 <__aeabi_dcmpgt>
 80077fa:	2800      	cmp	r0, #0
 80077fc:	d050      	beq.n	80078a0 <_dtoa_r+0x220>
 80077fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007802:	2300      	movs	r3, #0
 8007804:	930f      	str	r3, [sp, #60]	; 0x3c
 8007806:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007808:	1b5d      	subs	r5, r3, r5
 800780a:	f1b5 0801 	subs.w	r8, r5, #1
 800780e:	bf49      	itett	mi
 8007810:	f1c5 0301 	rsbmi	r3, r5, #1
 8007814:	2300      	movpl	r3, #0
 8007816:	9305      	strmi	r3, [sp, #20]
 8007818:	f04f 0800 	movmi.w	r8, #0
 800781c:	bf58      	it	pl
 800781e:	9305      	strpl	r3, [sp, #20]
 8007820:	f1ba 0f00 	cmp.w	sl, #0
 8007824:	db3e      	blt.n	80078a4 <_dtoa_r+0x224>
 8007826:	2300      	movs	r3, #0
 8007828:	44d0      	add	r8, sl
 800782a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800782e:	9307      	str	r3, [sp, #28]
 8007830:	9b06      	ldr	r3, [sp, #24]
 8007832:	2b09      	cmp	r3, #9
 8007834:	f200 8090 	bhi.w	8007958 <_dtoa_r+0x2d8>
 8007838:	2b05      	cmp	r3, #5
 800783a:	bfc4      	itt	gt
 800783c:	3b04      	subgt	r3, #4
 800783e:	9306      	strgt	r3, [sp, #24]
 8007840:	9b06      	ldr	r3, [sp, #24]
 8007842:	f1a3 0302 	sub.w	r3, r3, #2
 8007846:	bfcc      	ite	gt
 8007848:	2500      	movgt	r5, #0
 800784a:	2501      	movle	r5, #1
 800784c:	2b03      	cmp	r3, #3
 800784e:	f200 808f 	bhi.w	8007970 <_dtoa_r+0x2f0>
 8007852:	e8df f003 	tbb	[pc, r3]
 8007856:	7f7d      	.short	0x7f7d
 8007858:	7131      	.short	0x7131
 800785a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800785e:	441d      	add	r5, r3
 8007860:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8007864:	2820      	cmp	r0, #32
 8007866:	dd13      	ble.n	8007890 <_dtoa_r+0x210>
 8007868:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800786c:	9b00      	ldr	r3, [sp, #0]
 800786e:	fa08 f800 	lsl.w	r8, r8, r0
 8007872:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8007876:	fa23 f000 	lsr.w	r0, r3, r0
 800787a:	ea48 0000 	orr.w	r0, r8, r0
 800787e:	f7f8 fe41 	bl	8000504 <__aeabi_ui2d>
 8007882:	2301      	movs	r3, #1
 8007884:	4682      	mov	sl, r0
 8007886:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800788a:	3d01      	subs	r5, #1
 800788c:	9313      	str	r3, [sp, #76]	; 0x4c
 800788e:	e772      	b.n	8007776 <_dtoa_r+0xf6>
 8007890:	9b00      	ldr	r3, [sp, #0]
 8007892:	f1c0 0020 	rsb	r0, r0, #32
 8007896:	fa03 f000 	lsl.w	r0, r3, r0
 800789a:	e7f0      	b.n	800787e <_dtoa_r+0x1fe>
 800789c:	2301      	movs	r3, #1
 800789e:	e7b1      	b.n	8007804 <_dtoa_r+0x184>
 80078a0:	900f      	str	r0, [sp, #60]	; 0x3c
 80078a2:	e7b0      	b.n	8007806 <_dtoa_r+0x186>
 80078a4:	9b05      	ldr	r3, [sp, #20]
 80078a6:	eba3 030a 	sub.w	r3, r3, sl
 80078aa:	9305      	str	r3, [sp, #20]
 80078ac:	f1ca 0300 	rsb	r3, sl, #0
 80078b0:	9307      	str	r3, [sp, #28]
 80078b2:	2300      	movs	r3, #0
 80078b4:	930e      	str	r3, [sp, #56]	; 0x38
 80078b6:	e7bb      	b.n	8007830 <_dtoa_r+0x1b0>
 80078b8:	2301      	movs	r3, #1
 80078ba:	930a      	str	r3, [sp, #40]	; 0x28
 80078bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078be:	2b00      	cmp	r3, #0
 80078c0:	dd59      	ble.n	8007976 <_dtoa_r+0x2f6>
 80078c2:	9302      	str	r3, [sp, #8]
 80078c4:	4699      	mov	r9, r3
 80078c6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80078c8:	2200      	movs	r2, #0
 80078ca:	6072      	str	r2, [r6, #4]
 80078cc:	2204      	movs	r2, #4
 80078ce:	f102 0014 	add.w	r0, r2, #20
 80078d2:	4298      	cmp	r0, r3
 80078d4:	6871      	ldr	r1, [r6, #4]
 80078d6:	d953      	bls.n	8007980 <_dtoa_r+0x300>
 80078d8:	4620      	mov	r0, r4
 80078da:	f000 ffe8 	bl	80088ae <_Balloc>
 80078de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80078e0:	6030      	str	r0, [r6, #0]
 80078e2:	f1b9 0f0e 	cmp.w	r9, #14
 80078e6:	f8d3 b000 	ldr.w	fp, [r3]
 80078ea:	f200 80e6 	bhi.w	8007aba <_dtoa_r+0x43a>
 80078ee:	2d00      	cmp	r5, #0
 80078f0:	f000 80e3 	beq.w	8007aba <_dtoa_r+0x43a>
 80078f4:	ed9d 7b00 	vldr	d7, [sp]
 80078f8:	f1ba 0f00 	cmp.w	sl, #0
 80078fc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8007900:	dd74      	ble.n	80079ec <_dtoa_r+0x36c>
 8007902:	4a2a      	ldr	r2, [pc, #168]	; (80079ac <_dtoa_r+0x32c>)
 8007904:	f00a 030f 	and.w	r3, sl, #15
 8007908:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800790c:	ed93 7b00 	vldr	d7, [r3]
 8007910:	ea4f 162a 	mov.w	r6, sl, asr #4
 8007914:	06f0      	lsls	r0, r6, #27
 8007916:	ed8d 7b08 	vstr	d7, [sp, #32]
 800791a:	d565      	bpl.n	80079e8 <_dtoa_r+0x368>
 800791c:	4b24      	ldr	r3, [pc, #144]	; (80079b0 <_dtoa_r+0x330>)
 800791e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007922:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007926:	f7f8 ff91 	bl	800084c <__aeabi_ddiv>
 800792a:	e9cd 0100 	strd	r0, r1, [sp]
 800792e:	f006 060f 	and.w	r6, r6, #15
 8007932:	2503      	movs	r5, #3
 8007934:	4f1e      	ldr	r7, [pc, #120]	; (80079b0 <_dtoa_r+0x330>)
 8007936:	e04c      	b.n	80079d2 <_dtoa_r+0x352>
 8007938:	2301      	movs	r3, #1
 800793a:	930a      	str	r3, [sp, #40]	; 0x28
 800793c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800793e:	4453      	add	r3, sl
 8007940:	f103 0901 	add.w	r9, r3, #1
 8007944:	9302      	str	r3, [sp, #8]
 8007946:	464b      	mov	r3, r9
 8007948:	2b01      	cmp	r3, #1
 800794a:	bfb8      	it	lt
 800794c:	2301      	movlt	r3, #1
 800794e:	e7ba      	b.n	80078c6 <_dtoa_r+0x246>
 8007950:	2300      	movs	r3, #0
 8007952:	e7b2      	b.n	80078ba <_dtoa_r+0x23a>
 8007954:	2300      	movs	r3, #0
 8007956:	e7f0      	b.n	800793a <_dtoa_r+0x2ba>
 8007958:	2501      	movs	r5, #1
 800795a:	2300      	movs	r3, #0
 800795c:	9306      	str	r3, [sp, #24]
 800795e:	950a      	str	r5, [sp, #40]	; 0x28
 8007960:	f04f 33ff 	mov.w	r3, #4294967295
 8007964:	9302      	str	r3, [sp, #8]
 8007966:	4699      	mov	r9, r3
 8007968:	2200      	movs	r2, #0
 800796a:	2312      	movs	r3, #18
 800796c:	920b      	str	r2, [sp, #44]	; 0x2c
 800796e:	e7aa      	b.n	80078c6 <_dtoa_r+0x246>
 8007970:	2301      	movs	r3, #1
 8007972:	930a      	str	r3, [sp, #40]	; 0x28
 8007974:	e7f4      	b.n	8007960 <_dtoa_r+0x2e0>
 8007976:	2301      	movs	r3, #1
 8007978:	9302      	str	r3, [sp, #8]
 800797a:	4699      	mov	r9, r3
 800797c:	461a      	mov	r2, r3
 800797e:	e7f5      	b.n	800796c <_dtoa_r+0x2ec>
 8007980:	3101      	adds	r1, #1
 8007982:	6071      	str	r1, [r6, #4]
 8007984:	0052      	lsls	r2, r2, #1
 8007986:	e7a2      	b.n	80078ce <_dtoa_r+0x24e>
 8007988:	636f4361 	.word	0x636f4361
 800798c:	3fd287a7 	.word	0x3fd287a7
 8007990:	8b60c8b3 	.word	0x8b60c8b3
 8007994:	3fc68a28 	.word	0x3fc68a28
 8007998:	509f79fb 	.word	0x509f79fb
 800799c:	3fd34413 	.word	0x3fd34413
 80079a0:	7ff00000 	.word	0x7ff00000
 80079a4:	08009731 	.word	0x08009731
 80079a8:	3ff80000 	.word	0x3ff80000
 80079ac:	080097f0 	.word	0x080097f0
 80079b0:	080097c8 	.word	0x080097c8
 80079b4:	080097b9 	.word	0x080097b9
 80079b8:	07f1      	lsls	r1, r6, #31
 80079ba:	d508      	bpl.n	80079ce <_dtoa_r+0x34e>
 80079bc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80079c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079c4:	f7f8 fe18 	bl	80005f8 <__aeabi_dmul>
 80079c8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80079cc:	3501      	adds	r5, #1
 80079ce:	1076      	asrs	r6, r6, #1
 80079d0:	3708      	adds	r7, #8
 80079d2:	2e00      	cmp	r6, #0
 80079d4:	d1f0      	bne.n	80079b8 <_dtoa_r+0x338>
 80079d6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80079da:	e9dd 0100 	ldrd	r0, r1, [sp]
 80079de:	f7f8 ff35 	bl	800084c <__aeabi_ddiv>
 80079e2:	e9cd 0100 	strd	r0, r1, [sp]
 80079e6:	e01a      	b.n	8007a1e <_dtoa_r+0x39e>
 80079e8:	2502      	movs	r5, #2
 80079ea:	e7a3      	b.n	8007934 <_dtoa_r+0x2b4>
 80079ec:	f000 80a0 	beq.w	8007b30 <_dtoa_r+0x4b0>
 80079f0:	f1ca 0600 	rsb	r6, sl, #0
 80079f4:	4b9f      	ldr	r3, [pc, #636]	; (8007c74 <_dtoa_r+0x5f4>)
 80079f6:	4fa0      	ldr	r7, [pc, #640]	; (8007c78 <_dtoa_r+0x5f8>)
 80079f8:	f006 020f 	and.w	r2, r6, #15
 80079fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a04:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007a08:	f7f8 fdf6 	bl	80005f8 <__aeabi_dmul>
 8007a0c:	e9cd 0100 	strd	r0, r1, [sp]
 8007a10:	1136      	asrs	r6, r6, #4
 8007a12:	2300      	movs	r3, #0
 8007a14:	2502      	movs	r5, #2
 8007a16:	2e00      	cmp	r6, #0
 8007a18:	d17f      	bne.n	8007b1a <_dtoa_r+0x49a>
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d1e1      	bne.n	80079e2 <_dtoa_r+0x362>
 8007a1e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	f000 8087 	beq.w	8007b34 <_dtoa_r+0x4b4>
 8007a26:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	4b93      	ldr	r3, [pc, #588]	; (8007c7c <_dtoa_r+0x5fc>)
 8007a2e:	4630      	mov	r0, r6
 8007a30:	4639      	mov	r1, r7
 8007a32:	f7f9 f853 	bl	8000adc <__aeabi_dcmplt>
 8007a36:	2800      	cmp	r0, #0
 8007a38:	d07c      	beq.n	8007b34 <_dtoa_r+0x4b4>
 8007a3a:	f1b9 0f00 	cmp.w	r9, #0
 8007a3e:	d079      	beq.n	8007b34 <_dtoa_r+0x4b4>
 8007a40:	9b02      	ldr	r3, [sp, #8]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	dd35      	ble.n	8007ab2 <_dtoa_r+0x432>
 8007a46:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007a4a:	9308      	str	r3, [sp, #32]
 8007a4c:	4639      	mov	r1, r7
 8007a4e:	2200      	movs	r2, #0
 8007a50:	4b8b      	ldr	r3, [pc, #556]	; (8007c80 <_dtoa_r+0x600>)
 8007a52:	4630      	mov	r0, r6
 8007a54:	f7f8 fdd0 	bl	80005f8 <__aeabi_dmul>
 8007a58:	e9cd 0100 	strd	r0, r1, [sp]
 8007a5c:	9f02      	ldr	r7, [sp, #8]
 8007a5e:	3501      	adds	r5, #1
 8007a60:	4628      	mov	r0, r5
 8007a62:	f7f8 fd5f 	bl	8000524 <__aeabi_i2d>
 8007a66:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007a6a:	f7f8 fdc5 	bl	80005f8 <__aeabi_dmul>
 8007a6e:	2200      	movs	r2, #0
 8007a70:	4b84      	ldr	r3, [pc, #528]	; (8007c84 <_dtoa_r+0x604>)
 8007a72:	f7f8 fc0b 	bl	800028c <__adddf3>
 8007a76:	4605      	mov	r5, r0
 8007a78:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007a7c:	2f00      	cmp	r7, #0
 8007a7e:	d15d      	bne.n	8007b3c <_dtoa_r+0x4bc>
 8007a80:	2200      	movs	r2, #0
 8007a82:	4b81      	ldr	r3, [pc, #516]	; (8007c88 <_dtoa_r+0x608>)
 8007a84:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007a88:	f7f8 fbfe 	bl	8000288 <__aeabi_dsub>
 8007a8c:	462a      	mov	r2, r5
 8007a8e:	4633      	mov	r3, r6
 8007a90:	e9cd 0100 	strd	r0, r1, [sp]
 8007a94:	f7f9 f840 	bl	8000b18 <__aeabi_dcmpgt>
 8007a98:	2800      	cmp	r0, #0
 8007a9a:	f040 8288 	bne.w	8007fae <_dtoa_r+0x92e>
 8007a9e:	462a      	mov	r2, r5
 8007aa0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007aa4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007aa8:	f7f9 f818 	bl	8000adc <__aeabi_dcmplt>
 8007aac:	2800      	cmp	r0, #0
 8007aae:	f040 827c 	bne.w	8007faa <_dtoa_r+0x92a>
 8007ab2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007ab6:	e9cd 2300 	strd	r2, r3, [sp]
 8007aba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	f2c0 8150 	blt.w	8007d62 <_dtoa_r+0x6e2>
 8007ac2:	f1ba 0f0e 	cmp.w	sl, #14
 8007ac6:	f300 814c 	bgt.w	8007d62 <_dtoa_r+0x6e2>
 8007aca:	4b6a      	ldr	r3, [pc, #424]	; (8007c74 <_dtoa_r+0x5f4>)
 8007acc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007ad0:	ed93 7b00 	vldr	d7, [r3]
 8007ad4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007adc:	f280 80d8 	bge.w	8007c90 <_dtoa_r+0x610>
 8007ae0:	f1b9 0f00 	cmp.w	r9, #0
 8007ae4:	f300 80d4 	bgt.w	8007c90 <_dtoa_r+0x610>
 8007ae8:	f040 825e 	bne.w	8007fa8 <_dtoa_r+0x928>
 8007aec:	2200      	movs	r2, #0
 8007aee:	4b66      	ldr	r3, [pc, #408]	; (8007c88 <_dtoa_r+0x608>)
 8007af0:	ec51 0b17 	vmov	r0, r1, d7
 8007af4:	f7f8 fd80 	bl	80005f8 <__aeabi_dmul>
 8007af8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007afc:	f7f9 f802 	bl	8000b04 <__aeabi_dcmpge>
 8007b00:	464f      	mov	r7, r9
 8007b02:	464e      	mov	r6, r9
 8007b04:	2800      	cmp	r0, #0
 8007b06:	f040 8234 	bne.w	8007f72 <_dtoa_r+0x8f2>
 8007b0a:	2331      	movs	r3, #49	; 0x31
 8007b0c:	f10b 0501 	add.w	r5, fp, #1
 8007b10:	f88b 3000 	strb.w	r3, [fp]
 8007b14:	f10a 0a01 	add.w	sl, sl, #1
 8007b18:	e22f      	b.n	8007f7a <_dtoa_r+0x8fa>
 8007b1a:	07f2      	lsls	r2, r6, #31
 8007b1c:	d505      	bpl.n	8007b2a <_dtoa_r+0x4aa>
 8007b1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b22:	f7f8 fd69 	bl	80005f8 <__aeabi_dmul>
 8007b26:	3501      	adds	r5, #1
 8007b28:	2301      	movs	r3, #1
 8007b2a:	1076      	asrs	r6, r6, #1
 8007b2c:	3708      	adds	r7, #8
 8007b2e:	e772      	b.n	8007a16 <_dtoa_r+0x396>
 8007b30:	2502      	movs	r5, #2
 8007b32:	e774      	b.n	8007a1e <_dtoa_r+0x39e>
 8007b34:	f8cd a020 	str.w	sl, [sp, #32]
 8007b38:	464f      	mov	r7, r9
 8007b3a:	e791      	b.n	8007a60 <_dtoa_r+0x3e0>
 8007b3c:	4b4d      	ldr	r3, [pc, #308]	; (8007c74 <_dtoa_r+0x5f4>)
 8007b3e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007b42:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8007b46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d047      	beq.n	8007bdc <_dtoa_r+0x55c>
 8007b4c:	4602      	mov	r2, r0
 8007b4e:	460b      	mov	r3, r1
 8007b50:	2000      	movs	r0, #0
 8007b52:	494e      	ldr	r1, [pc, #312]	; (8007c8c <_dtoa_r+0x60c>)
 8007b54:	f7f8 fe7a 	bl	800084c <__aeabi_ddiv>
 8007b58:	462a      	mov	r2, r5
 8007b5a:	4633      	mov	r3, r6
 8007b5c:	f7f8 fb94 	bl	8000288 <__aeabi_dsub>
 8007b60:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007b64:	465d      	mov	r5, fp
 8007b66:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007b6a:	f7f8 fff5 	bl	8000b58 <__aeabi_d2iz>
 8007b6e:	4606      	mov	r6, r0
 8007b70:	f7f8 fcd8 	bl	8000524 <__aeabi_i2d>
 8007b74:	4602      	mov	r2, r0
 8007b76:	460b      	mov	r3, r1
 8007b78:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007b7c:	f7f8 fb84 	bl	8000288 <__aeabi_dsub>
 8007b80:	3630      	adds	r6, #48	; 0x30
 8007b82:	f805 6b01 	strb.w	r6, [r5], #1
 8007b86:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007b8a:	e9cd 0100 	strd	r0, r1, [sp]
 8007b8e:	f7f8 ffa5 	bl	8000adc <__aeabi_dcmplt>
 8007b92:	2800      	cmp	r0, #0
 8007b94:	d163      	bne.n	8007c5e <_dtoa_r+0x5de>
 8007b96:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007b9a:	2000      	movs	r0, #0
 8007b9c:	4937      	ldr	r1, [pc, #220]	; (8007c7c <_dtoa_r+0x5fc>)
 8007b9e:	f7f8 fb73 	bl	8000288 <__aeabi_dsub>
 8007ba2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007ba6:	f7f8 ff99 	bl	8000adc <__aeabi_dcmplt>
 8007baa:	2800      	cmp	r0, #0
 8007bac:	f040 80b7 	bne.w	8007d1e <_dtoa_r+0x69e>
 8007bb0:	eba5 030b 	sub.w	r3, r5, fp
 8007bb4:	429f      	cmp	r7, r3
 8007bb6:	f77f af7c 	ble.w	8007ab2 <_dtoa_r+0x432>
 8007bba:	2200      	movs	r2, #0
 8007bbc:	4b30      	ldr	r3, [pc, #192]	; (8007c80 <_dtoa_r+0x600>)
 8007bbe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007bc2:	f7f8 fd19 	bl	80005f8 <__aeabi_dmul>
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007bcc:	4b2c      	ldr	r3, [pc, #176]	; (8007c80 <_dtoa_r+0x600>)
 8007bce:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007bd2:	f7f8 fd11 	bl	80005f8 <__aeabi_dmul>
 8007bd6:	e9cd 0100 	strd	r0, r1, [sp]
 8007bda:	e7c4      	b.n	8007b66 <_dtoa_r+0x4e6>
 8007bdc:	462a      	mov	r2, r5
 8007bde:	4633      	mov	r3, r6
 8007be0:	f7f8 fd0a 	bl	80005f8 <__aeabi_dmul>
 8007be4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007be8:	eb0b 0507 	add.w	r5, fp, r7
 8007bec:	465e      	mov	r6, fp
 8007bee:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007bf2:	f7f8 ffb1 	bl	8000b58 <__aeabi_d2iz>
 8007bf6:	4607      	mov	r7, r0
 8007bf8:	f7f8 fc94 	bl	8000524 <__aeabi_i2d>
 8007bfc:	3730      	adds	r7, #48	; 0x30
 8007bfe:	4602      	mov	r2, r0
 8007c00:	460b      	mov	r3, r1
 8007c02:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007c06:	f7f8 fb3f 	bl	8000288 <__aeabi_dsub>
 8007c0a:	f806 7b01 	strb.w	r7, [r6], #1
 8007c0e:	42ae      	cmp	r6, r5
 8007c10:	e9cd 0100 	strd	r0, r1, [sp]
 8007c14:	f04f 0200 	mov.w	r2, #0
 8007c18:	d126      	bne.n	8007c68 <_dtoa_r+0x5e8>
 8007c1a:	4b1c      	ldr	r3, [pc, #112]	; (8007c8c <_dtoa_r+0x60c>)
 8007c1c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007c20:	f7f8 fb34 	bl	800028c <__adddf3>
 8007c24:	4602      	mov	r2, r0
 8007c26:	460b      	mov	r3, r1
 8007c28:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007c2c:	f7f8 ff74 	bl	8000b18 <__aeabi_dcmpgt>
 8007c30:	2800      	cmp	r0, #0
 8007c32:	d174      	bne.n	8007d1e <_dtoa_r+0x69e>
 8007c34:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007c38:	2000      	movs	r0, #0
 8007c3a:	4914      	ldr	r1, [pc, #80]	; (8007c8c <_dtoa_r+0x60c>)
 8007c3c:	f7f8 fb24 	bl	8000288 <__aeabi_dsub>
 8007c40:	4602      	mov	r2, r0
 8007c42:	460b      	mov	r3, r1
 8007c44:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007c48:	f7f8 ff48 	bl	8000adc <__aeabi_dcmplt>
 8007c4c:	2800      	cmp	r0, #0
 8007c4e:	f43f af30 	beq.w	8007ab2 <_dtoa_r+0x432>
 8007c52:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007c56:	2b30      	cmp	r3, #48	; 0x30
 8007c58:	f105 32ff 	add.w	r2, r5, #4294967295
 8007c5c:	d002      	beq.n	8007c64 <_dtoa_r+0x5e4>
 8007c5e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007c62:	e04a      	b.n	8007cfa <_dtoa_r+0x67a>
 8007c64:	4615      	mov	r5, r2
 8007c66:	e7f4      	b.n	8007c52 <_dtoa_r+0x5d2>
 8007c68:	4b05      	ldr	r3, [pc, #20]	; (8007c80 <_dtoa_r+0x600>)
 8007c6a:	f7f8 fcc5 	bl	80005f8 <__aeabi_dmul>
 8007c6e:	e9cd 0100 	strd	r0, r1, [sp]
 8007c72:	e7bc      	b.n	8007bee <_dtoa_r+0x56e>
 8007c74:	080097f0 	.word	0x080097f0
 8007c78:	080097c8 	.word	0x080097c8
 8007c7c:	3ff00000 	.word	0x3ff00000
 8007c80:	40240000 	.word	0x40240000
 8007c84:	401c0000 	.word	0x401c0000
 8007c88:	40140000 	.word	0x40140000
 8007c8c:	3fe00000 	.word	0x3fe00000
 8007c90:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007c94:	465d      	mov	r5, fp
 8007c96:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c9a:	4630      	mov	r0, r6
 8007c9c:	4639      	mov	r1, r7
 8007c9e:	f7f8 fdd5 	bl	800084c <__aeabi_ddiv>
 8007ca2:	f7f8 ff59 	bl	8000b58 <__aeabi_d2iz>
 8007ca6:	4680      	mov	r8, r0
 8007ca8:	f7f8 fc3c 	bl	8000524 <__aeabi_i2d>
 8007cac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007cb0:	f7f8 fca2 	bl	80005f8 <__aeabi_dmul>
 8007cb4:	4602      	mov	r2, r0
 8007cb6:	460b      	mov	r3, r1
 8007cb8:	4630      	mov	r0, r6
 8007cba:	4639      	mov	r1, r7
 8007cbc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8007cc0:	f7f8 fae2 	bl	8000288 <__aeabi_dsub>
 8007cc4:	f805 6b01 	strb.w	r6, [r5], #1
 8007cc8:	eba5 060b 	sub.w	r6, r5, fp
 8007ccc:	45b1      	cmp	r9, r6
 8007cce:	4602      	mov	r2, r0
 8007cd0:	460b      	mov	r3, r1
 8007cd2:	d139      	bne.n	8007d48 <_dtoa_r+0x6c8>
 8007cd4:	f7f8 fada 	bl	800028c <__adddf3>
 8007cd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007cdc:	4606      	mov	r6, r0
 8007cde:	460f      	mov	r7, r1
 8007ce0:	f7f8 ff1a 	bl	8000b18 <__aeabi_dcmpgt>
 8007ce4:	b9c8      	cbnz	r0, 8007d1a <_dtoa_r+0x69a>
 8007ce6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007cea:	4630      	mov	r0, r6
 8007cec:	4639      	mov	r1, r7
 8007cee:	f7f8 feeb 	bl	8000ac8 <__aeabi_dcmpeq>
 8007cf2:	b110      	cbz	r0, 8007cfa <_dtoa_r+0x67a>
 8007cf4:	f018 0f01 	tst.w	r8, #1
 8007cf8:	d10f      	bne.n	8007d1a <_dtoa_r+0x69a>
 8007cfa:	9904      	ldr	r1, [sp, #16]
 8007cfc:	4620      	mov	r0, r4
 8007cfe:	f000 fe0a 	bl	8008916 <_Bfree>
 8007d02:	2300      	movs	r3, #0
 8007d04:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007d06:	702b      	strb	r3, [r5, #0]
 8007d08:	f10a 0301 	add.w	r3, sl, #1
 8007d0c:	6013      	str	r3, [r2, #0]
 8007d0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	f000 8241 	beq.w	8008198 <_dtoa_r+0xb18>
 8007d16:	601d      	str	r5, [r3, #0]
 8007d18:	e23e      	b.n	8008198 <_dtoa_r+0xb18>
 8007d1a:	f8cd a020 	str.w	sl, [sp, #32]
 8007d1e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007d22:	2a39      	cmp	r2, #57	; 0x39
 8007d24:	f105 33ff 	add.w	r3, r5, #4294967295
 8007d28:	d108      	bne.n	8007d3c <_dtoa_r+0x6bc>
 8007d2a:	459b      	cmp	fp, r3
 8007d2c:	d10a      	bne.n	8007d44 <_dtoa_r+0x6c4>
 8007d2e:	9b08      	ldr	r3, [sp, #32]
 8007d30:	3301      	adds	r3, #1
 8007d32:	9308      	str	r3, [sp, #32]
 8007d34:	2330      	movs	r3, #48	; 0x30
 8007d36:	f88b 3000 	strb.w	r3, [fp]
 8007d3a:	465b      	mov	r3, fp
 8007d3c:	781a      	ldrb	r2, [r3, #0]
 8007d3e:	3201      	adds	r2, #1
 8007d40:	701a      	strb	r2, [r3, #0]
 8007d42:	e78c      	b.n	8007c5e <_dtoa_r+0x5de>
 8007d44:	461d      	mov	r5, r3
 8007d46:	e7ea      	b.n	8007d1e <_dtoa_r+0x69e>
 8007d48:	2200      	movs	r2, #0
 8007d4a:	4b9b      	ldr	r3, [pc, #620]	; (8007fb8 <_dtoa_r+0x938>)
 8007d4c:	f7f8 fc54 	bl	80005f8 <__aeabi_dmul>
 8007d50:	2200      	movs	r2, #0
 8007d52:	2300      	movs	r3, #0
 8007d54:	4606      	mov	r6, r0
 8007d56:	460f      	mov	r7, r1
 8007d58:	f7f8 feb6 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d5c:	2800      	cmp	r0, #0
 8007d5e:	d09a      	beq.n	8007c96 <_dtoa_r+0x616>
 8007d60:	e7cb      	b.n	8007cfa <_dtoa_r+0x67a>
 8007d62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d64:	2a00      	cmp	r2, #0
 8007d66:	f000 808b 	beq.w	8007e80 <_dtoa_r+0x800>
 8007d6a:	9a06      	ldr	r2, [sp, #24]
 8007d6c:	2a01      	cmp	r2, #1
 8007d6e:	dc6e      	bgt.n	8007e4e <_dtoa_r+0x7ce>
 8007d70:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007d72:	2a00      	cmp	r2, #0
 8007d74:	d067      	beq.n	8007e46 <_dtoa_r+0x7c6>
 8007d76:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007d7a:	9f07      	ldr	r7, [sp, #28]
 8007d7c:	9d05      	ldr	r5, [sp, #20]
 8007d7e:	9a05      	ldr	r2, [sp, #20]
 8007d80:	2101      	movs	r1, #1
 8007d82:	441a      	add	r2, r3
 8007d84:	4620      	mov	r0, r4
 8007d86:	9205      	str	r2, [sp, #20]
 8007d88:	4498      	add	r8, r3
 8007d8a:	f000 fea2 	bl	8008ad2 <__i2b>
 8007d8e:	4606      	mov	r6, r0
 8007d90:	2d00      	cmp	r5, #0
 8007d92:	dd0c      	ble.n	8007dae <_dtoa_r+0x72e>
 8007d94:	f1b8 0f00 	cmp.w	r8, #0
 8007d98:	dd09      	ble.n	8007dae <_dtoa_r+0x72e>
 8007d9a:	4545      	cmp	r5, r8
 8007d9c:	9a05      	ldr	r2, [sp, #20]
 8007d9e:	462b      	mov	r3, r5
 8007da0:	bfa8      	it	ge
 8007da2:	4643      	movge	r3, r8
 8007da4:	1ad2      	subs	r2, r2, r3
 8007da6:	9205      	str	r2, [sp, #20]
 8007da8:	1aed      	subs	r5, r5, r3
 8007daa:	eba8 0803 	sub.w	r8, r8, r3
 8007dae:	9b07      	ldr	r3, [sp, #28]
 8007db0:	b1eb      	cbz	r3, 8007dee <_dtoa_r+0x76e>
 8007db2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d067      	beq.n	8007e88 <_dtoa_r+0x808>
 8007db8:	b18f      	cbz	r7, 8007dde <_dtoa_r+0x75e>
 8007dba:	4631      	mov	r1, r6
 8007dbc:	463a      	mov	r2, r7
 8007dbe:	4620      	mov	r0, r4
 8007dc0:	f000 ff26 	bl	8008c10 <__pow5mult>
 8007dc4:	9a04      	ldr	r2, [sp, #16]
 8007dc6:	4601      	mov	r1, r0
 8007dc8:	4606      	mov	r6, r0
 8007dca:	4620      	mov	r0, r4
 8007dcc:	f000 fe8a 	bl	8008ae4 <__multiply>
 8007dd0:	9904      	ldr	r1, [sp, #16]
 8007dd2:	9008      	str	r0, [sp, #32]
 8007dd4:	4620      	mov	r0, r4
 8007dd6:	f000 fd9e 	bl	8008916 <_Bfree>
 8007dda:	9b08      	ldr	r3, [sp, #32]
 8007ddc:	9304      	str	r3, [sp, #16]
 8007dde:	9b07      	ldr	r3, [sp, #28]
 8007de0:	1bda      	subs	r2, r3, r7
 8007de2:	d004      	beq.n	8007dee <_dtoa_r+0x76e>
 8007de4:	9904      	ldr	r1, [sp, #16]
 8007de6:	4620      	mov	r0, r4
 8007de8:	f000 ff12 	bl	8008c10 <__pow5mult>
 8007dec:	9004      	str	r0, [sp, #16]
 8007dee:	2101      	movs	r1, #1
 8007df0:	4620      	mov	r0, r4
 8007df2:	f000 fe6e 	bl	8008ad2 <__i2b>
 8007df6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007df8:	4607      	mov	r7, r0
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	f000 81d0 	beq.w	80081a0 <_dtoa_r+0xb20>
 8007e00:	461a      	mov	r2, r3
 8007e02:	4601      	mov	r1, r0
 8007e04:	4620      	mov	r0, r4
 8007e06:	f000 ff03 	bl	8008c10 <__pow5mult>
 8007e0a:	9b06      	ldr	r3, [sp, #24]
 8007e0c:	2b01      	cmp	r3, #1
 8007e0e:	4607      	mov	r7, r0
 8007e10:	dc40      	bgt.n	8007e94 <_dtoa_r+0x814>
 8007e12:	9b00      	ldr	r3, [sp, #0]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d139      	bne.n	8007e8c <_dtoa_r+0x80c>
 8007e18:	9b01      	ldr	r3, [sp, #4]
 8007e1a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d136      	bne.n	8007e90 <_dtoa_r+0x810>
 8007e22:	9b01      	ldr	r3, [sp, #4]
 8007e24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007e28:	0d1b      	lsrs	r3, r3, #20
 8007e2a:	051b      	lsls	r3, r3, #20
 8007e2c:	b12b      	cbz	r3, 8007e3a <_dtoa_r+0x7ba>
 8007e2e:	9b05      	ldr	r3, [sp, #20]
 8007e30:	3301      	adds	r3, #1
 8007e32:	9305      	str	r3, [sp, #20]
 8007e34:	f108 0801 	add.w	r8, r8, #1
 8007e38:	2301      	movs	r3, #1
 8007e3a:	9307      	str	r3, [sp, #28]
 8007e3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d12a      	bne.n	8007e98 <_dtoa_r+0x818>
 8007e42:	2001      	movs	r0, #1
 8007e44:	e030      	b.n	8007ea8 <_dtoa_r+0x828>
 8007e46:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007e48:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007e4c:	e795      	b.n	8007d7a <_dtoa_r+0x6fa>
 8007e4e:	9b07      	ldr	r3, [sp, #28]
 8007e50:	f109 37ff 	add.w	r7, r9, #4294967295
 8007e54:	42bb      	cmp	r3, r7
 8007e56:	bfbf      	itttt	lt
 8007e58:	9b07      	ldrlt	r3, [sp, #28]
 8007e5a:	9707      	strlt	r7, [sp, #28]
 8007e5c:	1afa      	sublt	r2, r7, r3
 8007e5e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007e60:	bfbb      	ittet	lt
 8007e62:	189b      	addlt	r3, r3, r2
 8007e64:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007e66:	1bdf      	subge	r7, r3, r7
 8007e68:	2700      	movlt	r7, #0
 8007e6a:	f1b9 0f00 	cmp.w	r9, #0
 8007e6e:	bfb5      	itete	lt
 8007e70:	9b05      	ldrlt	r3, [sp, #20]
 8007e72:	9d05      	ldrge	r5, [sp, #20]
 8007e74:	eba3 0509 	sublt.w	r5, r3, r9
 8007e78:	464b      	movge	r3, r9
 8007e7a:	bfb8      	it	lt
 8007e7c:	2300      	movlt	r3, #0
 8007e7e:	e77e      	b.n	8007d7e <_dtoa_r+0x6fe>
 8007e80:	9f07      	ldr	r7, [sp, #28]
 8007e82:	9d05      	ldr	r5, [sp, #20]
 8007e84:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8007e86:	e783      	b.n	8007d90 <_dtoa_r+0x710>
 8007e88:	9a07      	ldr	r2, [sp, #28]
 8007e8a:	e7ab      	b.n	8007de4 <_dtoa_r+0x764>
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	e7d4      	b.n	8007e3a <_dtoa_r+0x7ba>
 8007e90:	9b00      	ldr	r3, [sp, #0]
 8007e92:	e7d2      	b.n	8007e3a <_dtoa_r+0x7ba>
 8007e94:	2300      	movs	r3, #0
 8007e96:	9307      	str	r3, [sp, #28]
 8007e98:	693b      	ldr	r3, [r7, #16]
 8007e9a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8007e9e:	6918      	ldr	r0, [r3, #16]
 8007ea0:	f000 fdc9 	bl	8008a36 <__hi0bits>
 8007ea4:	f1c0 0020 	rsb	r0, r0, #32
 8007ea8:	4440      	add	r0, r8
 8007eaa:	f010 001f 	ands.w	r0, r0, #31
 8007eae:	d047      	beq.n	8007f40 <_dtoa_r+0x8c0>
 8007eb0:	f1c0 0320 	rsb	r3, r0, #32
 8007eb4:	2b04      	cmp	r3, #4
 8007eb6:	dd3b      	ble.n	8007f30 <_dtoa_r+0x8b0>
 8007eb8:	9b05      	ldr	r3, [sp, #20]
 8007eba:	f1c0 001c 	rsb	r0, r0, #28
 8007ebe:	4403      	add	r3, r0
 8007ec0:	9305      	str	r3, [sp, #20]
 8007ec2:	4405      	add	r5, r0
 8007ec4:	4480      	add	r8, r0
 8007ec6:	9b05      	ldr	r3, [sp, #20]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	dd05      	ble.n	8007ed8 <_dtoa_r+0x858>
 8007ecc:	461a      	mov	r2, r3
 8007ece:	9904      	ldr	r1, [sp, #16]
 8007ed0:	4620      	mov	r0, r4
 8007ed2:	f000 feeb 	bl	8008cac <__lshift>
 8007ed6:	9004      	str	r0, [sp, #16]
 8007ed8:	f1b8 0f00 	cmp.w	r8, #0
 8007edc:	dd05      	ble.n	8007eea <_dtoa_r+0x86a>
 8007ede:	4639      	mov	r1, r7
 8007ee0:	4642      	mov	r2, r8
 8007ee2:	4620      	mov	r0, r4
 8007ee4:	f000 fee2 	bl	8008cac <__lshift>
 8007ee8:	4607      	mov	r7, r0
 8007eea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007eec:	b353      	cbz	r3, 8007f44 <_dtoa_r+0x8c4>
 8007eee:	4639      	mov	r1, r7
 8007ef0:	9804      	ldr	r0, [sp, #16]
 8007ef2:	f000 ff2f 	bl	8008d54 <__mcmp>
 8007ef6:	2800      	cmp	r0, #0
 8007ef8:	da24      	bge.n	8007f44 <_dtoa_r+0x8c4>
 8007efa:	2300      	movs	r3, #0
 8007efc:	220a      	movs	r2, #10
 8007efe:	9904      	ldr	r1, [sp, #16]
 8007f00:	4620      	mov	r0, r4
 8007f02:	f000 fd1f 	bl	8008944 <__multadd>
 8007f06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f08:	9004      	str	r0, [sp, #16]
 8007f0a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	f000 814d 	beq.w	80081ae <_dtoa_r+0xb2e>
 8007f14:	2300      	movs	r3, #0
 8007f16:	4631      	mov	r1, r6
 8007f18:	220a      	movs	r2, #10
 8007f1a:	4620      	mov	r0, r4
 8007f1c:	f000 fd12 	bl	8008944 <__multadd>
 8007f20:	9b02      	ldr	r3, [sp, #8]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	4606      	mov	r6, r0
 8007f26:	dc4f      	bgt.n	8007fc8 <_dtoa_r+0x948>
 8007f28:	9b06      	ldr	r3, [sp, #24]
 8007f2a:	2b02      	cmp	r3, #2
 8007f2c:	dd4c      	ble.n	8007fc8 <_dtoa_r+0x948>
 8007f2e:	e011      	b.n	8007f54 <_dtoa_r+0x8d4>
 8007f30:	d0c9      	beq.n	8007ec6 <_dtoa_r+0x846>
 8007f32:	9a05      	ldr	r2, [sp, #20]
 8007f34:	331c      	adds	r3, #28
 8007f36:	441a      	add	r2, r3
 8007f38:	9205      	str	r2, [sp, #20]
 8007f3a:	441d      	add	r5, r3
 8007f3c:	4498      	add	r8, r3
 8007f3e:	e7c2      	b.n	8007ec6 <_dtoa_r+0x846>
 8007f40:	4603      	mov	r3, r0
 8007f42:	e7f6      	b.n	8007f32 <_dtoa_r+0x8b2>
 8007f44:	f1b9 0f00 	cmp.w	r9, #0
 8007f48:	dc38      	bgt.n	8007fbc <_dtoa_r+0x93c>
 8007f4a:	9b06      	ldr	r3, [sp, #24]
 8007f4c:	2b02      	cmp	r3, #2
 8007f4e:	dd35      	ble.n	8007fbc <_dtoa_r+0x93c>
 8007f50:	f8cd 9008 	str.w	r9, [sp, #8]
 8007f54:	9b02      	ldr	r3, [sp, #8]
 8007f56:	b963      	cbnz	r3, 8007f72 <_dtoa_r+0x8f2>
 8007f58:	4639      	mov	r1, r7
 8007f5a:	2205      	movs	r2, #5
 8007f5c:	4620      	mov	r0, r4
 8007f5e:	f000 fcf1 	bl	8008944 <__multadd>
 8007f62:	4601      	mov	r1, r0
 8007f64:	4607      	mov	r7, r0
 8007f66:	9804      	ldr	r0, [sp, #16]
 8007f68:	f000 fef4 	bl	8008d54 <__mcmp>
 8007f6c:	2800      	cmp	r0, #0
 8007f6e:	f73f adcc 	bgt.w	8007b0a <_dtoa_r+0x48a>
 8007f72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f74:	465d      	mov	r5, fp
 8007f76:	ea6f 0a03 	mvn.w	sl, r3
 8007f7a:	f04f 0900 	mov.w	r9, #0
 8007f7e:	4639      	mov	r1, r7
 8007f80:	4620      	mov	r0, r4
 8007f82:	f000 fcc8 	bl	8008916 <_Bfree>
 8007f86:	2e00      	cmp	r6, #0
 8007f88:	f43f aeb7 	beq.w	8007cfa <_dtoa_r+0x67a>
 8007f8c:	f1b9 0f00 	cmp.w	r9, #0
 8007f90:	d005      	beq.n	8007f9e <_dtoa_r+0x91e>
 8007f92:	45b1      	cmp	r9, r6
 8007f94:	d003      	beq.n	8007f9e <_dtoa_r+0x91e>
 8007f96:	4649      	mov	r1, r9
 8007f98:	4620      	mov	r0, r4
 8007f9a:	f000 fcbc 	bl	8008916 <_Bfree>
 8007f9e:	4631      	mov	r1, r6
 8007fa0:	4620      	mov	r0, r4
 8007fa2:	f000 fcb8 	bl	8008916 <_Bfree>
 8007fa6:	e6a8      	b.n	8007cfa <_dtoa_r+0x67a>
 8007fa8:	2700      	movs	r7, #0
 8007faa:	463e      	mov	r6, r7
 8007fac:	e7e1      	b.n	8007f72 <_dtoa_r+0x8f2>
 8007fae:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007fb2:	463e      	mov	r6, r7
 8007fb4:	e5a9      	b.n	8007b0a <_dtoa_r+0x48a>
 8007fb6:	bf00      	nop
 8007fb8:	40240000 	.word	0x40240000
 8007fbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fbe:	f8cd 9008 	str.w	r9, [sp, #8]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	f000 80fa 	beq.w	80081bc <_dtoa_r+0xb3c>
 8007fc8:	2d00      	cmp	r5, #0
 8007fca:	dd05      	ble.n	8007fd8 <_dtoa_r+0x958>
 8007fcc:	4631      	mov	r1, r6
 8007fce:	462a      	mov	r2, r5
 8007fd0:	4620      	mov	r0, r4
 8007fd2:	f000 fe6b 	bl	8008cac <__lshift>
 8007fd6:	4606      	mov	r6, r0
 8007fd8:	9b07      	ldr	r3, [sp, #28]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d04c      	beq.n	8008078 <_dtoa_r+0x9f8>
 8007fde:	6871      	ldr	r1, [r6, #4]
 8007fe0:	4620      	mov	r0, r4
 8007fe2:	f000 fc64 	bl	80088ae <_Balloc>
 8007fe6:	6932      	ldr	r2, [r6, #16]
 8007fe8:	3202      	adds	r2, #2
 8007fea:	4605      	mov	r5, r0
 8007fec:	0092      	lsls	r2, r2, #2
 8007fee:	f106 010c 	add.w	r1, r6, #12
 8007ff2:	300c      	adds	r0, #12
 8007ff4:	f000 fc50 	bl	8008898 <memcpy>
 8007ff8:	2201      	movs	r2, #1
 8007ffa:	4629      	mov	r1, r5
 8007ffc:	4620      	mov	r0, r4
 8007ffe:	f000 fe55 	bl	8008cac <__lshift>
 8008002:	9b00      	ldr	r3, [sp, #0]
 8008004:	f8cd b014 	str.w	fp, [sp, #20]
 8008008:	f003 0301 	and.w	r3, r3, #1
 800800c:	46b1      	mov	r9, r6
 800800e:	9307      	str	r3, [sp, #28]
 8008010:	4606      	mov	r6, r0
 8008012:	4639      	mov	r1, r7
 8008014:	9804      	ldr	r0, [sp, #16]
 8008016:	f7ff faa5 	bl	8007564 <quorem>
 800801a:	4649      	mov	r1, r9
 800801c:	4605      	mov	r5, r0
 800801e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008022:	9804      	ldr	r0, [sp, #16]
 8008024:	f000 fe96 	bl	8008d54 <__mcmp>
 8008028:	4632      	mov	r2, r6
 800802a:	9000      	str	r0, [sp, #0]
 800802c:	4639      	mov	r1, r7
 800802e:	4620      	mov	r0, r4
 8008030:	f000 feaa 	bl	8008d88 <__mdiff>
 8008034:	68c3      	ldr	r3, [r0, #12]
 8008036:	4602      	mov	r2, r0
 8008038:	bb03      	cbnz	r3, 800807c <_dtoa_r+0x9fc>
 800803a:	4601      	mov	r1, r0
 800803c:	9008      	str	r0, [sp, #32]
 800803e:	9804      	ldr	r0, [sp, #16]
 8008040:	f000 fe88 	bl	8008d54 <__mcmp>
 8008044:	9a08      	ldr	r2, [sp, #32]
 8008046:	4603      	mov	r3, r0
 8008048:	4611      	mov	r1, r2
 800804a:	4620      	mov	r0, r4
 800804c:	9308      	str	r3, [sp, #32]
 800804e:	f000 fc62 	bl	8008916 <_Bfree>
 8008052:	9b08      	ldr	r3, [sp, #32]
 8008054:	b9a3      	cbnz	r3, 8008080 <_dtoa_r+0xa00>
 8008056:	9a06      	ldr	r2, [sp, #24]
 8008058:	b992      	cbnz	r2, 8008080 <_dtoa_r+0xa00>
 800805a:	9a07      	ldr	r2, [sp, #28]
 800805c:	b982      	cbnz	r2, 8008080 <_dtoa_r+0xa00>
 800805e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008062:	d029      	beq.n	80080b8 <_dtoa_r+0xa38>
 8008064:	9b00      	ldr	r3, [sp, #0]
 8008066:	2b00      	cmp	r3, #0
 8008068:	dd01      	ble.n	800806e <_dtoa_r+0x9ee>
 800806a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800806e:	9b05      	ldr	r3, [sp, #20]
 8008070:	1c5d      	adds	r5, r3, #1
 8008072:	f883 8000 	strb.w	r8, [r3]
 8008076:	e782      	b.n	8007f7e <_dtoa_r+0x8fe>
 8008078:	4630      	mov	r0, r6
 800807a:	e7c2      	b.n	8008002 <_dtoa_r+0x982>
 800807c:	2301      	movs	r3, #1
 800807e:	e7e3      	b.n	8008048 <_dtoa_r+0x9c8>
 8008080:	9a00      	ldr	r2, [sp, #0]
 8008082:	2a00      	cmp	r2, #0
 8008084:	db04      	blt.n	8008090 <_dtoa_r+0xa10>
 8008086:	d125      	bne.n	80080d4 <_dtoa_r+0xa54>
 8008088:	9a06      	ldr	r2, [sp, #24]
 800808a:	bb1a      	cbnz	r2, 80080d4 <_dtoa_r+0xa54>
 800808c:	9a07      	ldr	r2, [sp, #28]
 800808e:	bb0a      	cbnz	r2, 80080d4 <_dtoa_r+0xa54>
 8008090:	2b00      	cmp	r3, #0
 8008092:	ddec      	ble.n	800806e <_dtoa_r+0x9ee>
 8008094:	2201      	movs	r2, #1
 8008096:	9904      	ldr	r1, [sp, #16]
 8008098:	4620      	mov	r0, r4
 800809a:	f000 fe07 	bl	8008cac <__lshift>
 800809e:	4639      	mov	r1, r7
 80080a0:	9004      	str	r0, [sp, #16]
 80080a2:	f000 fe57 	bl	8008d54 <__mcmp>
 80080a6:	2800      	cmp	r0, #0
 80080a8:	dc03      	bgt.n	80080b2 <_dtoa_r+0xa32>
 80080aa:	d1e0      	bne.n	800806e <_dtoa_r+0x9ee>
 80080ac:	f018 0f01 	tst.w	r8, #1
 80080b0:	d0dd      	beq.n	800806e <_dtoa_r+0x9ee>
 80080b2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80080b6:	d1d8      	bne.n	800806a <_dtoa_r+0x9ea>
 80080b8:	9b05      	ldr	r3, [sp, #20]
 80080ba:	9a05      	ldr	r2, [sp, #20]
 80080bc:	1c5d      	adds	r5, r3, #1
 80080be:	2339      	movs	r3, #57	; 0x39
 80080c0:	7013      	strb	r3, [r2, #0]
 80080c2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80080c6:	2b39      	cmp	r3, #57	; 0x39
 80080c8:	f105 32ff 	add.w	r2, r5, #4294967295
 80080cc:	d04f      	beq.n	800816e <_dtoa_r+0xaee>
 80080ce:	3301      	adds	r3, #1
 80080d0:	7013      	strb	r3, [r2, #0]
 80080d2:	e754      	b.n	8007f7e <_dtoa_r+0x8fe>
 80080d4:	9a05      	ldr	r2, [sp, #20]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	f102 0501 	add.w	r5, r2, #1
 80080dc:	dd06      	ble.n	80080ec <_dtoa_r+0xa6c>
 80080de:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80080e2:	d0e9      	beq.n	80080b8 <_dtoa_r+0xa38>
 80080e4:	f108 0801 	add.w	r8, r8, #1
 80080e8:	9b05      	ldr	r3, [sp, #20]
 80080ea:	e7c2      	b.n	8008072 <_dtoa_r+0x9f2>
 80080ec:	9a02      	ldr	r2, [sp, #8]
 80080ee:	f805 8c01 	strb.w	r8, [r5, #-1]
 80080f2:	eba5 030b 	sub.w	r3, r5, fp
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d021      	beq.n	800813e <_dtoa_r+0xabe>
 80080fa:	2300      	movs	r3, #0
 80080fc:	220a      	movs	r2, #10
 80080fe:	9904      	ldr	r1, [sp, #16]
 8008100:	4620      	mov	r0, r4
 8008102:	f000 fc1f 	bl	8008944 <__multadd>
 8008106:	45b1      	cmp	r9, r6
 8008108:	9004      	str	r0, [sp, #16]
 800810a:	f04f 0300 	mov.w	r3, #0
 800810e:	f04f 020a 	mov.w	r2, #10
 8008112:	4649      	mov	r1, r9
 8008114:	4620      	mov	r0, r4
 8008116:	d105      	bne.n	8008124 <_dtoa_r+0xaa4>
 8008118:	f000 fc14 	bl	8008944 <__multadd>
 800811c:	4681      	mov	r9, r0
 800811e:	4606      	mov	r6, r0
 8008120:	9505      	str	r5, [sp, #20]
 8008122:	e776      	b.n	8008012 <_dtoa_r+0x992>
 8008124:	f000 fc0e 	bl	8008944 <__multadd>
 8008128:	4631      	mov	r1, r6
 800812a:	4681      	mov	r9, r0
 800812c:	2300      	movs	r3, #0
 800812e:	220a      	movs	r2, #10
 8008130:	4620      	mov	r0, r4
 8008132:	f000 fc07 	bl	8008944 <__multadd>
 8008136:	4606      	mov	r6, r0
 8008138:	e7f2      	b.n	8008120 <_dtoa_r+0xaa0>
 800813a:	f04f 0900 	mov.w	r9, #0
 800813e:	2201      	movs	r2, #1
 8008140:	9904      	ldr	r1, [sp, #16]
 8008142:	4620      	mov	r0, r4
 8008144:	f000 fdb2 	bl	8008cac <__lshift>
 8008148:	4639      	mov	r1, r7
 800814a:	9004      	str	r0, [sp, #16]
 800814c:	f000 fe02 	bl	8008d54 <__mcmp>
 8008150:	2800      	cmp	r0, #0
 8008152:	dcb6      	bgt.n	80080c2 <_dtoa_r+0xa42>
 8008154:	d102      	bne.n	800815c <_dtoa_r+0xadc>
 8008156:	f018 0f01 	tst.w	r8, #1
 800815a:	d1b2      	bne.n	80080c2 <_dtoa_r+0xa42>
 800815c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008160:	2b30      	cmp	r3, #48	; 0x30
 8008162:	f105 32ff 	add.w	r2, r5, #4294967295
 8008166:	f47f af0a 	bne.w	8007f7e <_dtoa_r+0x8fe>
 800816a:	4615      	mov	r5, r2
 800816c:	e7f6      	b.n	800815c <_dtoa_r+0xadc>
 800816e:	4593      	cmp	fp, r2
 8008170:	d105      	bne.n	800817e <_dtoa_r+0xafe>
 8008172:	2331      	movs	r3, #49	; 0x31
 8008174:	f10a 0a01 	add.w	sl, sl, #1
 8008178:	f88b 3000 	strb.w	r3, [fp]
 800817c:	e6ff      	b.n	8007f7e <_dtoa_r+0x8fe>
 800817e:	4615      	mov	r5, r2
 8008180:	e79f      	b.n	80080c2 <_dtoa_r+0xa42>
 8008182:	f8df b064 	ldr.w	fp, [pc, #100]	; 80081e8 <_dtoa_r+0xb68>
 8008186:	e007      	b.n	8008198 <_dtoa_r+0xb18>
 8008188:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800818a:	f8df b060 	ldr.w	fp, [pc, #96]	; 80081ec <_dtoa_r+0xb6c>
 800818e:	b11b      	cbz	r3, 8008198 <_dtoa_r+0xb18>
 8008190:	f10b 0308 	add.w	r3, fp, #8
 8008194:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008196:	6013      	str	r3, [r2, #0]
 8008198:	4658      	mov	r0, fp
 800819a:	b017      	add	sp, #92	; 0x5c
 800819c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081a0:	9b06      	ldr	r3, [sp, #24]
 80081a2:	2b01      	cmp	r3, #1
 80081a4:	f77f ae35 	ble.w	8007e12 <_dtoa_r+0x792>
 80081a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80081aa:	9307      	str	r3, [sp, #28]
 80081ac:	e649      	b.n	8007e42 <_dtoa_r+0x7c2>
 80081ae:	9b02      	ldr	r3, [sp, #8]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	dc03      	bgt.n	80081bc <_dtoa_r+0xb3c>
 80081b4:	9b06      	ldr	r3, [sp, #24]
 80081b6:	2b02      	cmp	r3, #2
 80081b8:	f73f aecc 	bgt.w	8007f54 <_dtoa_r+0x8d4>
 80081bc:	465d      	mov	r5, fp
 80081be:	4639      	mov	r1, r7
 80081c0:	9804      	ldr	r0, [sp, #16]
 80081c2:	f7ff f9cf 	bl	8007564 <quorem>
 80081c6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80081ca:	f805 8b01 	strb.w	r8, [r5], #1
 80081ce:	9a02      	ldr	r2, [sp, #8]
 80081d0:	eba5 030b 	sub.w	r3, r5, fp
 80081d4:	429a      	cmp	r2, r3
 80081d6:	ddb0      	ble.n	800813a <_dtoa_r+0xaba>
 80081d8:	2300      	movs	r3, #0
 80081da:	220a      	movs	r2, #10
 80081dc:	9904      	ldr	r1, [sp, #16]
 80081de:	4620      	mov	r0, r4
 80081e0:	f000 fbb0 	bl	8008944 <__multadd>
 80081e4:	9004      	str	r0, [sp, #16]
 80081e6:	e7ea      	b.n	80081be <_dtoa_r+0xb3e>
 80081e8:	08009730 	.word	0x08009730
 80081ec:	080097b0 	.word	0x080097b0

080081f0 <rshift>:
 80081f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081f2:	6906      	ldr	r6, [r0, #16]
 80081f4:	114b      	asrs	r3, r1, #5
 80081f6:	429e      	cmp	r6, r3
 80081f8:	f100 0414 	add.w	r4, r0, #20
 80081fc:	dd30      	ble.n	8008260 <rshift+0x70>
 80081fe:	f011 011f 	ands.w	r1, r1, #31
 8008202:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8008206:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800820a:	d108      	bne.n	800821e <rshift+0x2e>
 800820c:	4621      	mov	r1, r4
 800820e:	42b2      	cmp	r2, r6
 8008210:	460b      	mov	r3, r1
 8008212:	d211      	bcs.n	8008238 <rshift+0x48>
 8008214:	f852 3b04 	ldr.w	r3, [r2], #4
 8008218:	f841 3b04 	str.w	r3, [r1], #4
 800821c:	e7f7      	b.n	800820e <rshift+0x1e>
 800821e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8008222:	f1c1 0c20 	rsb	ip, r1, #32
 8008226:	40cd      	lsrs	r5, r1
 8008228:	3204      	adds	r2, #4
 800822a:	4623      	mov	r3, r4
 800822c:	42b2      	cmp	r2, r6
 800822e:	4617      	mov	r7, r2
 8008230:	d30c      	bcc.n	800824c <rshift+0x5c>
 8008232:	601d      	str	r5, [r3, #0]
 8008234:	b105      	cbz	r5, 8008238 <rshift+0x48>
 8008236:	3304      	adds	r3, #4
 8008238:	1b1a      	subs	r2, r3, r4
 800823a:	42a3      	cmp	r3, r4
 800823c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008240:	bf08      	it	eq
 8008242:	2300      	moveq	r3, #0
 8008244:	6102      	str	r2, [r0, #16]
 8008246:	bf08      	it	eq
 8008248:	6143      	streq	r3, [r0, #20]
 800824a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800824c:	683f      	ldr	r7, [r7, #0]
 800824e:	fa07 f70c 	lsl.w	r7, r7, ip
 8008252:	433d      	orrs	r5, r7
 8008254:	f843 5b04 	str.w	r5, [r3], #4
 8008258:	f852 5b04 	ldr.w	r5, [r2], #4
 800825c:	40cd      	lsrs	r5, r1
 800825e:	e7e5      	b.n	800822c <rshift+0x3c>
 8008260:	4623      	mov	r3, r4
 8008262:	e7e9      	b.n	8008238 <rshift+0x48>

08008264 <__hexdig_fun>:
 8008264:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008268:	2b09      	cmp	r3, #9
 800826a:	d802      	bhi.n	8008272 <__hexdig_fun+0xe>
 800826c:	3820      	subs	r0, #32
 800826e:	b2c0      	uxtb	r0, r0
 8008270:	4770      	bx	lr
 8008272:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008276:	2b05      	cmp	r3, #5
 8008278:	d801      	bhi.n	800827e <__hexdig_fun+0x1a>
 800827a:	3847      	subs	r0, #71	; 0x47
 800827c:	e7f7      	b.n	800826e <__hexdig_fun+0xa>
 800827e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008282:	2b05      	cmp	r3, #5
 8008284:	d801      	bhi.n	800828a <__hexdig_fun+0x26>
 8008286:	3827      	subs	r0, #39	; 0x27
 8008288:	e7f1      	b.n	800826e <__hexdig_fun+0xa>
 800828a:	2000      	movs	r0, #0
 800828c:	4770      	bx	lr

0800828e <__gethex>:
 800828e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008292:	b08b      	sub	sp, #44	; 0x2c
 8008294:	468a      	mov	sl, r1
 8008296:	9002      	str	r0, [sp, #8]
 8008298:	9816      	ldr	r0, [sp, #88]	; 0x58
 800829a:	9306      	str	r3, [sp, #24]
 800829c:	4690      	mov	r8, r2
 800829e:	f000 fad0 	bl	8008842 <__localeconv_l>
 80082a2:	6803      	ldr	r3, [r0, #0]
 80082a4:	9303      	str	r3, [sp, #12]
 80082a6:	4618      	mov	r0, r3
 80082a8:	f7f7 ff92 	bl	80001d0 <strlen>
 80082ac:	9b03      	ldr	r3, [sp, #12]
 80082ae:	9001      	str	r0, [sp, #4]
 80082b0:	4403      	add	r3, r0
 80082b2:	f04f 0b00 	mov.w	fp, #0
 80082b6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80082ba:	9307      	str	r3, [sp, #28]
 80082bc:	f8da 3000 	ldr.w	r3, [sl]
 80082c0:	3302      	adds	r3, #2
 80082c2:	461f      	mov	r7, r3
 80082c4:	f813 0b01 	ldrb.w	r0, [r3], #1
 80082c8:	2830      	cmp	r0, #48	; 0x30
 80082ca:	d06c      	beq.n	80083a6 <__gethex+0x118>
 80082cc:	f7ff ffca 	bl	8008264 <__hexdig_fun>
 80082d0:	4604      	mov	r4, r0
 80082d2:	2800      	cmp	r0, #0
 80082d4:	d16a      	bne.n	80083ac <__gethex+0x11e>
 80082d6:	9a01      	ldr	r2, [sp, #4]
 80082d8:	9903      	ldr	r1, [sp, #12]
 80082da:	4638      	mov	r0, r7
 80082dc:	f001 f8fe 	bl	80094dc <strncmp>
 80082e0:	2800      	cmp	r0, #0
 80082e2:	d166      	bne.n	80083b2 <__gethex+0x124>
 80082e4:	9b01      	ldr	r3, [sp, #4]
 80082e6:	5cf8      	ldrb	r0, [r7, r3]
 80082e8:	18fe      	adds	r6, r7, r3
 80082ea:	f7ff ffbb 	bl	8008264 <__hexdig_fun>
 80082ee:	2800      	cmp	r0, #0
 80082f0:	d062      	beq.n	80083b8 <__gethex+0x12a>
 80082f2:	4633      	mov	r3, r6
 80082f4:	7818      	ldrb	r0, [r3, #0]
 80082f6:	2830      	cmp	r0, #48	; 0x30
 80082f8:	461f      	mov	r7, r3
 80082fa:	f103 0301 	add.w	r3, r3, #1
 80082fe:	d0f9      	beq.n	80082f4 <__gethex+0x66>
 8008300:	f7ff ffb0 	bl	8008264 <__hexdig_fun>
 8008304:	fab0 f580 	clz	r5, r0
 8008308:	096d      	lsrs	r5, r5, #5
 800830a:	4634      	mov	r4, r6
 800830c:	f04f 0b01 	mov.w	fp, #1
 8008310:	463a      	mov	r2, r7
 8008312:	4616      	mov	r6, r2
 8008314:	3201      	adds	r2, #1
 8008316:	7830      	ldrb	r0, [r6, #0]
 8008318:	f7ff ffa4 	bl	8008264 <__hexdig_fun>
 800831c:	2800      	cmp	r0, #0
 800831e:	d1f8      	bne.n	8008312 <__gethex+0x84>
 8008320:	9a01      	ldr	r2, [sp, #4]
 8008322:	9903      	ldr	r1, [sp, #12]
 8008324:	4630      	mov	r0, r6
 8008326:	f001 f8d9 	bl	80094dc <strncmp>
 800832a:	b950      	cbnz	r0, 8008342 <__gethex+0xb4>
 800832c:	b954      	cbnz	r4, 8008344 <__gethex+0xb6>
 800832e:	9b01      	ldr	r3, [sp, #4]
 8008330:	18f4      	adds	r4, r6, r3
 8008332:	4622      	mov	r2, r4
 8008334:	4616      	mov	r6, r2
 8008336:	3201      	adds	r2, #1
 8008338:	7830      	ldrb	r0, [r6, #0]
 800833a:	f7ff ff93 	bl	8008264 <__hexdig_fun>
 800833e:	2800      	cmp	r0, #0
 8008340:	d1f8      	bne.n	8008334 <__gethex+0xa6>
 8008342:	b10c      	cbz	r4, 8008348 <__gethex+0xba>
 8008344:	1ba4      	subs	r4, r4, r6
 8008346:	00a4      	lsls	r4, r4, #2
 8008348:	7833      	ldrb	r3, [r6, #0]
 800834a:	2b50      	cmp	r3, #80	; 0x50
 800834c:	d001      	beq.n	8008352 <__gethex+0xc4>
 800834e:	2b70      	cmp	r3, #112	; 0x70
 8008350:	d140      	bne.n	80083d4 <__gethex+0x146>
 8008352:	7873      	ldrb	r3, [r6, #1]
 8008354:	2b2b      	cmp	r3, #43	; 0x2b
 8008356:	d031      	beq.n	80083bc <__gethex+0x12e>
 8008358:	2b2d      	cmp	r3, #45	; 0x2d
 800835a:	d033      	beq.n	80083c4 <__gethex+0x136>
 800835c:	1c71      	adds	r1, r6, #1
 800835e:	f04f 0900 	mov.w	r9, #0
 8008362:	7808      	ldrb	r0, [r1, #0]
 8008364:	f7ff ff7e 	bl	8008264 <__hexdig_fun>
 8008368:	1e43      	subs	r3, r0, #1
 800836a:	b2db      	uxtb	r3, r3
 800836c:	2b18      	cmp	r3, #24
 800836e:	d831      	bhi.n	80083d4 <__gethex+0x146>
 8008370:	f1a0 0210 	sub.w	r2, r0, #16
 8008374:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008378:	f7ff ff74 	bl	8008264 <__hexdig_fun>
 800837c:	1e43      	subs	r3, r0, #1
 800837e:	b2db      	uxtb	r3, r3
 8008380:	2b18      	cmp	r3, #24
 8008382:	d922      	bls.n	80083ca <__gethex+0x13c>
 8008384:	f1b9 0f00 	cmp.w	r9, #0
 8008388:	d000      	beq.n	800838c <__gethex+0xfe>
 800838a:	4252      	negs	r2, r2
 800838c:	4414      	add	r4, r2
 800838e:	f8ca 1000 	str.w	r1, [sl]
 8008392:	b30d      	cbz	r5, 80083d8 <__gethex+0x14a>
 8008394:	f1bb 0f00 	cmp.w	fp, #0
 8008398:	bf0c      	ite	eq
 800839a:	2706      	moveq	r7, #6
 800839c:	2700      	movne	r7, #0
 800839e:	4638      	mov	r0, r7
 80083a0:	b00b      	add	sp, #44	; 0x2c
 80083a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083a6:	f10b 0b01 	add.w	fp, fp, #1
 80083aa:	e78a      	b.n	80082c2 <__gethex+0x34>
 80083ac:	2500      	movs	r5, #0
 80083ae:	462c      	mov	r4, r5
 80083b0:	e7ae      	b.n	8008310 <__gethex+0x82>
 80083b2:	463e      	mov	r6, r7
 80083b4:	2501      	movs	r5, #1
 80083b6:	e7c7      	b.n	8008348 <__gethex+0xba>
 80083b8:	4604      	mov	r4, r0
 80083ba:	e7fb      	b.n	80083b4 <__gethex+0x126>
 80083bc:	f04f 0900 	mov.w	r9, #0
 80083c0:	1cb1      	adds	r1, r6, #2
 80083c2:	e7ce      	b.n	8008362 <__gethex+0xd4>
 80083c4:	f04f 0901 	mov.w	r9, #1
 80083c8:	e7fa      	b.n	80083c0 <__gethex+0x132>
 80083ca:	230a      	movs	r3, #10
 80083cc:	fb03 0202 	mla	r2, r3, r2, r0
 80083d0:	3a10      	subs	r2, #16
 80083d2:	e7cf      	b.n	8008374 <__gethex+0xe6>
 80083d4:	4631      	mov	r1, r6
 80083d6:	e7da      	b.n	800838e <__gethex+0x100>
 80083d8:	1bf3      	subs	r3, r6, r7
 80083da:	3b01      	subs	r3, #1
 80083dc:	4629      	mov	r1, r5
 80083de:	2b07      	cmp	r3, #7
 80083e0:	dc49      	bgt.n	8008476 <__gethex+0x1e8>
 80083e2:	9802      	ldr	r0, [sp, #8]
 80083e4:	f000 fa63 	bl	80088ae <_Balloc>
 80083e8:	9b01      	ldr	r3, [sp, #4]
 80083ea:	f100 0914 	add.w	r9, r0, #20
 80083ee:	f04f 0b00 	mov.w	fp, #0
 80083f2:	f1c3 0301 	rsb	r3, r3, #1
 80083f6:	4605      	mov	r5, r0
 80083f8:	f8cd 9010 	str.w	r9, [sp, #16]
 80083fc:	46da      	mov	sl, fp
 80083fe:	9308      	str	r3, [sp, #32]
 8008400:	42b7      	cmp	r7, r6
 8008402:	d33b      	bcc.n	800847c <__gethex+0x1ee>
 8008404:	9804      	ldr	r0, [sp, #16]
 8008406:	f840 ab04 	str.w	sl, [r0], #4
 800840a:	eba0 0009 	sub.w	r0, r0, r9
 800840e:	1080      	asrs	r0, r0, #2
 8008410:	6128      	str	r0, [r5, #16]
 8008412:	0147      	lsls	r7, r0, #5
 8008414:	4650      	mov	r0, sl
 8008416:	f000 fb0e 	bl	8008a36 <__hi0bits>
 800841a:	f8d8 6000 	ldr.w	r6, [r8]
 800841e:	1a3f      	subs	r7, r7, r0
 8008420:	42b7      	cmp	r7, r6
 8008422:	dd64      	ble.n	80084ee <__gethex+0x260>
 8008424:	1bbf      	subs	r7, r7, r6
 8008426:	4639      	mov	r1, r7
 8008428:	4628      	mov	r0, r5
 800842a:	f000 fe1d 	bl	8009068 <__any_on>
 800842e:	4682      	mov	sl, r0
 8008430:	b178      	cbz	r0, 8008452 <__gethex+0x1c4>
 8008432:	1e7b      	subs	r3, r7, #1
 8008434:	1159      	asrs	r1, r3, #5
 8008436:	f003 021f 	and.w	r2, r3, #31
 800843a:	f04f 0a01 	mov.w	sl, #1
 800843e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008442:	fa0a f202 	lsl.w	r2, sl, r2
 8008446:	420a      	tst	r2, r1
 8008448:	d003      	beq.n	8008452 <__gethex+0x1c4>
 800844a:	4553      	cmp	r3, sl
 800844c:	dc46      	bgt.n	80084dc <__gethex+0x24e>
 800844e:	f04f 0a02 	mov.w	sl, #2
 8008452:	4639      	mov	r1, r7
 8008454:	4628      	mov	r0, r5
 8008456:	f7ff fecb 	bl	80081f0 <rshift>
 800845a:	443c      	add	r4, r7
 800845c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008460:	42a3      	cmp	r3, r4
 8008462:	da52      	bge.n	800850a <__gethex+0x27c>
 8008464:	4629      	mov	r1, r5
 8008466:	9802      	ldr	r0, [sp, #8]
 8008468:	f000 fa55 	bl	8008916 <_Bfree>
 800846c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800846e:	2300      	movs	r3, #0
 8008470:	6013      	str	r3, [r2, #0]
 8008472:	27a3      	movs	r7, #163	; 0xa3
 8008474:	e793      	b.n	800839e <__gethex+0x110>
 8008476:	3101      	adds	r1, #1
 8008478:	105b      	asrs	r3, r3, #1
 800847a:	e7b0      	b.n	80083de <__gethex+0x150>
 800847c:	1e73      	subs	r3, r6, #1
 800847e:	9305      	str	r3, [sp, #20]
 8008480:	9a07      	ldr	r2, [sp, #28]
 8008482:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008486:	4293      	cmp	r3, r2
 8008488:	d018      	beq.n	80084bc <__gethex+0x22e>
 800848a:	f1bb 0f20 	cmp.w	fp, #32
 800848e:	d107      	bne.n	80084a0 <__gethex+0x212>
 8008490:	9b04      	ldr	r3, [sp, #16]
 8008492:	f8c3 a000 	str.w	sl, [r3]
 8008496:	3304      	adds	r3, #4
 8008498:	f04f 0a00 	mov.w	sl, #0
 800849c:	9304      	str	r3, [sp, #16]
 800849e:	46d3      	mov	fp, sl
 80084a0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80084a4:	f7ff fede 	bl	8008264 <__hexdig_fun>
 80084a8:	f000 000f 	and.w	r0, r0, #15
 80084ac:	fa00 f00b 	lsl.w	r0, r0, fp
 80084b0:	ea4a 0a00 	orr.w	sl, sl, r0
 80084b4:	f10b 0b04 	add.w	fp, fp, #4
 80084b8:	9b05      	ldr	r3, [sp, #20]
 80084ba:	e00d      	b.n	80084d8 <__gethex+0x24a>
 80084bc:	9b05      	ldr	r3, [sp, #20]
 80084be:	9a08      	ldr	r2, [sp, #32]
 80084c0:	4413      	add	r3, r2
 80084c2:	42bb      	cmp	r3, r7
 80084c4:	d3e1      	bcc.n	800848a <__gethex+0x1fc>
 80084c6:	4618      	mov	r0, r3
 80084c8:	9a01      	ldr	r2, [sp, #4]
 80084ca:	9903      	ldr	r1, [sp, #12]
 80084cc:	9309      	str	r3, [sp, #36]	; 0x24
 80084ce:	f001 f805 	bl	80094dc <strncmp>
 80084d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084d4:	2800      	cmp	r0, #0
 80084d6:	d1d8      	bne.n	800848a <__gethex+0x1fc>
 80084d8:	461e      	mov	r6, r3
 80084da:	e791      	b.n	8008400 <__gethex+0x172>
 80084dc:	1eb9      	subs	r1, r7, #2
 80084de:	4628      	mov	r0, r5
 80084e0:	f000 fdc2 	bl	8009068 <__any_on>
 80084e4:	2800      	cmp	r0, #0
 80084e6:	d0b2      	beq.n	800844e <__gethex+0x1c0>
 80084e8:	f04f 0a03 	mov.w	sl, #3
 80084ec:	e7b1      	b.n	8008452 <__gethex+0x1c4>
 80084ee:	da09      	bge.n	8008504 <__gethex+0x276>
 80084f0:	1bf7      	subs	r7, r6, r7
 80084f2:	4629      	mov	r1, r5
 80084f4:	463a      	mov	r2, r7
 80084f6:	9802      	ldr	r0, [sp, #8]
 80084f8:	f000 fbd8 	bl	8008cac <__lshift>
 80084fc:	1be4      	subs	r4, r4, r7
 80084fe:	4605      	mov	r5, r0
 8008500:	f100 0914 	add.w	r9, r0, #20
 8008504:	f04f 0a00 	mov.w	sl, #0
 8008508:	e7a8      	b.n	800845c <__gethex+0x1ce>
 800850a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800850e:	42a0      	cmp	r0, r4
 8008510:	dd6a      	ble.n	80085e8 <__gethex+0x35a>
 8008512:	1b04      	subs	r4, r0, r4
 8008514:	42a6      	cmp	r6, r4
 8008516:	dc2e      	bgt.n	8008576 <__gethex+0x2e8>
 8008518:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800851c:	2b02      	cmp	r3, #2
 800851e:	d022      	beq.n	8008566 <__gethex+0x2d8>
 8008520:	2b03      	cmp	r3, #3
 8008522:	d024      	beq.n	800856e <__gethex+0x2e0>
 8008524:	2b01      	cmp	r3, #1
 8008526:	d115      	bne.n	8008554 <__gethex+0x2c6>
 8008528:	42a6      	cmp	r6, r4
 800852a:	d113      	bne.n	8008554 <__gethex+0x2c6>
 800852c:	2e01      	cmp	r6, #1
 800852e:	dc0b      	bgt.n	8008548 <__gethex+0x2ba>
 8008530:	9a06      	ldr	r2, [sp, #24]
 8008532:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008536:	6013      	str	r3, [r2, #0]
 8008538:	2301      	movs	r3, #1
 800853a:	612b      	str	r3, [r5, #16]
 800853c:	f8c9 3000 	str.w	r3, [r9]
 8008540:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008542:	2762      	movs	r7, #98	; 0x62
 8008544:	601d      	str	r5, [r3, #0]
 8008546:	e72a      	b.n	800839e <__gethex+0x110>
 8008548:	1e71      	subs	r1, r6, #1
 800854a:	4628      	mov	r0, r5
 800854c:	f000 fd8c 	bl	8009068 <__any_on>
 8008550:	2800      	cmp	r0, #0
 8008552:	d1ed      	bne.n	8008530 <__gethex+0x2a2>
 8008554:	4629      	mov	r1, r5
 8008556:	9802      	ldr	r0, [sp, #8]
 8008558:	f000 f9dd 	bl	8008916 <_Bfree>
 800855c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800855e:	2300      	movs	r3, #0
 8008560:	6013      	str	r3, [r2, #0]
 8008562:	2750      	movs	r7, #80	; 0x50
 8008564:	e71b      	b.n	800839e <__gethex+0x110>
 8008566:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008568:	2b00      	cmp	r3, #0
 800856a:	d0e1      	beq.n	8008530 <__gethex+0x2a2>
 800856c:	e7f2      	b.n	8008554 <__gethex+0x2c6>
 800856e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008570:	2b00      	cmp	r3, #0
 8008572:	d1dd      	bne.n	8008530 <__gethex+0x2a2>
 8008574:	e7ee      	b.n	8008554 <__gethex+0x2c6>
 8008576:	1e67      	subs	r7, r4, #1
 8008578:	f1ba 0f00 	cmp.w	sl, #0
 800857c:	d131      	bne.n	80085e2 <__gethex+0x354>
 800857e:	b127      	cbz	r7, 800858a <__gethex+0x2fc>
 8008580:	4639      	mov	r1, r7
 8008582:	4628      	mov	r0, r5
 8008584:	f000 fd70 	bl	8009068 <__any_on>
 8008588:	4682      	mov	sl, r0
 800858a:	117a      	asrs	r2, r7, #5
 800858c:	2301      	movs	r3, #1
 800858e:	f007 071f 	and.w	r7, r7, #31
 8008592:	fa03 f707 	lsl.w	r7, r3, r7
 8008596:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800859a:	4621      	mov	r1, r4
 800859c:	421f      	tst	r7, r3
 800859e:	4628      	mov	r0, r5
 80085a0:	bf18      	it	ne
 80085a2:	f04a 0a02 	orrne.w	sl, sl, #2
 80085a6:	1b36      	subs	r6, r6, r4
 80085a8:	f7ff fe22 	bl	80081f0 <rshift>
 80085ac:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80085b0:	2702      	movs	r7, #2
 80085b2:	f1ba 0f00 	cmp.w	sl, #0
 80085b6:	d048      	beq.n	800864a <__gethex+0x3bc>
 80085b8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80085bc:	2b02      	cmp	r3, #2
 80085be:	d015      	beq.n	80085ec <__gethex+0x35e>
 80085c0:	2b03      	cmp	r3, #3
 80085c2:	d017      	beq.n	80085f4 <__gethex+0x366>
 80085c4:	2b01      	cmp	r3, #1
 80085c6:	d109      	bne.n	80085dc <__gethex+0x34e>
 80085c8:	f01a 0f02 	tst.w	sl, #2
 80085cc:	d006      	beq.n	80085dc <__gethex+0x34e>
 80085ce:	f8d9 3000 	ldr.w	r3, [r9]
 80085d2:	ea4a 0a03 	orr.w	sl, sl, r3
 80085d6:	f01a 0f01 	tst.w	sl, #1
 80085da:	d10e      	bne.n	80085fa <__gethex+0x36c>
 80085dc:	f047 0710 	orr.w	r7, r7, #16
 80085e0:	e033      	b.n	800864a <__gethex+0x3bc>
 80085e2:	f04f 0a01 	mov.w	sl, #1
 80085e6:	e7d0      	b.n	800858a <__gethex+0x2fc>
 80085e8:	2701      	movs	r7, #1
 80085ea:	e7e2      	b.n	80085b2 <__gethex+0x324>
 80085ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80085ee:	f1c3 0301 	rsb	r3, r3, #1
 80085f2:	9315      	str	r3, [sp, #84]	; 0x54
 80085f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d0f0      	beq.n	80085dc <__gethex+0x34e>
 80085fa:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80085fe:	f105 0314 	add.w	r3, r5, #20
 8008602:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8008606:	eb03 010a 	add.w	r1, r3, sl
 800860a:	f04f 0c00 	mov.w	ip, #0
 800860e:	4618      	mov	r0, r3
 8008610:	f853 2b04 	ldr.w	r2, [r3], #4
 8008614:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008618:	d01c      	beq.n	8008654 <__gethex+0x3c6>
 800861a:	3201      	adds	r2, #1
 800861c:	6002      	str	r2, [r0, #0]
 800861e:	2f02      	cmp	r7, #2
 8008620:	f105 0314 	add.w	r3, r5, #20
 8008624:	d138      	bne.n	8008698 <__gethex+0x40a>
 8008626:	f8d8 2000 	ldr.w	r2, [r8]
 800862a:	3a01      	subs	r2, #1
 800862c:	42b2      	cmp	r2, r6
 800862e:	d10a      	bne.n	8008646 <__gethex+0x3b8>
 8008630:	1171      	asrs	r1, r6, #5
 8008632:	2201      	movs	r2, #1
 8008634:	f006 061f 	and.w	r6, r6, #31
 8008638:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800863c:	fa02 f606 	lsl.w	r6, r2, r6
 8008640:	421e      	tst	r6, r3
 8008642:	bf18      	it	ne
 8008644:	4617      	movne	r7, r2
 8008646:	f047 0720 	orr.w	r7, r7, #32
 800864a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800864c:	601d      	str	r5, [r3, #0]
 800864e:	9b06      	ldr	r3, [sp, #24]
 8008650:	601c      	str	r4, [r3, #0]
 8008652:	e6a4      	b.n	800839e <__gethex+0x110>
 8008654:	4299      	cmp	r1, r3
 8008656:	f843 cc04 	str.w	ip, [r3, #-4]
 800865a:	d8d8      	bhi.n	800860e <__gethex+0x380>
 800865c:	68ab      	ldr	r3, [r5, #8]
 800865e:	4599      	cmp	r9, r3
 8008660:	db12      	blt.n	8008688 <__gethex+0x3fa>
 8008662:	6869      	ldr	r1, [r5, #4]
 8008664:	9802      	ldr	r0, [sp, #8]
 8008666:	3101      	adds	r1, #1
 8008668:	f000 f921 	bl	80088ae <_Balloc>
 800866c:	692a      	ldr	r2, [r5, #16]
 800866e:	3202      	adds	r2, #2
 8008670:	f105 010c 	add.w	r1, r5, #12
 8008674:	4683      	mov	fp, r0
 8008676:	0092      	lsls	r2, r2, #2
 8008678:	300c      	adds	r0, #12
 800867a:	f000 f90d 	bl	8008898 <memcpy>
 800867e:	4629      	mov	r1, r5
 8008680:	9802      	ldr	r0, [sp, #8]
 8008682:	f000 f948 	bl	8008916 <_Bfree>
 8008686:	465d      	mov	r5, fp
 8008688:	692b      	ldr	r3, [r5, #16]
 800868a:	1c5a      	adds	r2, r3, #1
 800868c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8008690:	612a      	str	r2, [r5, #16]
 8008692:	2201      	movs	r2, #1
 8008694:	615a      	str	r2, [r3, #20]
 8008696:	e7c2      	b.n	800861e <__gethex+0x390>
 8008698:	692a      	ldr	r2, [r5, #16]
 800869a:	454a      	cmp	r2, r9
 800869c:	dd0b      	ble.n	80086b6 <__gethex+0x428>
 800869e:	2101      	movs	r1, #1
 80086a0:	4628      	mov	r0, r5
 80086a2:	f7ff fda5 	bl	80081f0 <rshift>
 80086a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80086aa:	3401      	adds	r4, #1
 80086ac:	42a3      	cmp	r3, r4
 80086ae:	f6ff aed9 	blt.w	8008464 <__gethex+0x1d6>
 80086b2:	2701      	movs	r7, #1
 80086b4:	e7c7      	b.n	8008646 <__gethex+0x3b8>
 80086b6:	f016 061f 	ands.w	r6, r6, #31
 80086ba:	d0fa      	beq.n	80086b2 <__gethex+0x424>
 80086bc:	449a      	add	sl, r3
 80086be:	f1c6 0620 	rsb	r6, r6, #32
 80086c2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80086c6:	f000 f9b6 	bl	8008a36 <__hi0bits>
 80086ca:	42b0      	cmp	r0, r6
 80086cc:	dbe7      	blt.n	800869e <__gethex+0x410>
 80086ce:	e7f0      	b.n	80086b2 <__gethex+0x424>

080086d0 <L_shift>:
 80086d0:	f1c2 0208 	rsb	r2, r2, #8
 80086d4:	0092      	lsls	r2, r2, #2
 80086d6:	b570      	push	{r4, r5, r6, lr}
 80086d8:	f1c2 0620 	rsb	r6, r2, #32
 80086dc:	6843      	ldr	r3, [r0, #4]
 80086de:	6804      	ldr	r4, [r0, #0]
 80086e0:	fa03 f506 	lsl.w	r5, r3, r6
 80086e4:	432c      	orrs	r4, r5
 80086e6:	40d3      	lsrs	r3, r2
 80086e8:	6004      	str	r4, [r0, #0]
 80086ea:	f840 3f04 	str.w	r3, [r0, #4]!
 80086ee:	4288      	cmp	r0, r1
 80086f0:	d3f4      	bcc.n	80086dc <L_shift+0xc>
 80086f2:	bd70      	pop	{r4, r5, r6, pc}

080086f4 <__match>:
 80086f4:	b530      	push	{r4, r5, lr}
 80086f6:	6803      	ldr	r3, [r0, #0]
 80086f8:	3301      	adds	r3, #1
 80086fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80086fe:	b914      	cbnz	r4, 8008706 <__match+0x12>
 8008700:	6003      	str	r3, [r0, #0]
 8008702:	2001      	movs	r0, #1
 8008704:	bd30      	pop	{r4, r5, pc}
 8008706:	f813 2b01 	ldrb.w	r2, [r3], #1
 800870a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800870e:	2d19      	cmp	r5, #25
 8008710:	bf98      	it	ls
 8008712:	3220      	addls	r2, #32
 8008714:	42a2      	cmp	r2, r4
 8008716:	d0f0      	beq.n	80086fa <__match+0x6>
 8008718:	2000      	movs	r0, #0
 800871a:	e7f3      	b.n	8008704 <__match+0x10>

0800871c <__hexnan>:
 800871c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008720:	680b      	ldr	r3, [r1, #0]
 8008722:	6801      	ldr	r1, [r0, #0]
 8008724:	115f      	asrs	r7, r3, #5
 8008726:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800872a:	f013 031f 	ands.w	r3, r3, #31
 800872e:	b087      	sub	sp, #28
 8008730:	bf18      	it	ne
 8008732:	3704      	addne	r7, #4
 8008734:	2500      	movs	r5, #0
 8008736:	1f3e      	subs	r6, r7, #4
 8008738:	4682      	mov	sl, r0
 800873a:	4690      	mov	r8, r2
 800873c:	9301      	str	r3, [sp, #4]
 800873e:	f847 5c04 	str.w	r5, [r7, #-4]
 8008742:	46b1      	mov	r9, r6
 8008744:	4634      	mov	r4, r6
 8008746:	9502      	str	r5, [sp, #8]
 8008748:	46ab      	mov	fp, r5
 800874a:	784a      	ldrb	r2, [r1, #1]
 800874c:	1c4b      	adds	r3, r1, #1
 800874e:	9303      	str	r3, [sp, #12]
 8008750:	b342      	cbz	r2, 80087a4 <__hexnan+0x88>
 8008752:	4610      	mov	r0, r2
 8008754:	9105      	str	r1, [sp, #20]
 8008756:	9204      	str	r2, [sp, #16]
 8008758:	f7ff fd84 	bl	8008264 <__hexdig_fun>
 800875c:	2800      	cmp	r0, #0
 800875e:	d143      	bne.n	80087e8 <__hexnan+0xcc>
 8008760:	9a04      	ldr	r2, [sp, #16]
 8008762:	9905      	ldr	r1, [sp, #20]
 8008764:	2a20      	cmp	r2, #32
 8008766:	d818      	bhi.n	800879a <__hexnan+0x7e>
 8008768:	9b02      	ldr	r3, [sp, #8]
 800876a:	459b      	cmp	fp, r3
 800876c:	dd13      	ble.n	8008796 <__hexnan+0x7a>
 800876e:	454c      	cmp	r4, r9
 8008770:	d206      	bcs.n	8008780 <__hexnan+0x64>
 8008772:	2d07      	cmp	r5, #7
 8008774:	dc04      	bgt.n	8008780 <__hexnan+0x64>
 8008776:	462a      	mov	r2, r5
 8008778:	4649      	mov	r1, r9
 800877a:	4620      	mov	r0, r4
 800877c:	f7ff ffa8 	bl	80086d0 <L_shift>
 8008780:	4544      	cmp	r4, r8
 8008782:	d944      	bls.n	800880e <__hexnan+0xf2>
 8008784:	2300      	movs	r3, #0
 8008786:	f1a4 0904 	sub.w	r9, r4, #4
 800878a:	f844 3c04 	str.w	r3, [r4, #-4]
 800878e:	f8cd b008 	str.w	fp, [sp, #8]
 8008792:	464c      	mov	r4, r9
 8008794:	461d      	mov	r5, r3
 8008796:	9903      	ldr	r1, [sp, #12]
 8008798:	e7d7      	b.n	800874a <__hexnan+0x2e>
 800879a:	2a29      	cmp	r2, #41	; 0x29
 800879c:	d14a      	bne.n	8008834 <__hexnan+0x118>
 800879e:	3102      	adds	r1, #2
 80087a0:	f8ca 1000 	str.w	r1, [sl]
 80087a4:	f1bb 0f00 	cmp.w	fp, #0
 80087a8:	d044      	beq.n	8008834 <__hexnan+0x118>
 80087aa:	454c      	cmp	r4, r9
 80087ac:	d206      	bcs.n	80087bc <__hexnan+0xa0>
 80087ae:	2d07      	cmp	r5, #7
 80087b0:	dc04      	bgt.n	80087bc <__hexnan+0xa0>
 80087b2:	462a      	mov	r2, r5
 80087b4:	4649      	mov	r1, r9
 80087b6:	4620      	mov	r0, r4
 80087b8:	f7ff ff8a 	bl	80086d0 <L_shift>
 80087bc:	4544      	cmp	r4, r8
 80087be:	d928      	bls.n	8008812 <__hexnan+0xf6>
 80087c0:	4643      	mov	r3, r8
 80087c2:	f854 2b04 	ldr.w	r2, [r4], #4
 80087c6:	f843 2b04 	str.w	r2, [r3], #4
 80087ca:	42a6      	cmp	r6, r4
 80087cc:	d2f9      	bcs.n	80087c2 <__hexnan+0xa6>
 80087ce:	2200      	movs	r2, #0
 80087d0:	f843 2b04 	str.w	r2, [r3], #4
 80087d4:	429e      	cmp	r6, r3
 80087d6:	d2fb      	bcs.n	80087d0 <__hexnan+0xb4>
 80087d8:	6833      	ldr	r3, [r6, #0]
 80087da:	b91b      	cbnz	r3, 80087e4 <__hexnan+0xc8>
 80087dc:	4546      	cmp	r6, r8
 80087de:	d127      	bne.n	8008830 <__hexnan+0x114>
 80087e0:	2301      	movs	r3, #1
 80087e2:	6033      	str	r3, [r6, #0]
 80087e4:	2005      	movs	r0, #5
 80087e6:	e026      	b.n	8008836 <__hexnan+0x11a>
 80087e8:	3501      	adds	r5, #1
 80087ea:	2d08      	cmp	r5, #8
 80087ec:	f10b 0b01 	add.w	fp, fp, #1
 80087f0:	dd06      	ble.n	8008800 <__hexnan+0xe4>
 80087f2:	4544      	cmp	r4, r8
 80087f4:	d9cf      	bls.n	8008796 <__hexnan+0x7a>
 80087f6:	2300      	movs	r3, #0
 80087f8:	f844 3c04 	str.w	r3, [r4, #-4]
 80087fc:	2501      	movs	r5, #1
 80087fe:	3c04      	subs	r4, #4
 8008800:	6822      	ldr	r2, [r4, #0]
 8008802:	f000 000f 	and.w	r0, r0, #15
 8008806:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800880a:	6020      	str	r0, [r4, #0]
 800880c:	e7c3      	b.n	8008796 <__hexnan+0x7a>
 800880e:	2508      	movs	r5, #8
 8008810:	e7c1      	b.n	8008796 <__hexnan+0x7a>
 8008812:	9b01      	ldr	r3, [sp, #4]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d0df      	beq.n	80087d8 <__hexnan+0xbc>
 8008818:	f04f 32ff 	mov.w	r2, #4294967295
 800881c:	f1c3 0320 	rsb	r3, r3, #32
 8008820:	fa22 f303 	lsr.w	r3, r2, r3
 8008824:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8008828:	401a      	ands	r2, r3
 800882a:	f847 2c04 	str.w	r2, [r7, #-4]
 800882e:	e7d3      	b.n	80087d8 <__hexnan+0xbc>
 8008830:	3e04      	subs	r6, #4
 8008832:	e7d1      	b.n	80087d8 <__hexnan+0xbc>
 8008834:	2004      	movs	r0, #4
 8008836:	b007      	add	sp, #28
 8008838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800883c <__locale_ctype_ptr_l>:
 800883c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8008840:	4770      	bx	lr

08008842 <__localeconv_l>:
 8008842:	30f0      	adds	r0, #240	; 0xf0
 8008844:	4770      	bx	lr
	...

08008848 <_localeconv_r>:
 8008848:	4b04      	ldr	r3, [pc, #16]	; (800885c <_localeconv_r+0x14>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	6a18      	ldr	r0, [r3, #32]
 800884e:	4b04      	ldr	r3, [pc, #16]	; (8008860 <_localeconv_r+0x18>)
 8008850:	2800      	cmp	r0, #0
 8008852:	bf08      	it	eq
 8008854:	4618      	moveq	r0, r3
 8008856:	30f0      	adds	r0, #240	; 0xf0
 8008858:	4770      	bx	lr
 800885a:	bf00      	nop
 800885c:	20000030 	.word	0x20000030
 8008860:	20000094 	.word	0x20000094

08008864 <malloc>:
 8008864:	4b02      	ldr	r3, [pc, #8]	; (8008870 <malloc+0xc>)
 8008866:	4601      	mov	r1, r0
 8008868:	6818      	ldr	r0, [r3, #0]
 800886a:	f000 bc7b 	b.w	8009164 <_malloc_r>
 800886e:	bf00      	nop
 8008870:	20000030 	.word	0x20000030

08008874 <__ascii_mbtowc>:
 8008874:	b082      	sub	sp, #8
 8008876:	b901      	cbnz	r1, 800887a <__ascii_mbtowc+0x6>
 8008878:	a901      	add	r1, sp, #4
 800887a:	b142      	cbz	r2, 800888e <__ascii_mbtowc+0x1a>
 800887c:	b14b      	cbz	r3, 8008892 <__ascii_mbtowc+0x1e>
 800887e:	7813      	ldrb	r3, [r2, #0]
 8008880:	600b      	str	r3, [r1, #0]
 8008882:	7812      	ldrb	r2, [r2, #0]
 8008884:	1c10      	adds	r0, r2, #0
 8008886:	bf18      	it	ne
 8008888:	2001      	movne	r0, #1
 800888a:	b002      	add	sp, #8
 800888c:	4770      	bx	lr
 800888e:	4610      	mov	r0, r2
 8008890:	e7fb      	b.n	800888a <__ascii_mbtowc+0x16>
 8008892:	f06f 0001 	mvn.w	r0, #1
 8008896:	e7f8      	b.n	800888a <__ascii_mbtowc+0x16>

08008898 <memcpy>:
 8008898:	b510      	push	{r4, lr}
 800889a:	1e43      	subs	r3, r0, #1
 800889c:	440a      	add	r2, r1
 800889e:	4291      	cmp	r1, r2
 80088a0:	d100      	bne.n	80088a4 <memcpy+0xc>
 80088a2:	bd10      	pop	{r4, pc}
 80088a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80088a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80088ac:	e7f7      	b.n	800889e <memcpy+0x6>

080088ae <_Balloc>:
 80088ae:	b570      	push	{r4, r5, r6, lr}
 80088b0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80088b2:	4604      	mov	r4, r0
 80088b4:	460e      	mov	r6, r1
 80088b6:	b93d      	cbnz	r5, 80088c8 <_Balloc+0x1a>
 80088b8:	2010      	movs	r0, #16
 80088ba:	f7ff ffd3 	bl	8008864 <malloc>
 80088be:	6260      	str	r0, [r4, #36]	; 0x24
 80088c0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80088c4:	6005      	str	r5, [r0, #0]
 80088c6:	60c5      	str	r5, [r0, #12]
 80088c8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80088ca:	68eb      	ldr	r3, [r5, #12]
 80088cc:	b183      	cbz	r3, 80088f0 <_Balloc+0x42>
 80088ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80088d0:	68db      	ldr	r3, [r3, #12]
 80088d2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80088d6:	b9b8      	cbnz	r0, 8008908 <_Balloc+0x5a>
 80088d8:	2101      	movs	r1, #1
 80088da:	fa01 f506 	lsl.w	r5, r1, r6
 80088de:	1d6a      	adds	r2, r5, #5
 80088e0:	0092      	lsls	r2, r2, #2
 80088e2:	4620      	mov	r0, r4
 80088e4:	f000 fbe1 	bl	80090aa <_calloc_r>
 80088e8:	b160      	cbz	r0, 8008904 <_Balloc+0x56>
 80088ea:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80088ee:	e00e      	b.n	800890e <_Balloc+0x60>
 80088f0:	2221      	movs	r2, #33	; 0x21
 80088f2:	2104      	movs	r1, #4
 80088f4:	4620      	mov	r0, r4
 80088f6:	f000 fbd8 	bl	80090aa <_calloc_r>
 80088fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80088fc:	60e8      	str	r0, [r5, #12]
 80088fe:	68db      	ldr	r3, [r3, #12]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d1e4      	bne.n	80088ce <_Balloc+0x20>
 8008904:	2000      	movs	r0, #0
 8008906:	bd70      	pop	{r4, r5, r6, pc}
 8008908:	6802      	ldr	r2, [r0, #0]
 800890a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800890e:	2300      	movs	r3, #0
 8008910:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008914:	e7f7      	b.n	8008906 <_Balloc+0x58>

08008916 <_Bfree>:
 8008916:	b570      	push	{r4, r5, r6, lr}
 8008918:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800891a:	4606      	mov	r6, r0
 800891c:	460d      	mov	r5, r1
 800891e:	b93c      	cbnz	r4, 8008930 <_Bfree+0x1a>
 8008920:	2010      	movs	r0, #16
 8008922:	f7ff ff9f 	bl	8008864 <malloc>
 8008926:	6270      	str	r0, [r6, #36]	; 0x24
 8008928:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800892c:	6004      	str	r4, [r0, #0]
 800892e:	60c4      	str	r4, [r0, #12]
 8008930:	b13d      	cbz	r5, 8008942 <_Bfree+0x2c>
 8008932:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008934:	686a      	ldr	r2, [r5, #4]
 8008936:	68db      	ldr	r3, [r3, #12]
 8008938:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800893c:	6029      	str	r1, [r5, #0]
 800893e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8008942:	bd70      	pop	{r4, r5, r6, pc}

08008944 <__multadd>:
 8008944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008948:	690d      	ldr	r5, [r1, #16]
 800894a:	461f      	mov	r7, r3
 800894c:	4606      	mov	r6, r0
 800894e:	460c      	mov	r4, r1
 8008950:	f101 0c14 	add.w	ip, r1, #20
 8008954:	2300      	movs	r3, #0
 8008956:	f8dc 0000 	ldr.w	r0, [ip]
 800895a:	b281      	uxth	r1, r0
 800895c:	fb02 7101 	mla	r1, r2, r1, r7
 8008960:	0c0f      	lsrs	r7, r1, #16
 8008962:	0c00      	lsrs	r0, r0, #16
 8008964:	fb02 7000 	mla	r0, r2, r0, r7
 8008968:	b289      	uxth	r1, r1
 800896a:	3301      	adds	r3, #1
 800896c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008970:	429d      	cmp	r5, r3
 8008972:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8008976:	f84c 1b04 	str.w	r1, [ip], #4
 800897a:	dcec      	bgt.n	8008956 <__multadd+0x12>
 800897c:	b1d7      	cbz	r7, 80089b4 <__multadd+0x70>
 800897e:	68a3      	ldr	r3, [r4, #8]
 8008980:	42ab      	cmp	r3, r5
 8008982:	dc12      	bgt.n	80089aa <__multadd+0x66>
 8008984:	6861      	ldr	r1, [r4, #4]
 8008986:	4630      	mov	r0, r6
 8008988:	3101      	adds	r1, #1
 800898a:	f7ff ff90 	bl	80088ae <_Balloc>
 800898e:	6922      	ldr	r2, [r4, #16]
 8008990:	3202      	adds	r2, #2
 8008992:	f104 010c 	add.w	r1, r4, #12
 8008996:	4680      	mov	r8, r0
 8008998:	0092      	lsls	r2, r2, #2
 800899a:	300c      	adds	r0, #12
 800899c:	f7ff ff7c 	bl	8008898 <memcpy>
 80089a0:	4621      	mov	r1, r4
 80089a2:	4630      	mov	r0, r6
 80089a4:	f7ff ffb7 	bl	8008916 <_Bfree>
 80089a8:	4644      	mov	r4, r8
 80089aa:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80089ae:	3501      	adds	r5, #1
 80089b0:	615f      	str	r7, [r3, #20]
 80089b2:	6125      	str	r5, [r4, #16]
 80089b4:	4620      	mov	r0, r4
 80089b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080089ba <__s2b>:
 80089ba:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089be:	460c      	mov	r4, r1
 80089c0:	4615      	mov	r5, r2
 80089c2:	461f      	mov	r7, r3
 80089c4:	2209      	movs	r2, #9
 80089c6:	3308      	adds	r3, #8
 80089c8:	4606      	mov	r6, r0
 80089ca:	fb93 f3f2 	sdiv	r3, r3, r2
 80089ce:	2100      	movs	r1, #0
 80089d0:	2201      	movs	r2, #1
 80089d2:	429a      	cmp	r2, r3
 80089d4:	db20      	blt.n	8008a18 <__s2b+0x5e>
 80089d6:	4630      	mov	r0, r6
 80089d8:	f7ff ff69 	bl	80088ae <_Balloc>
 80089dc:	9b08      	ldr	r3, [sp, #32]
 80089de:	6143      	str	r3, [r0, #20]
 80089e0:	2d09      	cmp	r5, #9
 80089e2:	f04f 0301 	mov.w	r3, #1
 80089e6:	6103      	str	r3, [r0, #16]
 80089e8:	dd19      	ble.n	8008a1e <__s2b+0x64>
 80089ea:	f104 0809 	add.w	r8, r4, #9
 80089ee:	46c1      	mov	r9, r8
 80089f0:	442c      	add	r4, r5
 80089f2:	f819 3b01 	ldrb.w	r3, [r9], #1
 80089f6:	4601      	mov	r1, r0
 80089f8:	3b30      	subs	r3, #48	; 0x30
 80089fa:	220a      	movs	r2, #10
 80089fc:	4630      	mov	r0, r6
 80089fe:	f7ff ffa1 	bl	8008944 <__multadd>
 8008a02:	45a1      	cmp	r9, r4
 8008a04:	d1f5      	bne.n	80089f2 <__s2b+0x38>
 8008a06:	eb08 0405 	add.w	r4, r8, r5
 8008a0a:	3c08      	subs	r4, #8
 8008a0c:	1b2d      	subs	r5, r5, r4
 8008a0e:	1963      	adds	r3, r4, r5
 8008a10:	42bb      	cmp	r3, r7
 8008a12:	db07      	blt.n	8008a24 <__s2b+0x6a>
 8008a14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a18:	0052      	lsls	r2, r2, #1
 8008a1a:	3101      	adds	r1, #1
 8008a1c:	e7d9      	b.n	80089d2 <__s2b+0x18>
 8008a1e:	340a      	adds	r4, #10
 8008a20:	2509      	movs	r5, #9
 8008a22:	e7f3      	b.n	8008a0c <__s2b+0x52>
 8008a24:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008a28:	4601      	mov	r1, r0
 8008a2a:	3b30      	subs	r3, #48	; 0x30
 8008a2c:	220a      	movs	r2, #10
 8008a2e:	4630      	mov	r0, r6
 8008a30:	f7ff ff88 	bl	8008944 <__multadd>
 8008a34:	e7eb      	b.n	8008a0e <__s2b+0x54>

08008a36 <__hi0bits>:
 8008a36:	0c02      	lsrs	r2, r0, #16
 8008a38:	0412      	lsls	r2, r2, #16
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	b9b2      	cbnz	r2, 8008a6c <__hi0bits+0x36>
 8008a3e:	0403      	lsls	r3, r0, #16
 8008a40:	2010      	movs	r0, #16
 8008a42:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008a46:	bf04      	itt	eq
 8008a48:	021b      	lsleq	r3, r3, #8
 8008a4a:	3008      	addeq	r0, #8
 8008a4c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008a50:	bf04      	itt	eq
 8008a52:	011b      	lsleq	r3, r3, #4
 8008a54:	3004      	addeq	r0, #4
 8008a56:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008a5a:	bf04      	itt	eq
 8008a5c:	009b      	lsleq	r3, r3, #2
 8008a5e:	3002      	addeq	r0, #2
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	db06      	blt.n	8008a72 <__hi0bits+0x3c>
 8008a64:	005b      	lsls	r3, r3, #1
 8008a66:	d503      	bpl.n	8008a70 <__hi0bits+0x3a>
 8008a68:	3001      	adds	r0, #1
 8008a6a:	4770      	bx	lr
 8008a6c:	2000      	movs	r0, #0
 8008a6e:	e7e8      	b.n	8008a42 <__hi0bits+0xc>
 8008a70:	2020      	movs	r0, #32
 8008a72:	4770      	bx	lr

08008a74 <__lo0bits>:
 8008a74:	6803      	ldr	r3, [r0, #0]
 8008a76:	f013 0207 	ands.w	r2, r3, #7
 8008a7a:	4601      	mov	r1, r0
 8008a7c:	d00b      	beq.n	8008a96 <__lo0bits+0x22>
 8008a7e:	07da      	lsls	r2, r3, #31
 8008a80:	d423      	bmi.n	8008aca <__lo0bits+0x56>
 8008a82:	0798      	lsls	r0, r3, #30
 8008a84:	bf49      	itett	mi
 8008a86:	085b      	lsrmi	r3, r3, #1
 8008a88:	089b      	lsrpl	r3, r3, #2
 8008a8a:	2001      	movmi	r0, #1
 8008a8c:	600b      	strmi	r3, [r1, #0]
 8008a8e:	bf5c      	itt	pl
 8008a90:	600b      	strpl	r3, [r1, #0]
 8008a92:	2002      	movpl	r0, #2
 8008a94:	4770      	bx	lr
 8008a96:	b298      	uxth	r0, r3
 8008a98:	b9a8      	cbnz	r0, 8008ac6 <__lo0bits+0x52>
 8008a9a:	0c1b      	lsrs	r3, r3, #16
 8008a9c:	2010      	movs	r0, #16
 8008a9e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008aa2:	bf04      	itt	eq
 8008aa4:	0a1b      	lsreq	r3, r3, #8
 8008aa6:	3008      	addeq	r0, #8
 8008aa8:	071a      	lsls	r2, r3, #28
 8008aaa:	bf04      	itt	eq
 8008aac:	091b      	lsreq	r3, r3, #4
 8008aae:	3004      	addeq	r0, #4
 8008ab0:	079a      	lsls	r2, r3, #30
 8008ab2:	bf04      	itt	eq
 8008ab4:	089b      	lsreq	r3, r3, #2
 8008ab6:	3002      	addeq	r0, #2
 8008ab8:	07da      	lsls	r2, r3, #31
 8008aba:	d402      	bmi.n	8008ac2 <__lo0bits+0x4e>
 8008abc:	085b      	lsrs	r3, r3, #1
 8008abe:	d006      	beq.n	8008ace <__lo0bits+0x5a>
 8008ac0:	3001      	adds	r0, #1
 8008ac2:	600b      	str	r3, [r1, #0]
 8008ac4:	4770      	bx	lr
 8008ac6:	4610      	mov	r0, r2
 8008ac8:	e7e9      	b.n	8008a9e <__lo0bits+0x2a>
 8008aca:	2000      	movs	r0, #0
 8008acc:	4770      	bx	lr
 8008ace:	2020      	movs	r0, #32
 8008ad0:	4770      	bx	lr

08008ad2 <__i2b>:
 8008ad2:	b510      	push	{r4, lr}
 8008ad4:	460c      	mov	r4, r1
 8008ad6:	2101      	movs	r1, #1
 8008ad8:	f7ff fee9 	bl	80088ae <_Balloc>
 8008adc:	2201      	movs	r2, #1
 8008ade:	6144      	str	r4, [r0, #20]
 8008ae0:	6102      	str	r2, [r0, #16]
 8008ae2:	bd10      	pop	{r4, pc}

08008ae4 <__multiply>:
 8008ae4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ae8:	4614      	mov	r4, r2
 8008aea:	690a      	ldr	r2, [r1, #16]
 8008aec:	6923      	ldr	r3, [r4, #16]
 8008aee:	429a      	cmp	r2, r3
 8008af0:	bfb8      	it	lt
 8008af2:	460b      	movlt	r3, r1
 8008af4:	4688      	mov	r8, r1
 8008af6:	bfbc      	itt	lt
 8008af8:	46a0      	movlt	r8, r4
 8008afa:	461c      	movlt	r4, r3
 8008afc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008b00:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008b04:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008b08:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008b0c:	eb07 0609 	add.w	r6, r7, r9
 8008b10:	42b3      	cmp	r3, r6
 8008b12:	bfb8      	it	lt
 8008b14:	3101      	addlt	r1, #1
 8008b16:	f7ff feca 	bl	80088ae <_Balloc>
 8008b1a:	f100 0514 	add.w	r5, r0, #20
 8008b1e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8008b22:	462b      	mov	r3, r5
 8008b24:	2200      	movs	r2, #0
 8008b26:	4573      	cmp	r3, lr
 8008b28:	d316      	bcc.n	8008b58 <__multiply+0x74>
 8008b2a:	f104 0214 	add.w	r2, r4, #20
 8008b2e:	f108 0114 	add.w	r1, r8, #20
 8008b32:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8008b36:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8008b3a:	9300      	str	r3, [sp, #0]
 8008b3c:	9b00      	ldr	r3, [sp, #0]
 8008b3e:	9201      	str	r2, [sp, #4]
 8008b40:	4293      	cmp	r3, r2
 8008b42:	d80c      	bhi.n	8008b5e <__multiply+0x7a>
 8008b44:	2e00      	cmp	r6, #0
 8008b46:	dd03      	ble.n	8008b50 <__multiply+0x6c>
 8008b48:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d05d      	beq.n	8008c0c <__multiply+0x128>
 8008b50:	6106      	str	r6, [r0, #16]
 8008b52:	b003      	add	sp, #12
 8008b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b58:	f843 2b04 	str.w	r2, [r3], #4
 8008b5c:	e7e3      	b.n	8008b26 <__multiply+0x42>
 8008b5e:	f8b2 b000 	ldrh.w	fp, [r2]
 8008b62:	f1bb 0f00 	cmp.w	fp, #0
 8008b66:	d023      	beq.n	8008bb0 <__multiply+0xcc>
 8008b68:	4689      	mov	r9, r1
 8008b6a:	46ac      	mov	ip, r5
 8008b6c:	f04f 0800 	mov.w	r8, #0
 8008b70:	f859 4b04 	ldr.w	r4, [r9], #4
 8008b74:	f8dc a000 	ldr.w	sl, [ip]
 8008b78:	b2a3      	uxth	r3, r4
 8008b7a:	fa1f fa8a 	uxth.w	sl, sl
 8008b7e:	fb0b a303 	mla	r3, fp, r3, sl
 8008b82:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008b86:	f8dc 4000 	ldr.w	r4, [ip]
 8008b8a:	4443      	add	r3, r8
 8008b8c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008b90:	fb0b 840a 	mla	r4, fp, sl, r8
 8008b94:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8008b98:	46e2      	mov	sl, ip
 8008b9a:	b29b      	uxth	r3, r3
 8008b9c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008ba0:	454f      	cmp	r7, r9
 8008ba2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008ba6:	f84a 3b04 	str.w	r3, [sl], #4
 8008baa:	d82b      	bhi.n	8008c04 <__multiply+0x120>
 8008bac:	f8cc 8004 	str.w	r8, [ip, #4]
 8008bb0:	9b01      	ldr	r3, [sp, #4]
 8008bb2:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8008bb6:	3204      	adds	r2, #4
 8008bb8:	f1ba 0f00 	cmp.w	sl, #0
 8008bbc:	d020      	beq.n	8008c00 <__multiply+0x11c>
 8008bbe:	682b      	ldr	r3, [r5, #0]
 8008bc0:	4689      	mov	r9, r1
 8008bc2:	46a8      	mov	r8, r5
 8008bc4:	f04f 0b00 	mov.w	fp, #0
 8008bc8:	f8b9 c000 	ldrh.w	ip, [r9]
 8008bcc:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8008bd0:	fb0a 440c 	mla	r4, sl, ip, r4
 8008bd4:	445c      	add	r4, fp
 8008bd6:	46c4      	mov	ip, r8
 8008bd8:	b29b      	uxth	r3, r3
 8008bda:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008bde:	f84c 3b04 	str.w	r3, [ip], #4
 8008be2:	f859 3b04 	ldr.w	r3, [r9], #4
 8008be6:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8008bea:	0c1b      	lsrs	r3, r3, #16
 8008bec:	fb0a b303 	mla	r3, sl, r3, fp
 8008bf0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008bf4:	454f      	cmp	r7, r9
 8008bf6:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8008bfa:	d805      	bhi.n	8008c08 <__multiply+0x124>
 8008bfc:	f8c8 3004 	str.w	r3, [r8, #4]
 8008c00:	3504      	adds	r5, #4
 8008c02:	e79b      	b.n	8008b3c <__multiply+0x58>
 8008c04:	46d4      	mov	ip, sl
 8008c06:	e7b3      	b.n	8008b70 <__multiply+0x8c>
 8008c08:	46e0      	mov	r8, ip
 8008c0a:	e7dd      	b.n	8008bc8 <__multiply+0xe4>
 8008c0c:	3e01      	subs	r6, #1
 8008c0e:	e799      	b.n	8008b44 <__multiply+0x60>

08008c10 <__pow5mult>:
 8008c10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c14:	4615      	mov	r5, r2
 8008c16:	f012 0203 	ands.w	r2, r2, #3
 8008c1a:	4606      	mov	r6, r0
 8008c1c:	460f      	mov	r7, r1
 8008c1e:	d007      	beq.n	8008c30 <__pow5mult+0x20>
 8008c20:	3a01      	subs	r2, #1
 8008c22:	4c21      	ldr	r4, [pc, #132]	; (8008ca8 <__pow5mult+0x98>)
 8008c24:	2300      	movs	r3, #0
 8008c26:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008c2a:	f7ff fe8b 	bl	8008944 <__multadd>
 8008c2e:	4607      	mov	r7, r0
 8008c30:	10ad      	asrs	r5, r5, #2
 8008c32:	d035      	beq.n	8008ca0 <__pow5mult+0x90>
 8008c34:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008c36:	b93c      	cbnz	r4, 8008c48 <__pow5mult+0x38>
 8008c38:	2010      	movs	r0, #16
 8008c3a:	f7ff fe13 	bl	8008864 <malloc>
 8008c3e:	6270      	str	r0, [r6, #36]	; 0x24
 8008c40:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008c44:	6004      	str	r4, [r0, #0]
 8008c46:	60c4      	str	r4, [r0, #12]
 8008c48:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008c4c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008c50:	b94c      	cbnz	r4, 8008c66 <__pow5mult+0x56>
 8008c52:	f240 2171 	movw	r1, #625	; 0x271
 8008c56:	4630      	mov	r0, r6
 8008c58:	f7ff ff3b 	bl	8008ad2 <__i2b>
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008c62:	4604      	mov	r4, r0
 8008c64:	6003      	str	r3, [r0, #0]
 8008c66:	f04f 0800 	mov.w	r8, #0
 8008c6a:	07eb      	lsls	r3, r5, #31
 8008c6c:	d50a      	bpl.n	8008c84 <__pow5mult+0x74>
 8008c6e:	4639      	mov	r1, r7
 8008c70:	4622      	mov	r2, r4
 8008c72:	4630      	mov	r0, r6
 8008c74:	f7ff ff36 	bl	8008ae4 <__multiply>
 8008c78:	4639      	mov	r1, r7
 8008c7a:	4681      	mov	r9, r0
 8008c7c:	4630      	mov	r0, r6
 8008c7e:	f7ff fe4a 	bl	8008916 <_Bfree>
 8008c82:	464f      	mov	r7, r9
 8008c84:	106d      	asrs	r5, r5, #1
 8008c86:	d00b      	beq.n	8008ca0 <__pow5mult+0x90>
 8008c88:	6820      	ldr	r0, [r4, #0]
 8008c8a:	b938      	cbnz	r0, 8008c9c <__pow5mult+0x8c>
 8008c8c:	4622      	mov	r2, r4
 8008c8e:	4621      	mov	r1, r4
 8008c90:	4630      	mov	r0, r6
 8008c92:	f7ff ff27 	bl	8008ae4 <__multiply>
 8008c96:	6020      	str	r0, [r4, #0]
 8008c98:	f8c0 8000 	str.w	r8, [r0]
 8008c9c:	4604      	mov	r4, r0
 8008c9e:	e7e4      	b.n	8008c6a <__pow5mult+0x5a>
 8008ca0:	4638      	mov	r0, r7
 8008ca2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ca6:	bf00      	nop
 8008ca8:	080098b8 	.word	0x080098b8

08008cac <__lshift>:
 8008cac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cb0:	460c      	mov	r4, r1
 8008cb2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008cb6:	6923      	ldr	r3, [r4, #16]
 8008cb8:	6849      	ldr	r1, [r1, #4]
 8008cba:	eb0a 0903 	add.w	r9, sl, r3
 8008cbe:	68a3      	ldr	r3, [r4, #8]
 8008cc0:	4607      	mov	r7, r0
 8008cc2:	4616      	mov	r6, r2
 8008cc4:	f109 0501 	add.w	r5, r9, #1
 8008cc8:	42ab      	cmp	r3, r5
 8008cca:	db32      	blt.n	8008d32 <__lshift+0x86>
 8008ccc:	4638      	mov	r0, r7
 8008cce:	f7ff fdee 	bl	80088ae <_Balloc>
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	4680      	mov	r8, r0
 8008cd6:	f100 0114 	add.w	r1, r0, #20
 8008cda:	461a      	mov	r2, r3
 8008cdc:	4553      	cmp	r3, sl
 8008cde:	db2b      	blt.n	8008d38 <__lshift+0x8c>
 8008ce0:	6920      	ldr	r0, [r4, #16]
 8008ce2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008ce6:	f104 0314 	add.w	r3, r4, #20
 8008cea:	f016 021f 	ands.w	r2, r6, #31
 8008cee:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008cf2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008cf6:	d025      	beq.n	8008d44 <__lshift+0x98>
 8008cf8:	f1c2 0e20 	rsb	lr, r2, #32
 8008cfc:	2000      	movs	r0, #0
 8008cfe:	681e      	ldr	r6, [r3, #0]
 8008d00:	468a      	mov	sl, r1
 8008d02:	4096      	lsls	r6, r2
 8008d04:	4330      	orrs	r0, r6
 8008d06:	f84a 0b04 	str.w	r0, [sl], #4
 8008d0a:	f853 0b04 	ldr.w	r0, [r3], #4
 8008d0e:	459c      	cmp	ip, r3
 8008d10:	fa20 f00e 	lsr.w	r0, r0, lr
 8008d14:	d814      	bhi.n	8008d40 <__lshift+0x94>
 8008d16:	6048      	str	r0, [r1, #4]
 8008d18:	b108      	cbz	r0, 8008d1e <__lshift+0x72>
 8008d1a:	f109 0502 	add.w	r5, r9, #2
 8008d1e:	3d01      	subs	r5, #1
 8008d20:	4638      	mov	r0, r7
 8008d22:	f8c8 5010 	str.w	r5, [r8, #16]
 8008d26:	4621      	mov	r1, r4
 8008d28:	f7ff fdf5 	bl	8008916 <_Bfree>
 8008d2c:	4640      	mov	r0, r8
 8008d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d32:	3101      	adds	r1, #1
 8008d34:	005b      	lsls	r3, r3, #1
 8008d36:	e7c7      	b.n	8008cc8 <__lshift+0x1c>
 8008d38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008d3c:	3301      	adds	r3, #1
 8008d3e:	e7cd      	b.n	8008cdc <__lshift+0x30>
 8008d40:	4651      	mov	r1, sl
 8008d42:	e7dc      	b.n	8008cfe <__lshift+0x52>
 8008d44:	3904      	subs	r1, #4
 8008d46:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d4a:	f841 2f04 	str.w	r2, [r1, #4]!
 8008d4e:	459c      	cmp	ip, r3
 8008d50:	d8f9      	bhi.n	8008d46 <__lshift+0x9a>
 8008d52:	e7e4      	b.n	8008d1e <__lshift+0x72>

08008d54 <__mcmp>:
 8008d54:	6903      	ldr	r3, [r0, #16]
 8008d56:	690a      	ldr	r2, [r1, #16]
 8008d58:	1a9b      	subs	r3, r3, r2
 8008d5a:	b530      	push	{r4, r5, lr}
 8008d5c:	d10c      	bne.n	8008d78 <__mcmp+0x24>
 8008d5e:	0092      	lsls	r2, r2, #2
 8008d60:	3014      	adds	r0, #20
 8008d62:	3114      	adds	r1, #20
 8008d64:	1884      	adds	r4, r0, r2
 8008d66:	4411      	add	r1, r2
 8008d68:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008d6c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008d70:	4295      	cmp	r5, r2
 8008d72:	d003      	beq.n	8008d7c <__mcmp+0x28>
 8008d74:	d305      	bcc.n	8008d82 <__mcmp+0x2e>
 8008d76:	2301      	movs	r3, #1
 8008d78:	4618      	mov	r0, r3
 8008d7a:	bd30      	pop	{r4, r5, pc}
 8008d7c:	42a0      	cmp	r0, r4
 8008d7e:	d3f3      	bcc.n	8008d68 <__mcmp+0x14>
 8008d80:	e7fa      	b.n	8008d78 <__mcmp+0x24>
 8008d82:	f04f 33ff 	mov.w	r3, #4294967295
 8008d86:	e7f7      	b.n	8008d78 <__mcmp+0x24>

08008d88 <__mdiff>:
 8008d88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d8c:	460d      	mov	r5, r1
 8008d8e:	4607      	mov	r7, r0
 8008d90:	4611      	mov	r1, r2
 8008d92:	4628      	mov	r0, r5
 8008d94:	4614      	mov	r4, r2
 8008d96:	f7ff ffdd 	bl	8008d54 <__mcmp>
 8008d9a:	1e06      	subs	r6, r0, #0
 8008d9c:	d108      	bne.n	8008db0 <__mdiff+0x28>
 8008d9e:	4631      	mov	r1, r6
 8008da0:	4638      	mov	r0, r7
 8008da2:	f7ff fd84 	bl	80088ae <_Balloc>
 8008da6:	2301      	movs	r3, #1
 8008da8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008dac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008db0:	bfa4      	itt	ge
 8008db2:	4623      	movge	r3, r4
 8008db4:	462c      	movge	r4, r5
 8008db6:	4638      	mov	r0, r7
 8008db8:	6861      	ldr	r1, [r4, #4]
 8008dba:	bfa6      	itte	ge
 8008dbc:	461d      	movge	r5, r3
 8008dbe:	2600      	movge	r6, #0
 8008dc0:	2601      	movlt	r6, #1
 8008dc2:	f7ff fd74 	bl	80088ae <_Balloc>
 8008dc6:	692b      	ldr	r3, [r5, #16]
 8008dc8:	60c6      	str	r6, [r0, #12]
 8008dca:	6926      	ldr	r6, [r4, #16]
 8008dcc:	f105 0914 	add.w	r9, r5, #20
 8008dd0:	f104 0214 	add.w	r2, r4, #20
 8008dd4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8008dd8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8008ddc:	f100 0514 	add.w	r5, r0, #20
 8008de0:	f04f 0e00 	mov.w	lr, #0
 8008de4:	f852 ab04 	ldr.w	sl, [r2], #4
 8008de8:	f859 4b04 	ldr.w	r4, [r9], #4
 8008dec:	fa1e f18a 	uxtah	r1, lr, sl
 8008df0:	b2a3      	uxth	r3, r4
 8008df2:	1ac9      	subs	r1, r1, r3
 8008df4:	0c23      	lsrs	r3, r4, #16
 8008df6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8008dfa:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008dfe:	b289      	uxth	r1, r1
 8008e00:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8008e04:	45c8      	cmp	r8, r9
 8008e06:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008e0a:	4694      	mov	ip, r2
 8008e0c:	f845 3b04 	str.w	r3, [r5], #4
 8008e10:	d8e8      	bhi.n	8008de4 <__mdiff+0x5c>
 8008e12:	45bc      	cmp	ip, r7
 8008e14:	d304      	bcc.n	8008e20 <__mdiff+0x98>
 8008e16:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8008e1a:	b183      	cbz	r3, 8008e3e <__mdiff+0xb6>
 8008e1c:	6106      	str	r6, [r0, #16]
 8008e1e:	e7c5      	b.n	8008dac <__mdiff+0x24>
 8008e20:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008e24:	fa1e f381 	uxtah	r3, lr, r1
 8008e28:	141a      	asrs	r2, r3, #16
 8008e2a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008e2e:	b29b      	uxth	r3, r3
 8008e30:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008e34:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8008e38:	f845 3b04 	str.w	r3, [r5], #4
 8008e3c:	e7e9      	b.n	8008e12 <__mdiff+0x8a>
 8008e3e:	3e01      	subs	r6, #1
 8008e40:	e7e9      	b.n	8008e16 <__mdiff+0x8e>
	...

08008e44 <__ulp>:
 8008e44:	4b12      	ldr	r3, [pc, #72]	; (8008e90 <__ulp+0x4c>)
 8008e46:	ee10 2a90 	vmov	r2, s1
 8008e4a:	401a      	ands	r2, r3
 8008e4c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	dd04      	ble.n	8008e5e <__ulp+0x1a>
 8008e54:	2000      	movs	r0, #0
 8008e56:	4619      	mov	r1, r3
 8008e58:	ec41 0b10 	vmov	d0, r0, r1
 8008e5c:	4770      	bx	lr
 8008e5e:	425b      	negs	r3, r3
 8008e60:	151b      	asrs	r3, r3, #20
 8008e62:	2b13      	cmp	r3, #19
 8008e64:	f04f 0000 	mov.w	r0, #0
 8008e68:	f04f 0100 	mov.w	r1, #0
 8008e6c:	dc04      	bgt.n	8008e78 <__ulp+0x34>
 8008e6e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8008e72:	fa42 f103 	asr.w	r1, r2, r3
 8008e76:	e7ef      	b.n	8008e58 <__ulp+0x14>
 8008e78:	3b14      	subs	r3, #20
 8008e7a:	2b1e      	cmp	r3, #30
 8008e7c:	f04f 0201 	mov.w	r2, #1
 8008e80:	bfda      	itte	le
 8008e82:	f1c3 031f 	rsble	r3, r3, #31
 8008e86:	fa02 f303 	lslle.w	r3, r2, r3
 8008e8a:	4613      	movgt	r3, r2
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	e7e3      	b.n	8008e58 <__ulp+0x14>
 8008e90:	7ff00000 	.word	0x7ff00000

08008e94 <__b2d>:
 8008e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e96:	6905      	ldr	r5, [r0, #16]
 8008e98:	f100 0714 	add.w	r7, r0, #20
 8008e9c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008ea0:	1f2e      	subs	r6, r5, #4
 8008ea2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8008ea6:	4620      	mov	r0, r4
 8008ea8:	f7ff fdc5 	bl	8008a36 <__hi0bits>
 8008eac:	f1c0 0320 	rsb	r3, r0, #32
 8008eb0:	280a      	cmp	r0, #10
 8008eb2:	600b      	str	r3, [r1, #0]
 8008eb4:	f8df c074 	ldr.w	ip, [pc, #116]	; 8008f2c <__b2d+0x98>
 8008eb8:	dc14      	bgt.n	8008ee4 <__b2d+0x50>
 8008eba:	f1c0 0e0b 	rsb	lr, r0, #11
 8008ebe:	fa24 f10e 	lsr.w	r1, r4, lr
 8008ec2:	42b7      	cmp	r7, r6
 8008ec4:	ea41 030c 	orr.w	r3, r1, ip
 8008ec8:	bf34      	ite	cc
 8008eca:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008ece:	2100      	movcs	r1, #0
 8008ed0:	3015      	adds	r0, #21
 8008ed2:	fa04 f000 	lsl.w	r0, r4, r0
 8008ed6:	fa21 f10e 	lsr.w	r1, r1, lr
 8008eda:	ea40 0201 	orr.w	r2, r0, r1
 8008ede:	ec43 2b10 	vmov	d0, r2, r3
 8008ee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ee4:	42b7      	cmp	r7, r6
 8008ee6:	bf3a      	itte	cc
 8008ee8:	f1a5 0608 	subcc.w	r6, r5, #8
 8008eec:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008ef0:	2100      	movcs	r1, #0
 8008ef2:	380b      	subs	r0, #11
 8008ef4:	d015      	beq.n	8008f22 <__b2d+0x8e>
 8008ef6:	4084      	lsls	r4, r0
 8008ef8:	f1c0 0520 	rsb	r5, r0, #32
 8008efc:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8008f00:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8008f04:	42be      	cmp	r6, r7
 8008f06:	fa21 fc05 	lsr.w	ip, r1, r5
 8008f0a:	ea44 030c 	orr.w	r3, r4, ip
 8008f0e:	bf8c      	ite	hi
 8008f10:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8008f14:	2400      	movls	r4, #0
 8008f16:	fa01 f000 	lsl.w	r0, r1, r0
 8008f1a:	40ec      	lsrs	r4, r5
 8008f1c:	ea40 0204 	orr.w	r2, r0, r4
 8008f20:	e7dd      	b.n	8008ede <__b2d+0x4a>
 8008f22:	ea44 030c 	orr.w	r3, r4, ip
 8008f26:	460a      	mov	r2, r1
 8008f28:	e7d9      	b.n	8008ede <__b2d+0x4a>
 8008f2a:	bf00      	nop
 8008f2c:	3ff00000 	.word	0x3ff00000

08008f30 <__d2b>:
 8008f30:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008f34:	460e      	mov	r6, r1
 8008f36:	2101      	movs	r1, #1
 8008f38:	ec59 8b10 	vmov	r8, r9, d0
 8008f3c:	4615      	mov	r5, r2
 8008f3e:	f7ff fcb6 	bl	80088ae <_Balloc>
 8008f42:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008f46:	4607      	mov	r7, r0
 8008f48:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008f4c:	bb34      	cbnz	r4, 8008f9c <__d2b+0x6c>
 8008f4e:	9301      	str	r3, [sp, #4]
 8008f50:	f1b8 0300 	subs.w	r3, r8, #0
 8008f54:	d027      	beq.n	8008fa6 <__d2b+0x76>
 8008f56:	a802      	add	r0, sp, #8
 8008f58:	f840 3d08 	str.w	r3, [r0, #-8]!
 8008f5c:	f7ff fd8a 	bl	8008a74 <__lo0bits>
 8008f60:	9900      	ldr	r1, [sp, #0]
 8008f62:	b1f0      	cbz	r0, 8008fa2 <__d2b+0x72>
 8008f64:	9a01      	ldr	r2, [sp, #4]
 8008f66:	f1c0 0320 	rsb	r3, r0, #32
 8008f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8008f6e:	430b      	orrs	r3, r1
 8008f70:	40c2      	lsrs	r2, r0
 8008f72:	617b      	str	r3, [r7, #20]
 8008f74:	9201      	str	r2, [sp, #4]
 8008f76:	9b01      	ldr	r3, [sp, #4]
 8008f78:	61bb      	str	r3, [r7, #24]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	bf14      	ite	ne
 8008f7e:	2102      	movne	r1, #2
 8008f80:	2101      	moveq	r1, #1
 8008f82:	6139      	str	r1, [r7, #16]
 8008f84:	b1c4      	cbz	r4, 8008fb8 <__d2b+0x88>
 8008f86:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008f8a:	4404      	add	r4, r0
 8008f8c:	6034      	str	r4, [r6, #0]
 8008f8e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008f92:	6028      	str	r0, [r5, #0]
 8008f94:	4638      	mov	r0, r7
 8008f96:	b003      	add	sp, #12
 8008f98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008f9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008fa0:	e7d5      	b.n	8008f4e <__d2b+0x1e>
 8008fa2:	6179      	str	r1, [r7, #20]
 8008fa4:	e7e7      	b.n	8008f76 <__d2b+0x46>
 8008fa6:	a801      	add	r0, sp, #4
 8008fa8:	f7ff fd64 	bl	8008a74 <__lo0bits>
 8008fac:	9b01      	ldr	r3, [sp, #4]
 8008fae:	617b      	str	r3, [r7, #20]
 8008fb0:	2101      	movs	r1, #1
 8008fb2:	6139      	str	r1, [r7, #16]
 8008fb4:	3020      	adds	r0, #32
 8008fb6:	e7e5      	b.n	8008f84 <__d2b+0x54>
 8008fb8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8008fbc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008fc0:	6030      	str	r0, [r6, #0]
 8008fc2:	6918      	ldr	r0, [r3, #16]
 8008fc4:	f7ff fd37 	bl	8008a36 <__hi0bits>
 8008fc8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008fcc:	e7e1      	b.n	8008f92 <__d2b+0x62>

08008fce <__ratio>:
 8008fce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fd2:	4688      	mov	r8, r1
 8008fd4:	4669      	mov	r1, sp
 8008fd6:	4681      	mov	r9, r0
 8008fd8:	f7ff ff5c 	bl	8008e94 <__b2d>
 8008fdc:	a901      	add	r1, sp, #4
 8008fde:	4640      	mov	r0, r8
 8008fe0:	ec57 6b10 	vmov	r6, r7, d0
 8008fe4:	f7ff ff56 	bl	8008e94 <__b2d>
 8008fe8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008fec:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008ff0:	eba3 0c02 	sub.w	ip, r3, r2
 8008ff4:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008ff8:	1a9b      	subs	r3, r3, r2
 8008ffa:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008ffe:	ec5b ab10 	vmov	sl, fp, d0
 8009002:	2b00      	cmp	r3, #0
 8009004:	bfce      	itee	gt
 8009006:	463a      	movgt	r2, r7
 8009008:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800900c:	465a      	movle	r2, fp
 800900e:	4659      	mov	r1, fp
 8009010:	463d      	mov	r5, r7
 8009012:	bfd4      	ite	le
 8009014:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8009018:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800901c:	4630      	mov	r0, r6
 800901e:	ee10 2a10 	vmov	r2, s0
 8009022:	460b      	mov	r3, r1
 8009024:	4629      	mov	r1, r5
 8009026:	f7f7 fc11 	bl	800084c <__aeabi_ddiv>
 800902a:	ec41 0b10 	vmov	d0, r0, r1
 800902e:	b003      	add	sp, #12
 8009030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009034 <__copybits>:
 8009034:	3901      	subs	r1, #1
 8009036:	b510      	push	{r4, lr}
 8009038:	1149      	asrs	r1, r1, #5
 800903a:	6914      	ldr	r4, [r2, #16]
 800903c:	3101      	adds	r1, #1
 800903e:	f102 0314 	add.w	r3, r2, #20
 8009042:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009046:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800904a:	42a3      	cmp	r3, r4
 800904c:	4602      	mov	r2, r0
 800904e:	d303      	bcc.n	8009058 <__copybits+0x24>
 8009050:	2300      	movs	r3, #0
 8009052:	428a      	cmp	r2, r1
 8009054:	d305      	bcc.n	8009062 <__copybits+0x2e>
 8009056:	bd10      	pop	{r4, pc}
 8009058:	f853 2b04 	ldr.w	r2, [r3], #4
 800905c:	f840 2b04 	str.w	r2, [r0], #4
 8009060:	e7f3      	b.n	800904a <__copybits+0x16>
 8009062:	f842 3b04 	str.w	r3, [r2], #4
 8009066:	e7f4      	b.n	8009052 <__copybits+0x1e>

08009068 <__any_on>:
 8009068:	f100 0214 	add.w	r2, r0, #20
 800906c:	6900      	ldr	r0, [r0, #16]
 800906e:	114b      	asrs	r3, r1, #5
 8009070:	4298      	cmp	r0, r3
 8009072:	b510      	push	{r4, lr}
 8009074:	db11      	blt.n	800909a <__any_on+0x32>
 8009076:	dd0a      	ble.n	800908e <__any_on+0x26>
 8009078:	f011 011f 	ands.w	r1, r1, #31
 800907c:	d007      	beq.n	800908e <__any_on+0x26>
 800907e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009082:	fa24 f001 	lsr.w	r0, r4, r1
 8009086:	fa00 f101 	lsl.w	r1, r0, r1
 800908a:	428c      	cmp	r4, r1
 800908c:	d10b      	bne.n	80090a6 <__any_on+0x3e>
 800908e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009092:	4293      	cmp	r3, r2
 8009094:	d803      	bhi.n	800909e <__any_on+0x36>
 8009096:	2000      	movs	r0, #0
 8009098:	bd10      	pop	{r4, pc}
 800909a:	4603      	mov	r3, r0
 800909c:	e7f7      	b.n	800908e <__any_on+0x26>
 800909e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80090a2:	2900      	cmp	r1, #0
 80090a4:	d0f5      	beq.n	8009092 <__any_on+0x2a>
 80090a6:	2001      	movs	r0, #1
 80090a8:	e7f6      	b.n	8009098 <__any_on+0x30>

080090aa <_calloc_r>:
 80090aa:	b538      	push	{r3, r4, r5, lr}
 80090ac:	fb02 f401 	mul.w	r4, r2, r1
 80090b0:	4621      	mov	r1, r4
 80090b2:	f000 f857 	bl	8009164 <_malloc_r>
 80090b6:	4605      	mov	r5, r0
 80090b8:	b118      	cbz	r0, 80090c2 <_calloc_r+0x18>
 80090ba:	4622      	mov	r2, r4
 80090bc:	2100      	movs	r1, #0
 80090be:	f7fc fd03 	bl	8005ac8 <memset>
 80090c2:	4628      	mov	r0, r5
 80090c4:	bd38      	pop	{r3, r4, r5, pc}
	...

080090c8 <_free_r>:
 80090c8:	b538      	push	{r3, r4, r5, lr}
 80090ca:	4605      	mov	r5, r0
 80090cc:	2900      	cmp	r1, #0
 80090ce:	d045      	beq.n	800915c <_free_r+0x94>
 80090d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090d4:	1f0c      	subs	r4, r1, #4
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	bfb8      	it	lt
 80090da:	18e4      	addlt	r4, r4, r3
 80090dc:	f000 fa36 	bl	800954c <__malloc_lock>
 80090e0:	4a1f      	ldr	r2, [pc, #124]	; (8009160 <_free_r+0x98>)
 80090e2:	6813      	ldr	r3, [r2, #0]
 80090e4:	4610      	mov	r0, r2
 80090e6:	b933      	cbnz	r3, 80090f6 <_free_r+0x2e>
 80090e8:	6063      	str	r3, [r4, #4]
 80090ea:	6014      	str	r4, [r2, #0]
 80090ec:	4628      	mov	r0, r5
 80090ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80090f2:	f000 ba2c 	b.w	800954e <__malloc_unlock>
 80090f6:	42a3      	cmp	r3, r4
 80090f8:	d90c      	bls.n	8009114 <_free_r+0x4c>
 80090fa:	6821      	ldr	r1, [r4, #0]
 80090fc:	1862      	adds	r2, r4, r1
 80090fe:	4293      	cmp	r3, r2
 8009100:	bf04      	itt	eq
 8009102:	681a      	ldreq	r2, [r3, #0]
 8009104:	685b      	ldreq	r3, [r3, #4]
 8009106:	6063      	str	r3, [r4, #4]
 8009108:	bf04      	itt	eq
 800910a:	1852      	addeq	r2, r2, r1
 800910c:	6022      	streq	r2, [r4, #0]
 800910e:	6004      	str	r4, [r0, #0]
 8009110:	e7ec      	b.n	80090ec <_free_r+0x24>
 8009112:	4613      	mov	r3, r2
 8009114:	685a      	ldr	r2, [r3, #4]
 8009116:	b10a      	cbz	r2, 800911c <_free_r+0x54>
 8009118:	42a2      	cmp	r2, r4
 800911a:	d9fa      	bls.n	8009112 <_free_r+0x4a>
 800911c:	6819      	ldr	r1, [r3, #0]
 800911e:	1858      	adds	r0, r3, r1
 8009120:	42a0      	cmp	r0, r4
 8009122:	d10b      	bne.n	800913c <_free_r+0x74>
 8009124:	6820      	ldr	r0, [r4, #0]
 8009126:	4401      	add	r1, r0
 8009128:	1858      	adds	r0, r3, r1
 800912a:	4282      	cmp	r2, r0
 800912c:	6019      	str	r1, [r3, #0]
 800912e:	d1dd      	bne.n	80090ec <_free_r+0x24>
 8009130:	6810      	ldr	r0, [r2, #0]
 8009132:	6852      	ldr	r2, [r2, #4]
 8009134:	605a      	str	r2, [r3, #4]
 8009136:	4401      	add	r1, r0
 8009138:	6019      	str	r1, [r3, #0]
 800913a:	e7d7      	b.n	80090ec <_free_r+0x24>
 800913c:	d902      	bls.n	8009144 <_free_r+0x7c>
 800913e:	230c      	movs	r3, #12
 8009140:	602b      	str	r3, [r5, #0]
 8009142:	e7d3      	b.n	80090ec <_free_r+0x24>
 8009144:	6820      	ldr	r0, [r4, #0]
 8009146:	1821      	adds	r1, r4, r0
 8009148:	428a      	cmp	r2, r1
 800914a:	bf04      	itt	eq
 800914c:	6811      	ldreq	r1, [r2, #0]
 800914e:	6852      	ldreq	r2, [r2, #4]
 8009150:	6062      	str	r2, [r4, #4]
 8009152:	bf04      	itt	eq
 8009154:	1809      	addeq	r1, r1, r0
 8009156:	6021      	streq	r1, [r4, #0]
 8009158:	605c      	str	r4, [r3, #4]
 800915a:	e7c7      	b.n	80090ec <_free_r+0x24>
 800915c:	bd38      	pop	{r3, r4, r5, pc}
 800915e:	bf00      	nop
 8009160:	2000023c 	.word	0x2000023c

08009164 <_malloc_r>:
 8009164:	b570      	push	{r4, r5, r6, lr}
 8009166:	1ccd      	adds	r5, r1, #3
 8009168:	f025 0503 	bic.w	r5, r5, #3
 800916c:	3508      	adds	r5, #8
 800916e:	2d0c      	cmp	r5, #12
 8009170:	bf38      	it	cc
 8009172:	250c      	movcc	r5, #12
 8009174:	2d00      	cmp	r5, #0
 8009176:	4606      	mov	r6, r0
 8009178:	db01      	blt.n	800917e <_malloc_r+0x1a>
 800917a:	42a9      	cmp	r1, r5
 800917c:	d903      	bls.n	8009186 <_malloc_r+0x22>
 800917e:	230c      	movs	r3, #12
 8009180:	6033      	str	r3, [r6, #0]
 8009182:	2000      	movs	r0, #0
 8009184:	bd70      	pop	{r4, r5, r6, pc}
 8009186:	f000 f9e1 	bl	800954c <__malloc_lock>
 800918a:	4a21      	ldr	r2, [pc, #132]	; (8009210 <_malloc_r+0xac>)
 800918c:	6814      	ldr	r4, [r2, #0]
 800918e:	4621      	mov	r1, r4
 8009190:	b991      	cbnz	r1, 80091b8 <_malloc_r+0x54>
 8009192:	4c20      	ldr	r4, [pc, #128]	; (8009214 <_malloc_r+0xb0>)
 8009194:	6823      	ldr	r3, [r4, #0]
 8009196:	b91b      	cbnz	r3, 80091a0 <_malloc_r+0x3c>
 8009198:	4630      	mov	r0, r6
 800919a:	f000 f98f 	bl	80094bc <_sbrk_r>
 800919e:	6020      	str	r0, [r4, #0]
 80091a0:	4629      	mov	r1, r5
 80091a2:	4630      	mov	r0, r6
 80091a4:	f000 f98a 	bl	80094bc <_sbrk_r>
 80091a8:	1c43      	adds	r3, r0, #1
 80091aa:	d124      	bne.n	80091f6 <_malloc_r+0x92>
 80091ac:	230c      	movs	r3, #12
 80091ae:	6033      	str	r3, [r6, #0]
 80091b0:	4630      	mov	r0, r6
 80091b2:	f000 f9cc 	bl	800954e <__malloc_unlock>
 80091b6:	e7e4      	b.n	8009182 <_malloc_r+0x1e>
 80091b8:	680b      	ldr	r3, [r1, #0]
 80091ba:	1b5b      	subs	r3, r3, r5
 80091bc:	d418      	bmi.n	80091f0 <_malloc_r+0x8c>
 80091be:	2b0b      	cmp	r3, #11
 80091c0:	d90f      	bls.n	80091e2 <_malloc_r+0x7e>
 80091c2:	600b      	str	r3, [r1, #0]
 80091c4:	50cd      	str	r5, [r1, r3]
 80091c6:	18cc      	adds	r4, r1, r3
 80091c8:	4630      	mov	r0, r6
 80091ca:	f000 f9c0 	bl	800954e <__malloc_unlock>
 80091ce:	f104 000b 	add.w	r0, r4, #11
 80091d2:	1d23      	adds	r3, r4, #4
 80091d4:	f020 0007 	bic.w	r0, r0, #7
 80091d8:	1ac3      	subs	r3, r0, r3
 80091da:	d0d3      	beq.n	8009184 <_malloc_r+0x20>
 80091dc:	425a      	negs	r2, r3
 80091de:	50e2      	str	r2, [r4, r3]
 80091e0:	e7d0      	b.n	8009184 <_malloc_r+0x20>
 80091e2:	428c      	cmp	r4, r1
 80091e4:	684b      	ldr	r3, [r1, #4]
 80091e6:	bf16      	itet	ne
 80091e8:	6063      	strne	r3, [r4, #4]
 80091ea:	6013      	streq	r3, [r2, #0]
 80091ec:	460c      	movne	r4, r1
 80091ee:	e7eb      	b.n	80091c8 <_malloc_r+0x64>
 80091f0:	460c      	mov	r4, r1
 80091f2:	6849      	ldr	r1, [r1, #4]
 80091f4:	e7cc      	b.n	8009190 <_malloc_r+0x2c>
 80091f6:	1cc4      	adds	r4, r0, #3
 80091f8:	f024 0403 	bic.w	r4, r4, #3
 80091fc:	42a0      	cmp	r0, r4
 80091fe:	d005      	beq.n	800920c <_malloc_r+0xa8>
 8009200:	1a21      	subs	r1, r4, r0
 8009202:	4630      	mov	r0, r6
 8009204:	f000 f95a 	bl	80094bc <_sbrk_r>
 8009208:	3001      	adds	r0, #1
 800920a:	d0cf      	beq.n	80091ac <_malloc_r+0x48>
 800920c:	6025      	str	r5, [r4, #0]
 800920e:	e7db      	b.n	80091c8 <_malloc_r+0x64>
 8009210:	2000023c 	.word	0x2000023c
 8009214:	20000240 	.word	0x20000240

08009218 <__ssputs_r>:
 8009218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800921c:	688e      	ldr	r6, [r1, #8]
 800921e:	429e      	cmp	r6, r3
 8009220:	4682      	mov	sl, r0
 8009222:	460c      	mov	r4, r1
 8009224:	4690      	mov	r8, r2
 8009226:	4699      	mov	r9, r3
 8009228:	d837      	bhi.n	800929a <__ssputs_r+0x82>
 800922a:	898a      	ldrh	r2, [r1, #12]
 800922c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009230:	d031      	beq.n	8009296 <__ssputs_r+0x7e>
 8009232:	6825      	ldr	r5, [r4, #0]
 8009234:	6909      	ldr	r1, [r1, #16]
 8009236:	1a6f      	subs	r7, r5, r1
 8009238:	6965      	ldr	r5, [r4, #20]
 800923a:	2302      	movs	r3, #2
 800923c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009240:	fb95 f5f3 	sdiv	r5, r5, r3
 8009244:	f109 0301 	add.w	r3, r9, #1
 8009248:	443b      	add	r3, r7
 800924a:	429d      	cmp	r5, r3
 800924c:	bf38      	it	cc
 800924e:	461d      	movcc	r5, r3
 8009250:	0553      	lsls	r3, r2, #21
 8009252:	d530      	bpl.n	80092b6 <__ssputs_r+0x9e>
 8009254:	4629      	mov	r1, r5
 8009256:	f7ff ff85 	bl	8009164 <_malloc_r>
 800925a:	4606      	mov	r6, r0
 800925c:	b950      	cbnz	r0, 8009274 <__ssputs_r+0x5c>
 800925e:	230c      	movs	r3, #12
 8009260:	f8ca 3000 	str.w	r3, [sl]
 8009264:	89a3      	ldrh	r3, [r4, #12]
 8009266:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800926a:	81a3      	strh	r3, [r4, #12]
 800926c:	f04f 30ff 	mov.w	r0, #4294967295
 8009270:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009274:	463a      	mov	r2, r7
 8009276:	6921      	ldr	r1, [r4, #16]
 8009278:	f7ff fb0e 	bl	8008898 <memcpy>
 800927c:	89a3      	ldrh	r3, [r4, #12]
 800927e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009282:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009286:	81a3      	strh	r3, [r4, #12]
 8009288:	6126      	str	r6, [r4, #16]
 800928a:	6165      	str	r5, [r4, #20]
 800928c:	443e      	add	r6, r7
 800928e:	1bed      	subs	r5, r5, r7
 8009290:	6026      	str	r6, [r4, #0]
 8009292:	60a5      	str	r5, [r4, #8]
 8009294:	464e      	mov	r6, r9
 8009296:	454e      	cmp	r6, r9
 8009298:	d900      	bls.n	800929c <__ssputs_r+0x84>
 800929a:	464e      	mov	r6, r9
 800929c:	4632      	mov	r2, r6
 800929e:	4641      	mov	r1, r8
 80092a0:	6820      	ldr	r0, [r4, #0]
 80092a2:	f000 f93a 	bl	800951a <memmove>
 80092a6:	68a3      	ldr	r3, [r4, #8]
 80092a8:	1b9b      	subs	r3, r3, r6
 80092aa:	60a3      	str	r3, [r4, #8]
 80092ac:	6823      	ldr	r3, [r4, #0]
 80092ae:	441e      	add	r6, r3
 80092b0:	6026      	str	r6, [r4, #0]
 80092b2:	2000      	movs	r0, #0
 80092b4:	e7dc      	b.n	8009270 <__ssputs_r+0x58>
 80092b6:	462a      	mov	r2, r5
 80092b8:	f000 f94a 	bl	8009550 <_realloc_r>
 80092bc:	4606      	mov	r6, r0
 80092be:	2800      	cmp	r0, #0
 80092c0:	d1e2      	bne.n	8009288 <__ssputs_r+0x70>
 80092c2:	6921      	ldr	r1, [r4, #16]
 80092c4:	4650      	mov	r0, sl
 80092c6:	f7ff feff 	bl	80090c8 <_free_r>
 80092ca:	e7c8      	b.n	800925e <__ssputs_r+0x46>

080092cc <_svfiprintf_r>:
 80092cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092d0:	461d      	mov	r5, r3
 80092d2:	898b      	ldrh	r3, [r1, #12]
 80092d4:	061f      	lsls	r7, r3, #24
 80092d6:	b09d      	sub	sp, #116	; 0x74
 80092d8:	4680      	mov	r8, r0
 80092da:	460c      	mov	r4, r1
 80092dc:	4616      	mov	r6, r2
 80092de:	d50f      	bpl.n	8009300 <_svfiprintf_r+0x34>
 80092e0:	690b      	ldr	r3, [r1, #16]
 80092e2:	b96b      	cbnz	r3, 8009300 <_svfiprintf_r+0x34>
 80092e4:	2140      	movs	r1, #64	; 0x40
 80092e6:	f7ff ff3d 	bl	8009164 <_malloc_r>
 80092ea:	6020      	str	r0, [r4, #0]
 80092ec:	6120      	str	r0, [r4, #16]
 80092ee:	b928      	cbnz	r0, 80092fc <_svfiprintf_r+0x30>
 80092f0:	230c      	movs	r3, #12
 80092f2:	f8c8 3000 	str.w	r3, [r8]
 80092f6:	f04f 30ff 	mov.w	r0, #4294967295
 80092fa:	e0c8      	b.n	800948e <_svfiprintf_r+0x1c2>
 80092fc:	2340      	movs	r3, #64	; 0x40
 80092fe:	6163      	str	r3, [r4, #20]
 8009300:	2300      	movs	r3, #0
 8009302:	9309      	str	r3, [sp, #36]	; 0x24
 8009304:	2320      	movs	r3, #32
 8009306:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800930a:	2330      	movs	r3, #48	; 0x30
 800930c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009310:	9503      	str	r5, [sp, #12]
 8009312:	f04f 0b01 	mov.w	fp, #1
 8009316:	4637      	mov	r7, r6
 8009318:	463d      	mov	r5, r7
 800931a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800931e:	b10b      	cbz	r3, 8009324 <_svfiprintf_r+0x58>
 8009320:	2b25      	cmp	r3, #37	; 0x25
 8009322:	d13e      	bne.n	80093a2 <_svfiprintf_r+0xd6>
 8009324:	ebb7 0a06 	subs.w	sl, r7, r6
 8009328:	d00b      	beq.n	8009342 <_svfiprintf_r+0x76>
 800932a:	4653      	mov	r3, sl
 800932c:	4632      	mov	r2, r6
 800932e:	4621      	mov	r1, r4
 8009330:	4640      	mov	r0, r8
 8009332:	f7ff ff71 	bl	8009218 <__ssputs_r>
 8009336:	3001      	adds	r0, #1
 8009338:	f000 80a4 	beq.w	8009484 <_svfiprintf_r+0x1b8>
 800933c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800933e:	4453      	add	r3, sl
 8009340:	9309      	str	r3, [sp, #36]	; 0x24
 8009342:	783b      	ldrb	r3, [r7, #0]
 8009344:	2b00      	cmp	r3, #0
 8009346:	f000 809d 	beq.w	8009484 <_svfiprintf_r+0x1b8>
 800934a:	2300      	movs	r3, #0
 800934c:	f04f 32ff 	mov.w	r2, #4294967295
 8009350:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009354:	9304      	str	r3, [sp, #16]
 8009356:	9307      	str	r3, [sp, #28]
 8009358:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800935c:	931a      	str	r3, [sp, #104]	; 0x68
 800935e:	462f      	mov	r7, r5
 8009360:	2205      	movs	r2, #5
 8009362:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009366:	4850      	ldr	r0, [pc, #320]	; (80094a8 <_svfiprintf_r+0x1dc>)
 8009368:	f7f6 ff3a 	bl	80001e0 <memchr>
 800936c:	9b04      	ldr	r3, [sp, #16]
 800936e:	b9d0      	cbnz	r0, 80093a6 <_svfiprintf_r+0xda>
 8009370:	06d9      	lsls	r1, r3, #27
 8009372:	bf44      	itt	mi
 8009374:	2220      	movmi	r2, #32
 8009376:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800937a:	071a      	lsls	r2, r3, #28
 800937c:	bf44      	itt	mi
 800937e:	222b      	movmi	r2, #43	; 0x2b
 8009380:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009384:	782a      	ldrb	r2, [r5, #0]
 8009386:	2a2a      	cmp	r2, #42	; 0x2a
 8009388:	d015      	beq.n	80093b6 <_svfiprintf_r+0xea>
 800938a:	9a07      	ldr	r2, [sp, #28]
 800938c:	462f      	mov	r7, r5
 800938e:	2000      	movs	r0, #0
 8009390:	250a      	movs	r5, #10
 8009392:	4639      	mov	r1, r7
 8009394:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009398:	3b30      	subs	r3, #48	; 0x30
 800939a:	2b09      	cmp	r3, #9
 800939c:	d94d      	bls.n	800943a <_svfiprintf_r+0x16e>
 800939e:	b1b8      	cbz	r0, 80093d0 <_svfiprintf_r+0x104>
 80093a0:	e00f      	b.n	80093c2 <_svfiprintf_r+0xf6>
 80093a2:	462f      	mov	r7, r5
 80093a4:	e7b8      	b.n	8009318 <_svfiprintf_r+0x4c>
 80093a6:	4a40      	ldr	r2, [pc, #256]	; (80094a8 <_svfiprintf_r+0x1dc>)
 80093a8:	1a80      	subs	r0, r0, r2
 80093aa:	fa0b f000 	lsl.w	r0, fp, r0
 80093ae:	4318      	orrs	r0, r3
 80093b0:	9004      	str	r0, [sp, #16]
 80093b2:	463d      	mov	r5, r7
 80093b4:	e7d3      	b.n	800935e <_svfiprintf_r+0x92>
 80093b6:	9a03      	ldr	r2, [sp, #12]
 80093b8:	1d11      	adds	r1, r2, #4
 80093ba:	6812      	ldr	r2, [r2, #0]
 80093bc:	9103      	str	r1, [sp, #12]
 80093be:	2a00      	cmp	r2, #0
 80093c0:	db01      	blt.n	80093c6 <_svfiprintf_r+0xfa>
 80093c2:	9207      	str	r2, [sp, #28]
 80093c4:	e004      	b.n	80093d0 <_svfiprintf_r+0x104>
 80093c6:	4252      	negs	r2, r2
 80093c8:	f043 0302 	orr.w	r3, r3, #2
 80093cc:	9207      	str	r2, [sp, #28]
 80093ce:	9304      	str	r3, [sp, #16]
 80093d0:	783b      	ldrb	r3, [r7, #0]
 80093d2:	2b2e      	cmp	r3, #46	; 0x2e
 80093d4:	d10c      	bne.n	80093f0 <_svfiprintf_r+0x124>
 80093d6:	787b      	ldrb	r3, [r7, #1]
 80093d8:	2b2a      	cmp	r3, #42	; 0x2a
 80093da:	d133      	bne.n	8009444 <_svfiprintf_r+0x178>
 80093dc:	9b03      	ldr	r3, [sp, #12]
 80093de:	1d1a      	adds	r2, r3, #4
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	9203      	str	r2, [sp, #12]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	bfb8      	it	lt
 80093e8:	f04f 33ff 	movlt.w	r3, #4294967295
 80093ec:	3702      	adds	r7, #2
 80093ee:	9305      	str	r3, [sp, #20]
 80093f0:	4d2e      	ldr	r5, [pc, #184]	; (80094ac <_svfiprintf_r+0x1e0>)
 80093f2:	7839      	ldrb	r1, [r7, #0]
 80093f4:	2203      	movs	r2, #3
 80093f6:	4628      	mov	r0, r5
 80093f8:	f7f6 fef2 	bl	80001e0 <memchr>
 80093fc:	b138      	cbz	r0, 800940e <_svfiprintf_r+0x142>
 80093fe:	2340      	movs	r3, #64	; 0x40
 8009400:	1b40      	subs	r0, r0, r5
 8009402:	fa03 f000 	lsl.w	r0, r3, r0
 8009406:	9b04      	ldr	r3, [sp, #16]
 8009408:	4303      	orrs	r3, r0
 800940a:	3701      	adds	r7, #1
 800940c:	9304      	str	r3, [sp, #16]
 800940e:	7839      	ldrb	r1, [r7, #0]
 8009410:	4827      	ldr	r0, [pc, #156]	; (80094b0 <_svfiprintf_r+0x1e4>)
 8009412:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009416:	2206      	movs	r2, #6
 8009418:	1c7e      	adds	r6, r7, #1
 800941a:	f7f6 fee1 	bl	80001e0 <memchr>
 800941e:	2800      	cmp	r0, #0
 8009420:	d038      	beq.n	8009494 <_svfiprintf_r+0x1c8>
 8009422:	4b24      	ldr	r3, [pc, #144]	; (80094b4 <_svfiprintf_r+0x1e8>)
 8009424:	bb13      	cbnz	r3, 800946c <_svfiprintf_r+0x1a0>
 8009426:	9b03      	ldr	r3, [sp, #12]
 8009428:	3307      	adds	r3, #7
 800942a:	f023 0307 	bic.w	r3, r3, #7
 800942e:	3308      	adds	r3, #8
 8009430:	9303      	str	r3, [sp, #12]
 8009432:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009434:	444b      	add	r3, r9
 8009436:	9309      	str	r3, [sp, #36]	; 0x24
 8009438:	e76d      	b.n	8009316 <_svfiprintf_r+0x4a>
 800943a:	fb05 3202 	mla	r2, r5, r2, r3
 800943e:	2001      	movs	r0, #1
 8009440:	460f      	mov	r7, r1
 8009442:	e7a6      	b.n	8009392 <_svfiprintf_r+0xc6>
 8009444:	2300      	movs	r3, #0
 8009446:	3701      	adds	r7, #1
 8009448:	9305      	str	r3, [sp, #20]
 800944a:	4619      	mov	r1, r3
 800944c:	250a      	movs	r5, #10
 800944e:	4638      	mov	r0, r7
 8009450:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009454:	3a30      	subs	r2, #48	; 0x30
 8009456:	2a09      	cmp	r2, #9
 8009458:	d903      	bls.n	8009462 <_svfiprintf_r+0x196>
 800945a:	2b00      	cmp	r3, #0
 800945c:	d0c8      	beq.n	80093f0 <_svfiprintf_r+0x124>
 800945e:	9105      	str	r1, [sp, #20]
 8009460:	e7c6      	b.n	80093f0 <_svfiprintf_r+0x124>
 8009462:	fb05 2101 	mla	r1, r5, r1, r2
 8009466:	2301      	movs	r3, #1
 8009468:	4607      	mov	r7, r0
 800946a:	e7f0      	b.n	800944e <_svfiprintf_r+0x182>
 800946c:	ab03      	add	r3, sp, #12
 800946e:	9300      	str	r3, [sp, #0]
 8009470:	4622      	mov	r2, r4
 8009472:	4b11      	ldr	r3, [pc, #68]	; (80094b8 <_svfiprintf_r+0x1ec>)
 8009474:	a904      	add	r1, sp, #16
 8009476:	4640      	mov	r0, r8
 8009478:	f7fc fbc2 	bl	8005c00 <_printf_float>
 800947c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009480:	4681      	mov	r9, r0
 8009482:	d1d6      	bne.n	8009432 <_svfiprintf_r+0x166>
 8009484:	89a3      	ldrh	r3, [r4, #12]
 8009486:	065b      	lsls	r3, r3, #25
 8009488:	f53f af35 	bmi.w	80092f6 <_svfiprintf_r+0x2a>
 800948c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800948e:	b01d      	add	sp, #116	; 0x74
 8009490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009494:	ab03      	add	r3, sp, #12
 8009496:	9300      	str	r3, [sp, #0]
 8009498:	4622      	mov	r2, r4
 800949a:	4b07      	ldr	r3, [pc, #28]	; (80094b8 <_svfiprintf_r+0x1ec>)
 800949c:	a904      	add	r1, sp, #16
 800949e:	4640      	mov	r0, r8
 80094a0:	f7fc fe64 	bl	800616c <_printf_i>
 80094a4:	e7ea      	b.n	800947c <_svfiprintf_r+0x1b0>
 80094a6:	bf00      	nop
 80094a8:	080098c4 	.word	0x080098c4
 80094ac:	080098ca 	.word	0x080098ca
 80094b0:	080098ce 	.word	0x080098ce
 80094b4:	08005c01 	.word	0x08005c01
 80094b8:	08009219 	.word	0x08009219

080094bc <_sbrk_r>:
 80094bc:	b538      	push	{r3, r4, r5, lr}
 80094be:	4c06      	ldr	r4, [pc, #24]	; (80094d8 <_sbrk_r+0x1c>)
 80094c0:	2300      	movs	r3, #0
 80094c2:	4605      	mov	r5, r0
 80094c4:	4608      	mov	r0, r1
 80094c6:	6023      	str	r3, [r4, #0]
 80094c8:	f7f9 f8e0 	bl	800268c <_sbrk>
 80094cc:	1c43      	adds	r3, r0, #1
 80094ce:	d102      	bne.n	80094d6 <_sbrk_r+0x1a>
 80094d0:	6823      	ldr	r3, [r4, #0]
 80094d2:	b103      	cbz	r3, 80094d6 <_sbrk_r+0x1a>
 80094d4:	602b      	str	r3, [r5, #0]
 80094d6:	bd38      	pop	{r3, r4, r5, pc}
 80094d8:	200003f4 	.word	0x200003f4

080094dc <strncmp>:
 80094dc:	b510      	push	{r4, lr}
 80094de:	b16a      	cbz	r2, 80094fc <strncmp+0x20>
 80094e0:	3901      	subs	r1, #1
 80094e2:	1884      	adds	r4, r0, r2
 80094e4:	f810 3b01 	ldrb.w	r3, [r0], #1
 80094e8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80094ec:	4293      	cmp	r3, r2
 80094ee:	d103      	bne.n	80094f8 <strncmp+0x1c>
 80094f0:	42a0      	cmp	r0, r4
 80094f2:	d001      	beq.n	80094f8 <strncmp+0x1c>
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d1f5      	bne.n	80094e4 <strncmp+0x8>
 80094f8:	1a98      	subs	r0, r3, r2
 80094fa:	bd10      	pop	{r4, pc}
 80094fc:	4610      	mov	r0, r2
 80094fe:	e7fc      	b.n	80094fa <strncmp+0x1e>

08009500 <__ascii_wctomb>:
 8009500:	b149      	cbz	r1, 8009516 <__ascii_wctomb+0x16>
 8009502:	2aff      	cmp	r2, #255	; 0xff
 8009504:	bf85      	ittet	hi
 8009506:	238a      	movhi	r3, #138	; 0x8a
 8009508:	6003      	strhi	r3, [r0, #0]
 800950a:	700a      	strbls	r2, [r1, #0]
 800950c:	f04f 30ff 	movhi.w	r0, #4294967295
 8009510:	bf98      	it	ls
 8009512:	2001      	movls	r0, #1
 8009514:	4770      	bx	lr
 8009516:	4608      	mov	r0, r1
 8009518:	4770      	bx	lr

0800951a <memmove>:
 800951a:	4288      	cmp	r0, r1
 800951c:	b510      	push	{r4, lr}
 800951e:	eb01 0302 	add.w	r3, r1, r2
 8009522:	d807      	bhi.n	8009534 <memmove+0x1a>
 8009524:	1e42      	subs	r2, r0, #1
 8009526:	4299      	cmp	r1, r3
 8009528:	d00a      	beq.n	8009540 <memmove+0x26>
 800952a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800952e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009532:	e7f8      	b.n	8009526 <memmove+0xc>
 8009534:	4283      	cmp	r3, r0
 8009536:	d9f5      	bls.n	8009524 <memmove+0xa>
 8009538:	1881      	adds	r1, r0, r2
 800953a:	1ad2      	subs	r2, r2, r3
 800953c:	42d3      	cmn	r3, r2
 800953e:	d100      	bne.n	8009542 <memmove+0x28>
 8009540:	bd10      	pop	{r4, pc}
 8009542:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009546:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800954a:	e7f7      	b.n	800953c <memmove+0x22>

0800954c <__malloc_lock>:
 800954c:	4770      	bx	lr

0800954e <__malloc_unlock>:
 800954e:	4770      	bx	lr

08009550 <_realloc_r>:
 8009550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009552:	4607      	mov	r7, r0
 8009554:	4614      	mov	r4, r2
 8009556:	460e      	mov	r6, r1
 8009558:	b921      	cbnz	r1, 8009564 <_realloc_r+0x14>
 800955a:	4611      	mov	r1, r2
 800955c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009560:	f7ff be00 	b.w	8009164 <_malloc_r>
 8009564:	b922      	cbnz	r2, 8009570 <_realloc_r+0x20>
 8009566:	f7ff fdaf 	bl	80090c8 <_free_r>
 800956a:	4625      	mov	r5, r4
 800956c:	4628      	mov	r0, r5
 800956e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009570:	f000 f814 	bl	800959c <_malloc_usable_size_r>
 8009574:	42a0      	cmp	r0, r4
 8009576:	d20f      	bcs.n	8009598 <_realloc_r+0x48>
 8009578:	4621      	mov	r1, r4
 800957a:	4638      	mov	r0, r7
 800957c:	f7ff fdf2 	bl	8009164 <_malloc_r>
 8009580:	4605      	mov	r5, r0
 8009582:	2800      	cmp	r0, #0
 8009584:	d0f2      	beq.n	800956c <_realloc_r+0x1c>
 8009586:	4631      	mov	r1, r6
 8009588:	4622      	mov	r2, r4
 800958a:	f7ff f985 	bl	8008898 <memcpy>
 800958e:	4631      	mov	r1, r6
 8009590:	4638      	mov	r0, r7
 8009592:	f7ff fd99 	bl	80090c8 <_free_r>
 8009596:	e7e9      	b.n	800956c <_realloc_r+0x1c>
 8009598:	4635      	mov	r5, r6
 800959a:	e7e7      	b.n	800956c <_realloc_r+0x1c>

0800959c <_malloc_usable_size_r>:
 800959c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095a0:	1f18      	subs	r0, r3, #4
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	bfbc      	itt	lt
 80095a6:	580b      	ldrlt	r3, [r1, r0]
 80095a8:	18c0      	addlt	r0, r0, r3
 80095aa:	4770      	bx	lr

080095ac <_init>:
 80095ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095ae:	bf00      	nop
 80095b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095b2:	bc08      	pop	{r3}
 80095b4:	469e      	mov	lr, r3
 80095b6:	4770      	bx	lr

080095b8 <_fini>:
 80095b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095ba:	bf00      	nop
 80095bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095be:	bc08      	pop	{r3}
 80095c0:	469e      	mov	lr, r3
 80095c2:	4770      	bx	lr
